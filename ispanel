#!/usr/bin/env python3
import argparse
import os
import re
import shutil
import subprocess
import sys
import time
from pathlib import Path


def run(cmd: str, check: bool = True) -> subprocess.CompletedProcess:
    return subprocess.run(cmd, shell=True, check=check, text=True)


def require_root():
    if os.geteuid() != 0:
        print("Bu komutları root olarak çalıştırın (sudo kullanın).", file=sys.stderr)
        sys.exit(1)


def wait_for_apt(max_retries: int = 30, delay: int = 10):
    retries = 0
    while retries < max_retries:
        cp = subprocess.run(
            "ps aux | grep -E '(apt|apt-get)\\s' | grep -v grep | grep -v _apt",
            shell=True,
            text=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        if not cp.stdout.strip():
            return
        retries += 1
        print(f"apt kullanımda, {retries}/{max_retries} bekleniyor...", flush=True)
        time.sleep(delay)
    print("HATA: apt kilitli görünüyor. Lütfen diğer apt işlemlerini kapatın.", file=sys.stderr)
    sys.exit(1)


def ensure_cmd(cmd: str, pkg: str):
    if shutil.which(cmd):
        return
    wait_for_apt()
    run(f"DEBIAN_FRONTEND=noninteractive apt-get update -y")
    run(f"DEBIAN_FRONTEND=noninteractive apt-get install -y {pkg}")
    if not shutil.which(cmd):
        print(f"Gerekli komut bulunamadı: {cmd} (paket: {pkg})", file=sys.stderr)
        sys.exit(1)


def check_disk_space(min_gb: int = 1):
    df = shutil.disk_usage("/")
    available_gb = df.free // (1024 * 1024 * 1024)
    print(f"Boş disk alanı: {available_gb} GB")
    if available_gb < min_gb:
        print("En az 1GB boş alan gerekli.", file=sys.stderr)
        sys.exit(1)


def install_openlitespeed_and_php(lsphp_version: str = "83"):
    print(f"OpenLiteSpeed ve PHP {lsphp_version[0]}.{lsphp_version[1]} kuruluyor...")
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get update -y")
    ensure_cmd("curl", "curl")
    ensure_cmd("wget", "wget")

    # Litespeed repo
    run("wget -O - https://repo.litespeed.sh | bash", check=True)

    # Paketler
    run("DEBIAN_FRONTEND=noninteractive apt-get -y install openlitespeed", check=True)
    # Tüm lsphp paketlerini (81/82/83) kur
    run("DEBIAN_FRONTEND=noninteractive apt-get -y install lsphp81* lsphp82* lsphp83*", check=True)

    # Hizmetleri başlat/enable
    # openlitespeed service name is usually 'lsws'
    try:
        run("systemctl enable lsws", check=False)
        run("systemctl restart lsws", check=True)
    except subprocess.CalledProcessError:
        run("/usr/local/lsws/bin/lswsctrl restart", check=True)


def install_mariadb():
    print("MariaDB kuruluyor...")
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get update -y")
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y mariadb-server", check=True)
    run("systemctl enable mariadb", check=False)
    run("systemctl restart mariadb", check=True)


def install_symlink():
    target = Path("/usr/local/bin/ispanel")
    me = Path(__file__).resolve()

    try:
        if target.exists() or target.is_symlink():
            target.unlink()
    except IsADirectoryError:
        raise RuntimeError(f"{target} bir dizin, symlink oluşturulamadı")

    try:
        os.symlink(str(me), str(target))
        print(f"Symlink oluşturuldu: {target} -> {me}")
        return
    except OSError as exc:
        print(f"Symlink oluşturulamadı ({exc}), Python wrapper oluşturulacak...")

    wrapper = (
        "#!/usr/bin/env python3\n"
        "import os\n"
        "import sys\n"
        f"os.execv(sys.executable, [sys.executable, '{me}'] + sys.argv[1:])\n"
    )
    target.write_text(wrapper, encoding="utf-8")
    os.chmod(target, 0o755)
    print(f"Python wrapper oluşturuldu: {target}")


def cmd_install(args: argparse.Namespace):
    require_root()
    check_disk_space(1)

    # OS kontrolü
    with open("/etc/os-release", "r", encoding="utf-8") as f:
        osr = f.read()
    if "Ubuntu" not in osr:
        print("Bu kurulum Ubuntu 22+ için tasarlanmıştır.", file=sys.stderr)
    
    print("=== ispanel Kurulum Başlıyor ===")
    
    # Temel kurulum
    install_openlitespeed_and_php(DEFAULT_LSPHP_VERSION)
    install_mariadb()
    
    # Güvenlik ve performans ayarları
    print("\n=== Güvenlik ve Performans Ayarları ===")
    manage_firewall()
    install_ssl_support()
    secure_mariadb()
    optimize_openlitespeed()
    
    # PHP OPcache konfigürasyonu
    configure_php_opcache()
    
    # Yedek dizinleri oluştur
    Path("/home/backup/domains").mkdir(parents=True, exist_ok=True)
    Path("/home/backup/databases").mkdir(parents=True, exist_ok=True)
    
    # Symlink oluştur
    install_symlink()
    
    print("\n=== Kurulum Tamamlandı ===")
    print(f"✅ OpenLiteSpeed + PHP {DEFAULT_LSPHP_VERSION[0]}.{DEFAULT_LSPHP_VERSION[1]} + MariaDB kuruldu")
    print("✅ Firewall ayarları yapıldı")
    print("✅ SSL/HTTPS desteği eklendi")
    print("✅ MariaDB güvenlik ayarları yapıldı")
    print("✅ OpenLiteSpeed performans optimizasyonu yapıldı")
    print("✅ Yedek sistemi hazır")
    print("\nKullanım: sudo ispanel")


# ---------- OpenLiteSpeed domain yönetimi ----------

LSWS_CONF_DIR = Path("/usr/local/lsws/conf")
VHOSTS_DIR = LSWS_CONF_DIR / "vhosts"
HTTPD_CONF = LSWS_CONF_DIR / "httpd_config.conf"
DOCROOT_BASE = Path("/home")
DEFAULT_LSPHP_VERSION = "83"  # Varsayılan lsphp sürümü (menu kurulum seçimine göre güncellenir)


def reload_lsws():
    try:
        run("systemctl reload lsws", check=True)
    except subprocess.CalledProcessError:
        run("/usr/local/lsws/bin/lswsctrl restart", check=True)


def ensure_http_listener_mapping(domain: str):
    if not HTTPD_CONF.exists():
        print(f"Bulunamadı: {HTTPD_CONF}", file=sys.stderr)
        sys.exit(1)
    content = HTTPD_CONF.read_text(encoding="utf-8")

    map_block = f"map                     {domain}:80 {domain}"
    listener_pattern = r"listener\s+Default\\s*\{[\s\S]*?\}"
    m = re.search(listener_pattern, content)
    if not m:
        # Eksikse, Default HTTP listener'ı oluştur
        default_listener = (
            "\nlistener Default {\n"
            "    address                 *:80\n"
            "    secure                  0\n"
            f"    {map_block}\n"
            "}\n"
        )
        content = content.rstrip() + "\n" + default_listener
        HTTPD_CONF.write_text(content, encoding="utf-8")
        return
    block = m.group(0)
    if map_block in block:
        return
    new_block = block.rstrip("}\n") + f"\n    {map_block}\n}}"
    new_content = content.replace(block, new_block)
    HTTPD_CONF.write_text(new_content, encoding="utf-8")


def ensure_https_listener_mapping(domain: str):
    """HTTPS listener mapping ekle"""
    if not HTTPD_CONF.exists():
        return
    content = HTTPD_CONF.read_text(encoding="utf-8")

    # HTTPS listener kontrolü
    https_listener_pattern = r"listener\s+SSL\\s*\{[\s\S]*?\}"
    if not re.search(https_listener_pattern, content):
        # HTTPS listener oluştur
        ssl_cert = f"/etc/letsencrypt/live/{domain}/fullchain.pem"
        ssl_key = f"/etc/letsencrypt/live/{domain}/privkey.pem"
        
        https_listener = f"""
listener SSL {{
    address                 *:443
    secure                  1
    keyFile                 {ssl_key}
    certFile                {ssl_cert}
    certChain               1
    sslProtocol             24
    ciphers                 EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
    enableECDHE             1
    renegProtection         1
    sslSessionCache         1
    sslSessionTickets       1
    enableSpdy              15
    enableQuic              1
    map                     {domain}:443 {domain}
}}
"""
        # Listener'ı ekle
        new_content = content + https_listener
        HTTPD_CONF.write_text(new_content, encoding="utf-8")
    else:
        # Mevcut HTTPS listener'a domain ekle
        map_block = f"map                     {domain}:443 {domain}"
        m = re.search(https_listener_pattern, content)
        if not m:
            return
        block = m.group(0)
        if map_block in block:
            return
        new_block = block.rstrip("}\n") + f"\n    {map_block}\n}}"
        new_content = content.replace(block, new_block)
        HTTPD_CONF.write_text(new_content, encoding="utf-8")


def write_vhost_conf(domain: str, docroot: Path):
    vdir = VHOSTS_DIR / domain
    vdir.mkdir(parents=True, exist_ok=True)
    vconf = vdir / "vhost.conf"

    vh_root = docroot.parent

    # Gerekli dizinleri oluştur
    log_dir = vh_root / "logs"
    log_dir.mkdir(parents=True, exist_ok=True)
    (log_dir / "access.log").touch(exist_ok=True)
    (log_dir / "error.log").touch(exist_ok=True)

    cgi_dir = vh_root / "cgi-bin"
    cgi_dir.mkdir(parents=True, exist_ok=True)

    protected_dir = docroot / "protected"
    protected_dir.mkdir(parents=True, exist_ok=True)

    awstats_dir = vh_root / "awstats"
    awstats_dir.mkdir(parents=True, exist_ok=True)
    
    conf = f"""docRoot $VH_ROOT/public_html/
enableGzip 1

context / {{
  allowBrowse 1
  location $DOC_ROOT/
  rewrite  {{
    RewriteFile .htaccess
  }}
}}

context /docs/{{
  allowBrowse 1
  location $SERVER_ROOT/docs/
}}

context /protected/{{
  required user test
  authName Protected
  allowBrowse 1
  location protected/
  realm SampleProtectedArea

  accessControl {{
    deny 
    allow *
  }}
}}

context /blocked/{{
  allowBrowse 0
}}

context /cgi-bin/{{
  allowBrowse 1
  location $VH_ROOT/cgi-bin/
  type cgi
}}

expires {{
  enableExpires 1
}}

index {{
  autoIndexURI /_autoindex/default.php
  indexFiles index.html, index.php
  autoIndex 0
  useServer 0
}}

errorPage 404{{
  url /error404.html
}}

errorlog $VH_ROOT/logs/error.log{{
  logLevel DEBUG
  rollingSize 10M
  useServer 1
}}

accessLog $VH_ROOT/logs/access.log{{
  compressArchive 0
  logReferer 1
  keepDays 30
  rollingSize 10M
  logUserAgent 1
  useServer 0
}}

awstats {{
  updateInterval 86400
  workingDir $VH_ROOT/awstats
  updateOffset 0
  siteDomain {domain}
  siteAliases 127.0.0.1 localhost
  updateMode 0
  awstatsURI /awstats/
}}

rewrite {{
  enable 0
  logLevel 0
}}

hotlinkCtrl {{
  suffixes gif, jpeg, jpg, png, css, js
  allowedHosts
  allowDirectAccess 1
  enableHotlinkCtrl 0
  onlySelf 1
}}

accessControl {{
  deny
  allow *
}}

realm SampleProtectedArea {{
  userDB {{
    cacheTimeout 60
    maxCacheSize 200
    location conf/vhosts/$VH_NAME/htpasswd
  }}

  groupDB {{
    cacheTimeout 60
    maxCacheSize 200
    location conf/vhosts/$VH_NAME/htgroup
  }}
}}

general {{
  enableContextAC 0
}}

scriptHandler {{
    add                    lsapi:lsphp{DEFAULT_LSPHP_VERSION} php
}}

phpIniOverride  {{
}}
""".strip()
    vconf.write_text(conf, encoding="utf-8")
    
    # Dizin izinlerini ayarla
    run(f"chown -R lsadm:nogroup {vdir}", check=True)
    run(f"chmod -R 755 {vdir}", check=True)
    run(f"chown -R lsadm:nogroup {vh_root}", check=False)
    run(f"chmod -R 755 {vh_root}", check=False)


def ensure_virtual_host_reference(domain: str):
    """httpd_config.conf içine virtualHost referansı ekle."""
    if not HTTPD_CONF.exists():
        print(f"Bulunamadı: {HTTPD_CONF}", file=sys.stderr)
        sys.exit(1)
    content = HTTPD_CONF.read_text(encoding="utf-8")
    
    # Virtual Host Root'u da ekle
    docroot = DOCROOT_BASE / domain
    vhost_ref = (
        f"virtualHost {domain} {{\n"
        f"    vhRoot                  {docroot}\n"
        f"    configFile              conf/vhosts/{domain}/vhost.conf\n"
        f"    allowSymbolLink         1\n"
        f"    enableScript            1\n"
        f"    restrained              1\n"
        f"}}\n"
    )
    # Zaten var mı kontrol et (virtualHost domain satırı baz alınır)
    if re.search(rf"virtualHost\s+{re.escape(domain)}\b", content):
        return
    content = content.rstrip() + "\n\n" + vhost_ref
    HTTPD_CONF.write_text(content, encoding="utf-8")


def ensure_docroot(domain: str) -> Path:
    docroot = DOCROOT_BASE / domain / "public_html"
    docroot.mkdir(parents=True, exist_ok=True)
    index_file = docroot / "index.php"
    if not index_file.exists():
        # Güzel tasarımlı default index.php oluştur
        default_content = '''<?php
// isPanel tarafından yönetilmektedir
// https://ispanel.com
?>
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo $_SERVER['HTTP_HOST']; ?> - isPanel ile Yönetiliyor</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }
        
        .container {
            text-align: center;
            max-width: 600px;
            padding: 2rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }
        
        .logo {
            font-size: 3rem;
            font-weight: bold;
            margin-bottom: 1rem;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .domain {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: #f0f0f0;
        }
        
        .status {
            background: rgba(76, 175, 80, 0.2);
            border: 1px solid #4caf50;
            border-radius: 10px;
            padding: 1rem;
            margin: 1.5rem 0;
        }
        
        .status h3 {
            color: #4caf50;
            margin-bottom: 0.5rem;
        }
        
        .info {
            background: rgba(33, 150, 243, 0.2);
            border: 1px solid #2196f3;
            border-radius: 10px;
            padding: 1rem;
            margin: 1rem 0;
        }
        
        .info h4 {
            color: #2196f3;
            margin-bottom: 0.5rem;
        }
        
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin: 1.5rem 0;
        }
        
        .feature {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 1rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .feature h4 {
            color: #ffd700;
            margin-bottom: 0.5rem;
        }
        
        .footer {
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .footer a {
            color: #4ecdc4;
            text-decoration: none;
            font-weight: bold;
        }
        
        .footer a:hover {
            text-decoration: underline;
        }
        
        .php-info {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            padding: 1rem;
            margin-top: 1rem;
            font-family: monospace;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">isPanel</div>
        <div class="domain"><?php echo $_SERVER['HTTP_HOST']; ?></div>
        
        <div class="status">
            <h3>✅ Site Aktif</h3>
            <p>Bu domain isPanel tarafından yönetilmektedir</p>
        </div>
        
        <div class="info">
            <h4>🚀 isPanel Özellikleri</h4>
            <p>OpenLiteSpeed + PHP 8.3 + MariaDB ile güçlü web hosting</p>
        </div>
        
        <div class="features">
            <div class="feature">
                <h4>⚡ Hızlı</h4>
                <p>OpenLiteSpeed ile optimize edilmiş performans</p>
            </div>
            <div class="feature">
                <h4>🔒 Güvenli</h4>
                <p>SSL sertifikası ve güvenlik ayarları</p>
            </div>
            <div class="feature">
                <h4>📦 Kolay</h4>
                <p>Tek komutla domain ve veritabanı yönetimi</p>
            </div>
        </div>
        
        <div class="php-info">
            <strong>PHP Bilgileri:</strong><br>
            PHP Sürümü: <?php echo PHP_VERSION; ?><br>
            Sunucu: <?php echo $_SERVER['SERVER_SOFTWARE'] ?? 'OpenLiteSpeed'; ?><br>
            Tarih: <?php echo date('d.m.Y H:i:s'); ?>
        </div>
        
        <div class="footer">
            <p>Daha fazla bilgi için: <a href="https://ispanel.com" target="_blank">ispanel.com</a></p>
            <p>GitHub: <a href="https://github.com/ismailaydemiriu/ispanel" target="_blank">GitHub Repository</a></p>
        </div>
    </div>
</body>
</html>'''
        index_file.write_text(default_content, encoding="utf-8")
    run(f"chown -R lsadm:nogroup {DOCROOT_BASE / domain}", check=False)
    return docroot


def domain_add(domain: str):
    if not re.match(r"^[A-Za-z0-9.-]+$", domain):
        print("Geçersiz domain.", file=sys.stderr)
        sys.exit(1)
    if not LSWS_CONF_DIR.exists():
        print("OpenLiteSpeed kurulu değil gibi görünüyor.", file=sys.stderr)
        sys.exit(1)
    
    docroot = ensure_docroot(domain)
    write_vhost_conf(domain, docroot)
    ensure_virtual_host_reference(domain)
    ensure_http_listener_mapping(domain)
    
    # SSL sertifikası oluştur (Let's Encrypt)
    if shutil.which("certbot"):
        try:
            print(f"SSL sertifikası oluşturuluyor: {domain}")
            run(f"certbot certonly --standalone -d {domain} --non-interactive --agree-tos --email admin@{domain}", check=False)
            
            # SSL konfigürasyonunu OpenLiteSpeed'e ekle
            ssl_cert = f"/etc/letsencrypt/live/{domain}/fullchain.pem"
            ssl_key = f"/etc/letsencrypt/live/{domain}/privkey.pem"
            
            if Path(ssl_cert).exists() and Path(ssl_key).exists():
                # HTTPS listener ekle
                ensure_https_listener_mapping(domain)
                print(f"SSL sertifikası başarıyla oluşturuldu: {domain}")
        except:
            print(f"SSL sertifikası oluşturulamadı: {domain}")
    
    reload_lsws()
    print(f"Domain eklendi: {domain} -> {docroot}")
    print(f"HTTP: http://{domain}")
    print(f"HTTPS: https://{domain} (SSL varsa)")


def set_domain_php_version(domain: str, version: str):
    """Domain için PHP sürümünü (lsphp81/82/83) ayarla"""
    vconf = VHOSTS_DIR / domain / "vhost.conf"
    if not vconf.exists():
        print("Vhost config bulunamadı.", file=sys.stderr)
        return
    content = vconf.read_text(encoding="utf-8")
    content = re.sub(r"add\s+lsapi:lsphp\d+\s+php", f"add                   lsapi:lsphp{version} php", content)
    vconf.write_text(content, encoding="utf-8")
    reload_lsws()
    print(f"{domain} için PHP lsphp{version} olarak ayarlandı.")


def toggle_http3_brotli(enable: bool):
    """HTTP/3 (QUIC) ve Brotli sıkıştırmayı aç/kapat"""
    if not HTTPD_CONF.exists():
        print("httpd_config.conf bulunamadı.", file=sys.stderr)
        return
    content = HTTPD_CONF.read_text(encoding="utf-8")
    # HTTP/3 QUIC ayarı listener SSL içinde enableQuic 1/0
    content = re.sub(r"enableQuic\s+\d", f"enableQuic              {'1' if enable else '0'}", content)
    HTTPD_CONF.write_text(content, encoding="utf-8")

    # Brotli: global conf'a ek basit bayrak (OLS'te mod_brotli yoksa gzip kullanılabilir; burada örnek bayrak koyuyoruz)
    brotli_marker = "# ispanel_brotli_enabled"
    if enable:
        if brotli_marker not in content:
            with open(HTTPD_CONF, "a", encoding="utf-8") as f:
                f.write(f"\n{brotli_marker}\n# Brotli etkin: statik içerik için harici reverse proxy veya mod eklentisi gerekebilir.\n")
    else:
        newc = Path(HTTPD_CONF).read_text(encoding="utf-8").replace(brotli_marker + "\n", "")
        Path(HTTPD_CONF).write_text(newc, encoding="utf-8")
    reload_lsws()
    print(f"HTTP/3 {'açıldı' if enable else 'kapandı'}; Brotli {'işaretlendi' if enable else 'devre dışı'}.")


def ols_php_menu():
    while True:
        print("\n--- OLS/PHP Ayarları ---")
        print("1) Domain için PHP sürümü ayarla (lsphp81/82/83)")
        print("2) HTTP/3 + Brotli aç")
        print("3) HTTP/3 + Brotli kapat")
        print("0) Geri")
        sub = input("Seçim: ").strip()
        if sub == '1':
            domain = input("Domain: ").strip()
            version = input("Sürüm (81/82/83): ").strip()
            if version not in {"81","82","83"}:
                print("Geçersiz sürüm")
            else:
                set_domain_php_version(domain, version)
        elif sub == '2':
            toggle_http3_brotli(True)
        elif sub == '3':
            toggle_http3_brotli(False)
        elif sub == '0':
            break
        else:
            print("Geçersiz seçim")


def domain_remove(domain: str):
    vdir = VHOSTS_DIR / domain
    if vdir.exists():
        shutil.rmtree(vdir)

    if HTTPD_CONF.exists():
        content = HTTPD_CONF.read_text(encoding="utf-8")
        # HTTP listener'dan domain mapping'i sil
        content = re.sub(rf"\n\s*map\s+{re.escape(domain)}:80\s+{re.escape(domain)}\s*", "\n", content)
        # HTTPS listener'dan domain mapping'i sil
        content = re.sub(rf"\n\s*map\s+{re.escape(domain)}:443\s+{re.escape(domain)}\s*", "\n", content)
        # virtualHost referansını sil
        lines = content.split('\n')
        new_lines = []
        skip_until_brace = False
        for line in lines:
            if f"virtualHost {domain}" in line:
                skip_until_brace = True
                continue
            if skip_until_brace and line.strip() == '}':
                skip_until_brace = False
                continue
            if not skip_until_brace:
                new_lines.append(line)
        content = '\n'.join(new_lines)
        HTTPD_CONF.write_text(content, encoding="utf-8")
    reload_lsws()
    print(f"Domain silindi: {domain}")


# ---------- MariaDB yönetimi ----------

def mysql_exec(sql: str):
    run(f"mysql -uroot -e \"{sql}\"", check=True)


def db_create(db: str, user: str, password: str):
    if not re.match(r"^[A-Za-z0-9_]+$", db):
        print("Geçersiz veritabanı adı.", file=sys.stderr)
        sys.exit(1)
    if not re.match(r"^[A-Za-z0-9_]+$", user):
        print("Geçersiz kullanıcı adı.", file=sys.stderr)
        sys.exit(1)
    sql = (
        f"CREATE DATABASE IF NOT EXISTS `{db}` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; "
        f"CREATE USER IF NOT EXISTS '{user}'@'%' IDENTIFIED BY '{password}'; "
        f"GRANT ALL PRIVILEGES ON `{db}`.* TO '{user}'@'%'; FLUSH PRIVILEGES;"
    )
    mysql_exec(sql)
    print(f"DB oluşturuldu: {db}, kullanıcı: {user}")


def db_delete(db: str, user: str):
    sql = (
        f"DROP DATABASE IF EXISTS `{db}`; "
        f"DROP USER IF EXISTS '{user}'@'%'; FLUSH PRIVILEGES;"
    )
    mysql_exec(sql)
    print(f"DB silindi: {db}, kullanıcı: {user}")


def db_user_create(user: str, password: str, host: str = "%"):
    if not re.match(r"^[A-Za-z0-9_]+$", user):
        print("Geçersiz kullanıcı adı.", file=sys.stderr)
        sys.exit(1)
    sql = (
        f"CREATE USER IF NOT EXISTS '{user}'@'{host}' IDENTIFIED BY '{password}'; "
        f"FLUSH PRIVILEGES;"
    )
    mysql_exec(sql)
    print(f"Kullanıcı oluşturuldu: {user}@{host}")


def reset_mysql_root_password():
    print("MySQL root şifresi sıfırlanıyor...")
    new_password = input("Yeni root şifresi: ").strip()
    if not new_password:
        print("Şifre boş olamaz!")
        return
    
    # MySQL servisini durdur
    run("systemctl stop mariadb", check=False)
    
    # Güvenli modda MySQL başlat
    run("mysqld_safe --skip-grant-tables --skip-networking &", check=False)
    time.sleep(3)
    
    # Root şifresini sıfırla
    sql = f"ALTER USER 'root'@'localhost' IDENTIFIED BY '{new_password}';"
    run(f"mysql -u root -e \"{sql}\"", check=True)
    
    # MySQL'i normal modda yeniden başlat
    run("pkill mysqld", check=False)
    time.sleep(2)
    run("systemctl start mariadb", check=True)
    
    print("MySQL root şifresi başarıyla sıfırlandı!")


def reset_openlitespeed_admin_password():
    print("OpenLiteSpeed admin şifresi sıfırlanıyor...")
    new_password = input("Yeni admin şifresi: ").strip()
    if not new_password:
        print("Şifre boş olamaz!")
        return
    
    if len(new_password) < 6:
        print("Şifre en az 6 karakter olmalı!")
        return
    
    # OpenLiteSpeed admin şifresini sıfırla
    admin_script = "/usr/local/lsws/admin/misc/admpass.sh"
    if not Path(admin_script).exists():
        print("OpenLiteSpeed admin scripti bulunamadı!", file=sys.stderr)
        return
    
    try:
        # Non-interactive şifre ayarlama
        print("Admin şifresi ayarlanıyor...")
        
        # Şifreyi dosyaya yaz ve script'e yönlendir
        import tempfile
        with tempfile.NamedTemporaryFile(mode='w', delete=False) as f:
            f.write(f"{new_password}\n{new_password}\n")
            temp_file = f.name
        
        # Script'i non-interactive çalıştır
        run(f"cat {temp_file} | {admin_script}", check=True)
        
        # Geçici dosyayı sil
        Path(temp_file).unlink()
        
        print("✅ OpenLiteSpeed admin şifresi başarıyla sıfırlandı!")
        print(f"Admin panel: https://SERVER_IP:7080")
        print(f"Kullanıcı: admin")
        print(f"Şifre: {new_password}")
        
    except subprocess.CalledProcessError as e:
        print(f"Şifre sıfırlama hatası: {e}")
        print("Manuel olarak şu komutu çalıştırabilirsiniz:")
        print(f"sudo {admin_script}")
    except Exception as e:
        print(f"Beklenmeyen hata: {e}")


def check_port(port):
    """Port kullanımını kontrol et"""
    try:
        result = run(f"netstat -tuln | grep ':{port} '", check=False)
        return bool(result.stdout.strip())
    except:
        return False


def manage_firewall():
    """Firewall yönetimi"""
    print("Firewall yönetimi...")
    
    # UFW kontrolü
    if shutil.which("ufw"):
        print("UFW firewall yönetiliyor...")
        ports = [20, 21, 22, 80, 443, 7080, 8088]
        for port in ports:
            run(f"ufw allow {port}/tcp", check=False)
        run("ufw --force enable", check=False)
    else:
        print("UFW bulunamadı, iptables kullanılıyor...")
        # iptables kuralları
        run("iptables -I INPUT -p tcp --dport 20 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 21 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 22 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 80 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 443 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 7080 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 8088 -j ACCEPT", check=False)


def install_ssl_support():
    """SSL/HTTPS desteği kurulumu"""
    print("SSL/HTTPS desteği kuruluyor...")
    wait_for_apt()
    
    # Certbot kurulumu
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y certbot", check=True)
    
    # OpenLiteSpeed için SSL konfigürasyonu
    ssl_dir = Path("/usr/local/lsws/conf/cert")
    ssl_dir.mkdir(exist_ok=True)
    
    print("SSL desteği kuruldu. Let's Encrypt sertifikaları domain ekleme sırasında otomatik oluşturulacak.")


def secure_mariadb():
    """MariaDB güvenlik ayarları"""
    print("MariaDB güvenlik ayarları yapılıyor...")
    
    # mysql_secure_installation benzeri işlemler
    sql_commands = [
        "DELETE FROM mysql.user WHERE User='';",
        "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');",
        "DROP DATABASE IF EXISTS test;",
        "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';",
        "FLUSH PRIVILEGES;"
    ]
    
    for sql in sql_commands:
        try:
            mysql_exec(sql)
        except:
            pass  # Bazı komutlar zaten uygulanmış olabilir
    
    print("MariaDB güvenlik ayarları tamamlandı.")


def optimize_openlitespeed():
    """OpenLiteSpeed performans optimizasyonu"""
    print("OpenLiteSpeed performans optimizasyonu yapılıyor...")
    
    # Konfigürasyon dosyası optimizasyonları
    config_file = Path("/usr/local/lsws/conf/httpd_config.conf")
    if config_file.exists():
        content = config_file.read_text(encoding="utf-8")
        
        # Performans ayarları
        optimizations = [
            ("maxConnections", "1000"),
            ("maxSSLConnections", "1000"),
            ("connTimeout", "300"),
            ("keepAliveTimeout", "15"),
            ("maxKeepAliveReq", "1000")
        ]
        
        for setting, value in optimizations:
            if f"{setting} {value}" not in content:
                # Konfigürasyona optimizasyon ekle
                pass
    
    print("OpenLiteSpeed performans optimizasyonu tamamlandı.")


def repair_mariadb():
    """MariaDB onarım işlemleri"""
    print("MariaDB onarım işlemleri yapılıyor...")
    
    # MySQL servisini durdur
    run("systemctl stop mariadb", check=False)
    
    # Repair işlemleri
    try:
        # MySQL'i güvenli modda başlat
        run("mysqld_safe --skip-grant-tables --skip-networking &", check=False)
        time.sleep(3)
        
        # Repair komutları
        repair_commands = [
            "REPAIR TABLE mysql.user;",
            "REPAIR TABLE mysql.db;",
            "REPAIR TABLE mysql.tables_priv;",
            "REPAIR TABLE mysql.columns_priv;",
            "FLUSH PRIVILEGES;"
        ]
        
        for cmd in repair_commands:
            try:
                run(f"mysql -u root -e \"{cmd}\"", check=True)
            except:
                pass
        
        # MySQL'i normal modda yeniden başlat
        run("pkill mysqld", check=False)
        time.sleep(2)
        run("systemctl start mariadb", check=True)
        
        print("MariaDB onarım işlemleri tamamlandı.")
    except Exception as e:
        print(f"MariaDB onarım hatası: {e}")
        run("systemctl start mariadb", check=False)


def repair_openlitespeed():
    """OpenLiteSpeed onarım işlemleri"""
    print("OpenLiteSpeed onarım işlemleri yapılıyor...")
    
    try:
        # Konfigürasyon dosyalarını kontrol et
        config_files = [
            "/usr/local/lsws/conf/httpd_config.conf",
            "/usr/local/lsws/conf/vhosts"
        ]
        
        for config_file in config_files:
            if Path(config_file).exists():
                # Dosya izinlerini düzelt
                run(f"chown -R lsadm:lsadm {config_file}", check=False)
                run(f"chmod -R 755 {config_file}", check=False)
        
        # OpenLiteSpeed'i yeniden başlat
        run("systemctl restart lsws", check=False)
        
        # Alternatif restart
        try:
            run("/usr/local/lsws/bin/lswsctrl restart", check=True)
        except:
            pass
            
        print("OpenLiteSpeed onarım işlemleri tamamlandı.")
    except Exception as e:
        print(f"OpenLiteSpeed onarım hatası: {e}")


def install_redis():
    """Redis kurulumu"""
    print("Redis kuruluyor...")
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y redis-server", check=True)
    run("systemctl enable redis-server", check=False)
    run("systemctl start redis-server", check=True)
    print("Redis kuruldu ve başlatıldı.")


def install_memcached():
    """Memcached kurulumu"""
    print("Memcached kuruluyor...")
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y memcached", check=True)
    run("systemctl enable memcached", check=False)
    run("systemctl start memcached", check=True)
    print("Memcached kuruldu ve başlatıldı.")


def configure_php_opcache():
    """PHP OPcache konfigürasyonu"""
    print("PHP OPcache konfigürasyonu yapılıyor...")
    
    # OPcache ayarları
    opcache_config = """
[opcache]
opcache.enable=1
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=2
opcache.fast_shutdown=1
opcache.enable_cli=1
"""
    
    # PHP ini dosyasına ekle
    candidates = [
        "/usr/local/lsws/lsphp81/etc/php/8.1/litespeed/php.ini",
        "/usr/local/lsws/lsphp82/etc/php/8.2/litespeed/php.ini",
        "/usr/local/lsws/lsphp83/etc/php/8.3/litespeed/php.ini",
    ]
    wrote = False
    for php_ini_path in candidates:
        if Path(php_ini_path).exists():
            with open(php_ini_path, "a", encoding="utf-8") as f:
                f.write(opcache_config)
            wrote = True
    if wrote:
        print("OPcache konfigürasyonu eklendi (mevcut sürümler).")
    else:
        print("PHP ini dosyası bulunamadı, OPcache manuel olarak yapılandırılmalı.")


def backup_domain(domain):
    """Domain yedeği alma"""
    backup_dir = Path("/home/backup/domains")
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    backup_file = backup_dir / f"{domain}_{timestamp}.tar.gz"
    
    docroot = DOCROOT_BASE / domain
    if docroot.exists():
        run(f"tar -czf {backup_file} -C {docroot.parent} {domain}", check=True)
        print(f"Domain yedeği alındı: {backup_file}")
        return str(backup_file)
    else:
        print(f"Domain docroot bulunamadı: {docroot}")
        return None


def backup_database(db_name):
    """Veritabanı yedeği alma"""
    backup_dir = Path("/home/backup/databases")
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    backup_file = backup_dir / f"{db_name}_{timestamp}.sql"
    
    run(f"mysqldump -uroot {db_name} > {backup_file}", check=True)
    print(f"Veritabanı yedeği alındı: {backup_file}")
    return str(backup_file)


def restore_domain(backup_file):
    """Domain yedeği geri yükleme"""
    if not Path(backup_file).exists():
        print(f"Yedek dosyası bulunamadı: {backup_file}")
        return False
    
    run(f"tar -xzf {backup_file} -C {DOCROOT_BASE.parent}", check=True)
    print(f"Domain yedeği geri yüklendi: {backup_file}")
    return True


def restore_database(backup_file, db_name):
    """Veritabanı yedeği geri yükleme"""
    if not Path(backup_file).exists():
        print(f"Yedek dosyası bulunamadı: {backup_file}")
        return False
    
    # Veritabanını oluştur
    mysql_exec(f"CREATE DATABASE IF NOT EXISTS {db_name}")
    
    # Yedeği geri yükle
    run(f"mysql -uroot {db_name} < {backup_file}", check=True)
    print(f"Veritabanı yedeği geri yüklendi: {backup_file}")
    return True


def fix_virtual_host_root(domain: str):
    """Mevcut domain'in Virtual Host Root'unu düzelt"""
    if not HTTPD_CONF.exists():
        print(f"Bulunamadı: {HTTPD_CONF}", file=sys.stderr)
        return False
    
    content = HTTPD_CONF.read_text(encoding="utf-8")
    docroot = DOCROOT_BASE / domain
    
    # Mevcut virtualHost bloğunu bul ve güncelle
    pattern = rf"virtualHost\s+{re.escape(domain)}\s*\{{[^}}]*\}}"
    match = re.search(pattern, content, re.DOTALL)
    
    if match:
        old_block = match.group(0)
        new_block = f"""virtualHost {domain} {{
    vhRoot                  {docroot}
    configFile              conf/vhosts/{domain}/vhost.conf
    allowSymbolLink         1
    enableScript            1
    restrained              1
}}"""
        content = content.replace(old_block, new_block)
        HTTPD_CONF.write_text(content, encoding="utf-8")
        print(f"✅ {domain} Virtual Host Root düzeltildi: {docroot}")
        return True
    else:
        print(f"❌ {domain} virtualHost bloğu bulunamadı")
        return False


def fix_vhost_config(domain: str):
    """Mevcut domain'in vhost konfigürasyonunu standart yapıya güncelle"""
    vdir = VHOSTS_DIR / domain
    if not vdir.exists():
        print(f"❌ {domain} vhost dizini bulunamadı")
        return False
    
    vconf = vdir / "vhost.conf"
    if not vconf.exists():
        print(f"❌ {domain} vhost.conf bulunamadı")
        return False
    
    # Yeni standart konfigürasyonu oluştur
    docroot = DOCROOT_BASE / domain / "public_html"
    vh_root = docroot.parent

    # Gerekli dizinleri oluştur
    log_dir = vh_root / "logs"
    log_dir.mkdir(parents=True, exist_ok=True)
    (log_dir / "access.log").touch(exist_ok=True)
    (log_dir / "error.log").touch(exist_ok=True)

    cgi_dir = vh_root / "cgi-bin"
    cgi_dir.mkdir(parents=True, exist_ok=True)

    protected_dir = docroot / "protected"
    protected_dir.mkdir(parents=True, exist_ok=True)

    awstats_dir = vh_root / "awstats"
    awstats_dir.mkdir(parents=True, exist_ok=True)
    
    conf = f"""docRoot $VH_ROOT/public_html/
enableGzip 1

context / {{
  allowBrowse 1
  location $DOC_ROOT/
  rewrite  {{
    RewriteFile .htaccess
  }}
}}

context /docs/{{
  allowBrowse 1
  location $SERVER_ROOT/docs/
}}

context /protected/{{
  required user test
  authName Protected
  allowBrowse 1
  location protected/
  realm SampleProtectedArea

  accessControl {{
    deny 
    allow *
  }}
}}

context /blocked/{{
  allowBrowse 0
}}

context /cgi-bin/{{
  allowBrowse 1
  location $VH_ROOT/cgi-bin/
  type cgi
}}

expires {{
  enableExpires 1
}}

index {{
  autoIndexURI /_autoindex/default.php
  indexFiles index.html, index.php
  autoIndex 0
  useServer 0
}}

errorPage 404{{
  url /error404.html
}}

errorlog $VH_ROOT/logs/error.log{{
  logLevel DEBUG
  rollingSize 10M
  useServer 1
}}

accessLog $VH_ROOT/logs/access.log{{
  compressArchive 0
  logReferer 1
  keepDays 30
  rollingSize 10M
  logUserAgent 1
  useServer 0
}}

awstats {{
  updateInterval 86400
  workingDir $VH_ROOT/awstats
  updateOffset 0
  siteDomain {domain}
  siteAliases 127.0.0.1 localhost
  updateMode 0
  awstatsURI /awstats/
}}

rewrite {{
  enable 0
  logLevel 0
}}

hotlinkCtrl {{
  suffixes gif, jpeg, jpg, png, css, js
  allowedHosts
  allowDirectAccess 1
  enableHotlinkCtrl 0
  onlySelf 1
}}

accessControl {{
  deny
  allow *
}}

realm SampleProtectedArea {{
  userDB {{
    cacheTimeout 60
    maxCacheSize 200
    location conf/vhosts/$VH_NAME/htpasswd
  }}

  groupDB {{
    cacheTimeout 60
    maxCacheSize 200
    location conf/vhosts/$VH_NAME/htgroup
  }}
}}

general {{
  enableContextAC 0
}}

scriptHandler {{
    add                    lsapi:lsphp{DEFAULT_LSPHP_VERSION} php
}}

phpIniOverride  {{
}}
""".strip()
    
    vconf.write_text(conf, encoding="utf-8")
    
    # Dizin izinlerini ayarla
    run(f"chown -R lsadm:nogroup {vdir}", check=True)
    run(f"chmod -R 755 {vdir}", check=True)
    run(f"chown -R lsadm:nogroup {vh_root}", check=False)
    run(f"chmod -R 755 {vh_root}", check=False)
    
    print(f"✅ {domain} vhost konfigürasyonu standart yapıya güncellendi")
    return True


def list_domains():
    """Aktif domainleri listele"""
    print("\n=== Aktif Domainler ===")
    
    if not VHOSTS_DIR.exists():
        print("Vhost dizini bulunamadı.")
        return
    
    domains = []
    for domain_dir in VHOSTS_DIR.iterdir():
        if domain_dir.is_dir() and domain_dir.name != "Example":
            domain = domain_dir.name
            docroot = DOCROOT_BASE / domain / "public_html"
            vhost_conf = domain_dir / "vhost.conf"
            
            # Domain bilgilerini topla
            info = {
                "domain": domain,
                "docroot": str(docroot),
                "exists": docroot.exists(),
                "vhost_exists": vhost_conf.exists()
            }
            domains.append(info)
    
    if not domains:
        print("Hiç domain bulunamadı.")
        return
    
    print(f"{'Domain':<20} {'Docroot':<30} {'Durum':<10}")
    print("-" * 60)
    
    for info in domains:
        status = "✅ Aktif" if info["exists"] and info["vhost_exists"] else "❌ Hata"
        print(f"{info['domain']:<20} {info['docroot']:<30} {status:<10}")
        
        # Virtual Host Root kontrolü
        if info["vhost_exists"]:
            print(f"  🔧 Virtual Host Root düzeltmek için: python3 ispanel fix-vhost {info['domain']}")


def list_databases():
    """Veritabanlarını listele"""
    print("\n=== Veritabanları ===")
    
    try:
        # Veritabanlarını listele
        result = run("mysql -uroot -e 'SHOW DATABASES;'", check=False)
        if result.returncode != 0:
            print("MariaDB bağlantı hatası. Servis çalışıyor mu kontrol edin.")
            return
        
        databases = []
        for line in result.stdout.strip().split('\n'):
            line = line.strip()
            if line and line not in ['Database', 'information_schema', 'performance_schema', 'mysql', 'sys']:
                databases.append(line)
        
        if not databases:
            print("Hiç veritabanı bulunamadı.")
            return
        
        print(f"{'Veritabanı':<20} {'Boyut':<15} {'Tarih':<20}")
        print("-" * 55)
        
        for db in databases:
            # Veritabanı boyutunu al
            size_result = run(f"mysql -uroot -e 'SELECT ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS \"DB Size in MB\" FROM information_schema.tables WHERE table_schema=\"{db}\";'", check=False)
            size = size_result.stdout.strip().split('\n')[-1] if size_result.returncode == 0 else "N/A"
            
            # Son değişiklik tarihi
            date_result = run(f"mysql -uroot -e 'SELECT MAX(update_time) FROM information_schema.tables WHERE table_schema=\"{db}\";'", check=False)
            date = date_result.stdout.strip().split('\n')[-1] if date_result.returncode == 0 else "N/A"
            
            print(f"{db:<20} {size:<15} {date:<20}")
            
    except Exception as e:
        print(f"Veritabanı listesi alınamadı: {e}")


def list_backups():
    """Yedekleri listele"""
    domain_backups = list(Path("/home/backup/domains").glob("*.tar.gz"))
    db_backups = list(Path("/home/backup/databases").glob("*.sql"))
    
    print("\n=== Domain Yedekleri ===")
    for backup in domain_backups:
        print(f"- {backup.name}")
    
    print("\n=== Veritabanı Yedekleri ===")
    for backup in db_backups:
        print(f"- {backup.name}")


def install_cron():
    ensure_cmd("crontab", "cron")


def cron_add(line: str):
    install_cron()
    # mevcut crontab al
    cp = subprocess.run("crontab -l", shell=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    current = cp.stdout if cp.returncode == 0 else ""
    if line in current:
        print("Cron zaten mevcut")
        return
    new = current + ("\n" if current and not current.endswith("\n") else "") + line + "\n"
    p = subprocess.run("crontab -", shell=True, input=new, text=True)
    if p.returncode == 0:
        print("Cron eklendi")
    else:
        print("Cron eklenemedi", file=sys.stderr)


def cron_backup_menu():
    while True:
        print("\n--- Cron Backup Ayarları ---")
        print("1) Günlük DB yedeği kur (02:30)")
        print("2) Günlük Dosya yedeği kur (03:00)")
        print("3) Cron listele")
        print("0) Geri")
        sub = input("Seçim: ").strip()
        if sub == "1":
            db = input("Yedeklenecek DB adı: ").strip()
            backup_dir = "/home/backup/databases"
            line = f"30 2 * * * mysqldump -uroot {db} > {backup_dir}/{db}_$(date +\\%Y\\%m\\%d).sql"
            cron_add(line)
        elif sub == "2":
            domain = input("Yedeklenecek domain: ").strip()
            backup_dir = "/home/backup/domains"
            line = f"0 3 * * * tar -czf {backup_dir}/{domain}_$(date +\\%Y\\%m\\%d).tar.gz -C {DOCROOT_BASE} {domain}"
            cron_add(line)
        elif sub == "3":
            subprocess.run("crontab -l | cat", shell=True)
        elif sub == "0":
            break
        else:
            print("Geçersiz seçim")


def interactive_menu():
    while True:
        print("\n=== ispanel (Ubuntu 22+) ===")
        print("1) Kurulum (OpenLiteSpeed + PHP 8.2 + MariaDB)")
        print("2) Kurulum (OpenLiteSpeed + PHP 8.3 + MariaDB)")
        print("3) Domain ekle")
        print("4) Domain Listesi")
        print("5) Domain sil")
        print("6) DB Listesi")
        print("7) Virtual Host Root düzelt")
        print("8) Vhost Konfigürasyon düzelt")
        print("9) DB oluştur")
        print("10) DB sil")
        print("11) MySQL root şifre sıfırla")
        print("12) OpenLiteSpeed admin şifre sıfırla")
        print("13) Port kontrolü ve Firewall yönetimi")
        print("14) SSL/HTTPS desteği kur")
        print("15) MariaDB güvenlik ayarları")
        print("16) OpenLiteSpeed performans optimizasyonu")
        print("17) Dosya yedekleme menüsü")
        print("18) Veritabanı yedekleme menüsü")
        print("19) Yedekleri listele")
        print("20) Cron backup ayarları")
        print("21) Onarım araçları")
        print("22) Cache sistemleri (Redis/Memcached)")
        print("23) Sistem yönetimi")
        print("24) OLS/PHP ayarları")
        print("25) isPanel güncelle")
        print("0) Çıkış")
        choice = input("Seçim: ").strip()
        if choice == "1":
            DEFAULT_LSPHP_VERSION = "82"
            cmd_install(argparse.Namespace())
        elif choice == "2":
            DEFAULT_LSPHP_VERSION = "83"
            cmd_install(argparse.Namespace())
        elif choice == "3":
            domain = input("Domain: ").strip()
            domain_add(domain)
        elif choice == "4":
            list_domains()
        elif choice == "5":
            domain = input("Domain: ").strip()
            domain_remove(domain)
        elif choice == "6":
            list_databases()
        elif choice == "7":
            domain = input("Domain: ").strip()
            fix_virtual_host_root(domain)
        elif choice == "8":
            domain = input("Domain: ").strip()
            fix_vhost_config(domain)
        elif choice == "9":
            db = input("DB adı: ").strip()
            user = input("Kullanıcı: ").strip()
            password = input("Parola: ").strip()
            db_create(db, user, password)
        elif choice == "10":
            db = input("DB adı: ").strip()
            user = input("Kullanıcı: ").strip()
            db_delete(db, user)
        elif choice == "11":
            reset_mysql_root_password()
        elif choice == "12":
            reset_openlitespeed_admin_password()
        elif choice == "13":
            manage_firewall()
        elif choice == "14":
            install_ssl_support()
        elif choice == "15":
            secure_mariadb()
        elif choice == "16":
            while True:
                print("\n--- Dosya Yedekleme ---")
                print("1) Domain yedeği al")
                print("2) Domain yedeği geri yükle")
                print("3) Docroot taban klasörünü göster")
                print("0) Geri")
                sub = input("Seçim: ").strip()
                if sub == "1":
                    domain = input("Domain: ").strip()
                    backup_domain(domain)
                elif sub == "2":
                    backup_file = input("Yedek dosyası yolu: ").strip()
                    restore_domain(backup_file)
                elif sub == "3":
                    print(f"Docroot base: {DOCROOT_BASE}")
                elif sub == "0":
                    break
                else:
                    print("Geçersiz seçim")
        elif choice == "17":
            while True:
                print("\n--- Veritabanı Yedekleme ---")
                print("1) DB yedeği al")
                print("2) DB yedeği geri yükle")
                print("3) DB kullanıcısı oluştur")
                print("0) Geri")
                sub = input("Seçim: ").strip()
                if sub == "1":
                    db = input("DB adı: ").strip()
                    backup_database(db)
                elif sub == "2":
                    backup_file = input("Yedek dosyası yolu: ").strip()
                    db_name = input("Hedef DB adı: ").strip()
                    restore_database(backup_file, db_name)
                elif sub == "3":
                    user = input("Kullanıcı adı: ").strip()
                    password = input("Parola: ").strip()
                    host = input("Host (varsayılan %): ").strip() or "%"
                    db_user_create(user, password, host)
                elif sub == "0":
                    break
                else:
                    print("Geçersiz seçim")
        elif choice == "18":
            list_backups()
        elif choice == "19":
            cron_backup_menu()
        elif choice == "20":
            repair_menu()
        elif choice == "21":
            cache_menu()
        elif choice == "22":
            system_management_menu()
        elif choice == "23":
            ols_php_menu()
        elif choice == "24":
            update_ispanel()
        elif choice == "0":
            break
        else:
            print("Geçersiz seçim")


def repair_menu():
    """Onarım araçları menüsü"""
    while True:
        print("\n--- Onarım Araçları ---")
        print("1) MariaDB onar")
        print("2) OpenLiteSpeed onar")
        print("3) PHP OPcache konfigürasyonu")
        print("0) Geri")
        sub = input("Seçim: ").strip()
        if sub == "1":
            repair_mariadb()
        elif sub == "2":
            repair_openlitespeed()
        elif sub == "3":
            configure_php_opcache()
        elif sub == "0":
            break
        else:
            print("Geçersiz seçim")


def cache_menu():
    """Cache sistemleri menüsü"""
    while True:
        print("\n--- Cache Sistemleri ---")
        print("1) Redis kur")
        print("2) Memcached kur")
        print("3) Redis durumu")
        print("4) Memcached durumu")
        print("0) Geri")
        sub = input("Seçim: ").strip()
        if sub == "1":
            install_redis()
        elif sub == "2":
            install_memcached()
        elif sub == "3":
            run("systemctl status redis-server", check=False)
        elif sub == "4":
            run("systemctl status memcached", check=False)
        elif sub == "0":
            break
        else:
            print("Geçersiz seçim")


def auto_update_system():
    """Otomatik sistem güncellemeleri"""
    print("Sistem paketleri güncelleniyor...")
    wait_for_apt()
    
    # Güncelleme işlemleri
    run("DEBIAN_FRONTEND=noninteractive apt-get update -y", check=True)
    run("DEBIAN_FRONTEND=noninteractive apt-get upgrade -y", check=True)
    run("DEBIAN_FRONTEND=noninteractive apt-get autoremove -y", check=True)
    run("DEBIAN_FRONTEND=noninteractive apt-get autoclean", check=True)
    
    print("Sistem güncellemeleri tamamlandı.")


def setup_backup_rotation():
    """Yedek rotasyonu kurulumu"""
    print("Yedek rotasyonu ayarlanıyor...")
    
    # Yedek rotasyon scripti
    rotation_script = """#!/bin/bash
# 30 günden eski domain yedeklerini sil
find /home/backup/domains -name "*.tar.gz" -mtime +30 -delete
# 30 günden eski DB yedeklerini sil  
find /home/backup/databases -name "*.sql" -mtime +30 -delete
echo "$(date): Backup rotation completed" >> /var/log/backup_rotation.log
"""
    
    script_path = "/usr/local/bin/backup_rotation.sh"
    Path(script_path).write_text(rotation_script, encoding="utf-8")
    run(f"chmod +x {script_path}", check=True)
    
    # Cron job ekle (haftalık)
    cron_add("0 4 * * 0 /usr/local/bin/backup_rotation.sh")
    
    print("Yedek rotasyonu kuruldu (30 günlük).")


def setup_log_rotation():
    """Log rotasyonu kurulumu"""
    print("Log rotasyonu ayarlanıyor...")
    
    # Logrotate konfigürasyonu
    logrotate_config = """
/var/log/*.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    create 644 root root
}

/usr/local/lsws/logs/*.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    create 644 lsadm lsadm
}
"""
    
    config_path = "/etc/logrotate.d/ispanel"
    Path(config_path).write_text(logrotate_config, encoding="utf-8")
    
    print("Log rotasyonu kuruldu.")


def optimize_kernel_parameters():
    """Kernel parametrelerini optimize et"""
    print("Kernel parametreleri optimize ediliyor...")
    
    # sysctl optimizasyonları
    optimizations = {
        "net.core.rmem_max": "16777216",
        "net.core.wmem_max": "16777216",
        "net.ipv4.tcp_rmem": "4096 65536 16777216",
        "net.ipv4.tcp_wmem": "4096 65536 16777216",
        "net.core.netdev_max_backlog": "5000",
        "net.ipv4.tcp_congestion_control": "bbr",
        "vm.swappiness": "10",
        "vm.dirty_ratio": "15",
        "vm.dirty_background_ratio": "5"
    }
    
    sysctl_config = ""
    for param, value in optimizations.items():
        sysctl_config += f"{param} = {value}\n"
        # Geçici olarak uygula
        run(f"sysctl -w {param}={value}", check=False)
    
    # Kalıcı konfigürasyon
    Path("/etc/sysctl.d/99-ispanel.conf").write_text(sysctl_config, encoding="utf-8")
    
    print("Kernel parametreleri optimize edildi.")


def update_ispanel():
    """isPanel otomatik güncelleme"""
    print("isPanel güncelleniyor...")
    
    try:
        # Mevcut script yolunu al
        script_path = Path(__file__).resolve()
        script_dir = script_path.parent
        
        print("Git durumu kontrol ediliyor...")
        
        # Git repository kontrolü
        if not (script_dir / ".git").exists():
            print("Git repository bulunamadı. Manuel güncelleme gerekli.")
            return
        
        # Mevcut branch'i kontrol et
        result = run("git branch --show-current", check=False)
        current_branch = result.stdout.strip()
        print(f"Mevcut branch: {current_branch}")
        
        # Remote'dan son değişiklikleri çek
        print("GitHub'dan son değişiklikler çekiliyor...")
        run("git fetch origin", check=True)
        
        # Mevcut commit ile remote arasındaki farkı kontrol et
        result = run("git log HEAD..origin/main --oneline", check=False)
        if result.stdout.strip():
            print("Yeni güncellemeler bulundu:")
            print(result.stdout.strip())
            
            # Kullanıcıdan onay al
            confirm = input("Güncellemeyi uygulamak istiyor musunuz? (y/N): ").strip().lower()
            if confirm in ['y', 'yes', 'evet']:
                print("Güncelleme uygulanıyor...")
                
                # Backup oluştur
                backup_path = f"/tmp/ispanel_backup_{int(time.time())}.py"
                run(f"cp {script_path} {backup_path}", check=False)
                print(f"Yedek oluşturuldu: {backup_path}")
                
                # Pull yap
                run("git pull origin main", check=True)
                
                # Bozuk symlink'i temizle ve yeniden oluştur
                print("Symlink düzeltiliyor...")
                run("rm -f /usr/local/bin/ispanel", check=False)
                install_symlink()
                
                print("✅ isPanel başarıyla güncellendi!")
                print("Değişiklikler:")
                print(result.stdout.strip())
                print("\nArtık 'ispanel' komutu çalışacak!")
                
                # Yedek dosyasını sil
                run(f"rm -f {backup_path}", check=False)
                
            else:
                print("Güncelleme iptal edildi.")
        else:
            print("✅ isPanel zaten güncel!")
            
    except subprocess.CalledProcessError as e:
        print(f"Güncelleme hatası: {e}")
        print("Manuel güncelleme gerekebilir.")
    except Exception as e:
        print(f"Beklenmeyen hata: {e}")


def system_management_menu():
    """Sistem yönetimi menüsü"""
    while True:
        print("\n--- Sistem Yönetimi ---")
        print("1) Sistem paketlerini güncelle")
        print("2) Yedek rotasyonu kur")
        print("3) Log rotasyonu kur")
        print("4) Kernel parametrelerini optimize et")
        print("5) Sistem durumu")
        print("6) Disk kullanımı")
        print("7) ispanel komutunu onar (/usr/local/bin/ispanel)")
        print("0) Geri")
        sub = input("Seçim: ").strip()
        if sub == "1":
            auto_update_system()
        elif sub == "2":
            setup_backup_rotation()
        elif sub == "3":
            setup_log_rotation()
        elif sub == "4":
            optimize_kernel_parameters()
        elif sub == "5":
            run("systemctl status lsws mariadb redis-server memcached", check=False)
        elif sub == "6":
            run("df -h", check=False)
        elif sub == "7":
            install_symlink()
        elif sub == "0":
            break
        else:
            print("Geçersiz seçim")


def main():
    parser = argparse.ArgumentParser(description="SSH tabanlı mini panel (Ubuntu 22+)")
    sub = parser.add_subparsers(dest="cmd")

    p_install = sub.add_parser("install", help="OpenLiteSpeed, PHP 8.2 ve MariaDB kur")
    p_install.set_defaults(func=cmd_install)

    p_dadd = sub.add_parser("domain-add", help="Domain ekle")
    p_dadd.add_argument("domain")
    def _dadd(args):
        require_root()
        domain_add(args.domain)
    p_dadd.set_defaults(func=_dadd)

    p_drm = sub.add_parser("domain-rm", help="Domain sil")
    p_drm.add_argument("domain")
    def _drm(args):
        require_root()
        domain_remove(args.domain)
    p_drm.set_defaults(func=_drm)

    p_dbcreate = sub.add_parser("db-create", help="MariaDB veritabanı ve kullanıcı oluştur")
    p_dbcreate.add_argument("db")
    p_dbcreate.add_argument("user")
    p_dbcreate.add_argument("password")
    def _dbcreate(args):
        require_root()
        db_create(args.db, args.user, args.password)
    p_dbcreate.set_defaults(func=_dbcreate)

    p_dbdelete = sub.add_parser("db-delete", help="MariaDB veritabanı ve kullanıcı sil")
    p_dbdelete.add_argument("db")
    p_dbdelete.add_argument("user")
    def _dbdelete(args):
        require_root()
        db_delete(args.db, args.user)
    p_dbdelete.set_defaults(func=_dbdelete)

    # Etkileşimli menü
    p_menu = sub.add_parser("menu", help="İnteraktif menüyü başlat")
    def _menu(args):
        require_root()
        interactive_menu()
    p_menu.set_defaults(func=_menu)

    args = parser.parse_args()
    if not hasattr(args, "func"):
        # Varsayılan olarak menüyü aç
        if os.geteuid() == 0:
            interactive_menu()
            return
        else:
            parser.print_help()
            sys.exit(1)
    args.func(args)


if __name__ == "__main__":
    main()



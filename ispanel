#!/usr/bin/env python3
import argparse
import logging
import os
import re
import shutil
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path

# Dil desteği için global değişken
CURRENT_LANGUAGE = "en"  # Varsayılan dil İngilizce

# Çok dilli metinler
TEXTS = {
    "en": {
        # Ana menü
        "main_menu_title": "isPanel - Web Hosting Management Panel",
        "main_menu_options": [
            "Installation (OpenLiteSpeed + PHP 8.2/8.3 + MariaDB)",
            "Add Domain",
            "Change Domain PHP Version",
            "Domain List",
            "Remove Domain", 
            "Create Database",
            "Database List",
            "Delete Database",
            "Fix Virtual Host Root",
            "Fix Vhost Configuration",
            "Reset MySQL Root Password",
            "Reset OpenLiteSpeed Admin Password",
            "Port Control and Firewall Management",
            "Install SSL/HTTPS Support",
            "MariaDB Security Settings",
            "OpenLiteSpeed Performance Optimization",
            "File Backup Menu",
            "Database Backup Menu",
            "List Backups",
            "Cron Backup Settings",
            "Repair Tools",
            "Cache Systems (Redis/Memcached)",
            "System Management",
            "OLS/PHP Settings",
            "Update isPanel",
            "Exit"
        ],
        "language_selection": "Select Language / Dil Seçin",
        "language_options": ["English", "Türkçe"],
        "invalid_choice": "Invalid choice. Please try again.",
        "enter_choice": "Enter your choice",
        "domain_prompt": "Enter domain name",
        "db_name_prompt": "Enter database name",
        "db_user_prompt": "Enter database username",
        "db_pass_prompt": "Enter database password",
        "success": "Operation completed successfully!",
        "error": "An error occurred:",
        "confirm_remove": "Are you sure you want to remove this domain? (y/n)",
        "confirm_delete_db": "Are you sure you want to delete this database? (y/n)",
        "php_version_prompt": "Select PHP version",
        "php_versions": ["PHP 8.2", "PHP 8.3"],
        "no_domains": "No domains found.",
        "no_databases": "No databases found.",
        "no_backups": "No backups found.",
        "domain_added": "Domain added successfully!",
        "domain_removed": "Domain removed successfully!",
        "database_created": "Database created successfully!",
        "database_deleted": "Database deleted successfully!",
        "backup_created": "Backup created successfully!",
        "password_reset": "OpenLiteSpeed admin password reset successfully!",
        "optimization_complete": "OpenLiteSpeed optimization completed!",
        "update_complete": "isPanel updated successfully!",
        "press_enter": "Press Enter to continue...",
        "goodbye": "Goodbye!"
    },
    "tr": {
        # Ana menü
        "main_menu_title": "isPanel - Web Hosting Yönetim Paneli",
        "main_menu_options": [
            "Kurulum (OpenLiteSpeed + PHP 8.2/8.3 + MariaDB)",
            "Domain Ekle",
            "Domain PHP Sürümü Değiştir",
            "Domain Listesi",
            "Domain Sil",
            "Veritabanı Oluştur",
            "Veritabanı Listesi", 
            "Veritabanı Sil",
            "Virtual Host Root Düzelt",
            "Vhost Konfigürasyon Düzelt",
            "MySQL Root Şifre Sıfırla",
            "OpenLiteSpeed Admin Şifre Sıfırla",
            "Port Kontrolü ve Firewall Yönetimi",
            "SSL/HTTPS Desteği Kur",
            "MariaDB Güvenlik Ayarları",
            "OpenLiteSpeed Performans Optimizasyonu",
            "Dosya Yedekleme Menüsü",
            "Veritabanı Yedekleme Menüsü",
            "Yedekleri Listele",
            "Cron Backup Ayarları",
            "Onarım Araçları",
            "Cache Sistemleri (Redis/Memcached)",
            "Sistem Yönetimi",
            "OLS/PHP Ayarları",
            "isPanel Güncelle",
            "Çıkış"
        ],
        "language_selection": "Select Language / Dil Seçin",
        "language_options": ["English", "Türkçe"],
        "invalid_choice": "Geçersiz seçim. Lütfen tekrar deneyin.",
        "enter_choice": "Seçiminizi girin",
        "domain_prompt": "Domain adını girin",
        "db_name_prompt": "Veritabanı adını girin",
        "db_user_prompt": "Veritabanı kullanıcı adını girin",
        "db_pass_prompt": "Veritabanı şifresini girin",
        "success": "İşlem başarıyla tamamlandı!",
        "error": "Bir hata oluştu:",
        "confirm_remove": "Bu domaini silmek istediğinizden emin misiniz? (e/h)",
        "confirm_delete_db": "Bu veritabanını silmek istediğinizden emin misiniz? (e/h)",
        "php_version_prompt": "PHP sürümünü seçin",
        "php_versions": ["PHP 8.2", "PHP 8.3"],
        "no_domains": "Domain bulunamadı.",
        "no_databases": "Veritabanı bulunamadı.",
        "no_backups": "Yedek bulunamadı.",
        "domain_added": "Domain başarıyla eklendi!",
        "domain_removed": "Domain başarıyla silindi!",
        "database_created": "Veritabanı başarıyla oluşturuldu!",
        "database_deleted": "Veritabanı başarıyla silindi!",
        "backup_created": "Yedek başarıyla oluşturuldu!",
        "password_reset": "OpenLiteSpeed admin şifresi başarıyla sıfırlandı!",
        "optimization_complete": "OpenLiteSpeed optimizasyonu tamamlandı!",
        "update_complete": "isPanel başarıyla güncellendi!",
        "press_enter": "Devam etmek için Enter'a basın...",
        "goodbye": "Hoşça kalın!"
    }
}

def get_text(key: str) -> str:
    """Mevcut dildeki metni döndür"""
    return TEXTS[CURRENT_LANGUAGE].get(key, key)

def select_language():
    """Dil seçimi yap"""
    global CURRENT_LANGUAGE
    
    print("\n" + "="*60)
    print(f"🌍 {get_text('language_selection')}")
    print("="*60)
    
    for i, lang in enumerate(get_text('language_options'), 1):
        print(f"{i}) {lang}")
    
    while True:
        try:
            choice = input(f"\n{get_text('enter_choice')} (1-2): ").strip()
            if choice == "1":
                CURRENT_LANGUAGE = "en"
                break
            elif choice == "2":
                CURRENT_LANGUAGE = "tr"
                break
            else:
                print(get_text('invalid_choice'))
        except KeyboardInterrupt:
            print(f"\n{get_text('goodbye')}")
            sys.exit(0)
    
    print(f"\n✅ Language selected: {get_text('language_options')[int(choice)-1]}")
    print("="*60)

try:
    from pwd import getpwuid  # type: ignore[attr-defined]
    from grp import getgrgid  # type: ignore[attr-defined]
except ImportError:  # Windows
    class _PwdStruct:
        def __init__(self, uid: int):
            self.pw_name = f"uid:{uid}"

    class _GrpStruct:
        def __init__(self, gid: int):
            self.gr_name = f"gid:{gid}"

    def getpwuid(uid: int):  # type: ignore[redefined-outer-name]
        return _PwdStruct(uid)

    def getgrgid(gid: int):  # type: ignore[redefined-outer-name]
        return _GrpStruct(gid)


def run(cmd: str, check: bool = True) -> subprocess.CompletedProcess:
    logger.debug("Komut çalıştırılıyor: %s", cmd)
    try:
        result = subprocess.run(cmd, shell=True, check=check, text=True)
        if result.stdout:
            logger.debug("stdout: %s", result.stdout.strip())
        if result.stderr:
            logger.debug("stderr: %s", result.stderr.strip())
        return result
    except subprocess.CalledProcessError as exc:
        message = f"Komut başarısız oldu: {cmd}"
        if exc.stdout:
            logger.error("%s | stdout: %s", message, exc.stdout.strip())
        if exc.stderr:
            logger.error("%s | stderr: %s", message, exc.stderr.strip())
        if not exc.stdout and not exc.stderr:
            logger.error(message)
        raise


def require_root():
    if os.geteuid() != 0:
        logger.error("Bu komutları root olarak çalıştırın (sudo kullanın).")
        sys.exit(1)


def wait_for_apt(max_retries: int = 30, delay: int = 10):
    retries = 0
    while retries < max_retries:
        cp = subprocess.run(
            "ps aux | grep -E '(apt|apt-get)\\s' | grep -v grep | grep -v _apt",
            shell=True,
            text=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        if not cp.stdout.strip():
            return
        retries += 1
        logger.info("apt kullanımda, %s/%s bekleniyor...", retries, max_retries)
        time.sleep(delay)
    logger.error("apt kilitli görünüyor. Lütfen diğer apt işlemlerini kapatın.")
    sys.exit(1)


def ensure_cmd(cmd: str, pkg: str):
    if shutil.which(cmd):
        return
    wait_for_apt()
    run(f"DEBIAN_FRONTEND=noninteractive apt-get update -y")
    run(f"DEBIAN_FRONTEND=noninteractive apt-get install -y {pkg}")
    if not shutil.which(cmd):
        logger.error("Gerekli komut bulunamadı: %s (paket: %s)", cmd, pkg)
        sys.exit(1)


def check_disk_space(min_gb: int = 1):
    df = shutil.disk_usage("/")
    available_gb = df.free // (1024 * 1024 * 1024)
    logger.info("Boş disk alanı: %s GB", available_gb)
    if available_gb < min_gb:
        logger.error("En az %sGB boş alan gerekli.", min_gb)
        sys.exit(1)


def stop_nginx_if_running():
    """Nginx çalışıyorsa durdur ve devre dışı bırak"""
    try:
        # Nginx durumunu kontrol et
        result = run("systemctl is-active nginx", check=False)
        if result.returncode == 0:
            print("Nginx çalışıyor, durduruluyor...")
            run("systemctl stop nginx", check=False)
            run("systemctl disable nginx", check=False)
            print("✅ Nginx durduruldu ve devre dışı bırakıldı")
    except:
        pass  # Nginx yoksa hata verme

def install_openlitespeed_and_php(lsphp_version: str = "83"):
    logger.info("OpenLiteSpeed ve PHP %s.%s kuruluyor...", lsphp_version[0], lsphp_version[1])
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get update -y")
    ensure_cmd("curl", "curl")
    ensure_cmd("wget", "wget")

    # Nginx'i durdur (port çakışmasını önlemek için)
    stop_nginx_if_running()

    # Litespeed repo
    run("wget -O - https://repo.litespeed.sh | bash", check=True)

    # Paketler
    run("DEBIAN_FRONTEND=noninteractive apt-get -y install openlitespeed", check=True)
    # Sadece gerekli PHP sürümlerini kur (8.2 ve 8.3)
    run("DEBIAN_FRONTEND=noninteractive apt-get -y install lsphp82 lsphp82-* lsphp83 lsphp83-*", check=True)

    # Varsayılan PHP sürümünü ayarla
    global DEFAULT_LSPHP_VERSION
    DEFAULT_LSPHP_VERSION = lsphp_version

    # Hizmetleri başlat/enable
    try:
        run("systemctl enable lsws", check=False)
        run("systemctl restart lsws", check=True)
    except subprocess.CalledProcessError:
        run("/usr/local/lsws/bin/lswsctrl restart", check=True)


def generate_random_password(length: int = 16) -> str:
    """Random şifre üret"""
    import secrets
    import string
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def install_mariadb():
    logger.info("MariaDB kuruluyor...")
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get update -y")
    
    # MariaDB kurulumu için environment variables
    env_vars = {
        'DEBIAN_FRONTEND': 'noninteractive',
        'MYSQL_ROOT_PASSWORD': generate_random_password(20),
        'MYSQL_DATABASE': 'ispanel',
        'MYSQL_USER': 'ispanel_user',
        'MYSQL_PASSWORD': generate_random_password(16)
    }
    
    # Environment variables'ı export et
    env_string = ' '.join([f'{k}={v}' for k, v in env_vars.items()])
    
    # MariaDB kurulumu
    run(f"{env_string} DEBIAN_FRONTEND=noninteractive apt-get install -y mariadb-server", check=True)
    
    # MariaDB servisini başlat
    run("systemctl enable mariadb", check=False)
    run("systemctl restart mariadb", check=True)
    
    # Root şifresini ayarla
    root_password = env_vars['MYSQL_ROOT_PASSWORD']
    try:
        # MariaDB'yi güvenli modda başlat
        run("systemctl stop mariadb", check=False)
        run("mysqld_safe --skip-grant-tables --skip-networking &", check=False)
        time.sleep(3)
        
        # Root şifresini ayarla
        run(f"mysql -u root -e \"ALTER USER 'root'@'localhost' IDENTIFIED BY '{root_password}';\"", check=True)
        
        # MariaDB'yi normal modda yeniden başlat
        run("pkill mysqld", check=False)
        time.sleep(2)
        run("systemctl start mariadb", check=True)
        
        # Şifreleri global değişkene kaydet
        global MYSQL_ROOT_PASSWORD, MYSQL_USER_PASSWORD
        MYSQL_ROOT_PASSWORD = root_password
        MYSQL_USER_PASSWORD = env_vars['MYSQL_PASSWORD']
        
        print(f"✅ MariaDB kuruldu ve yapılandırıldı")
        print(f"🔑 MySQL Root Şifresi: {root_password}")
        print(f"🔑 MySQL User Şifresi: {env_vars['MYSQL_PASSWORD']}")
        
    except Exception as e:
        print(f"MariaDB şifre ayarlama hatası: {e}")
        # Fallback: Manuel şifre ayarlama talimatı
        print("Manuel olarak şu komutu çalıştırın:")
        print(f"mysql -u root -e \"ALTER USER 'root'@'localhost' IDENTIFIED BY '{root_password}';\"")


def install_symlink():
    """isPanel'i /usr/local/ispanel dizinine kur ve /usr/local/bin/ispanel symlink oluştur"""
    
    # isPanel kurulum dizinini oluştur
    ISPANEL_HOME.mkdir(parents=True, exist_ok=True)
    ISPANEL_TEMPLATES_DIR.mkdir(parents=True, exist_ok=True)
    
    # Mevcut script'i bul
    current_script = Path(os.path.realpath(__file__))
    
    # Script'i kurulum dizinine kopyala
    target_script = ISPANEL_HOME / "ispanel"
    if current_script != target_script:
        shutil.copy2(current_script, target_script)
        os.chmod(target_script, 0o755)
        print(f"isPanel kuruldu: {target_script}")
    
    # Templates dizinini kopyala (sadece farklı dizindeyse)
    source_templates = current_script.parent / "templates"
    if source_templates.exists() and source_templates != ISPANEL_TEMPLATES_DIR:
        ISPANEL_TEMPLATES_DIR.mkdir(parents=True, exist_ok=True)
        for template_file in source_templates.glob("*.j2"):
            target_template = ISPANEL_TEMPLATES_DIR / template_file.name
            if template_file != target_template:
                shutil.copy2(template_file, target_template)
                print(f"Template kopyalandı: {target_template}")
    
    # /usr/local/bin/ispanel wrapper oluştur
    bin_path = Path("/usr/local/bin/ispanel")
    if bin_path.exists() or bin_path.is_symlink():
        try:
            bin_path.unlink()
        except:
            run(f"rm -f {bin_path}", check=False)
    
    wrapper = f'''#!/usr/bin/env python3
import os
import sys

# isPanel ana script
script_path = "{target_script}"

if not os.path.exists(script_path):
    print(f"Hata: isPanel script bulunamadı: {{script_path}}")
    sys.exit(1)

# Script'i çalıştır
os.execv(sys.executable, [sys.executable, script_path] + sys.argv[1:])
'''
    
    bin_path.parent.mkdir(parents=True, exist_ok=True)
    bin_path.write_text(wrapper, encoding="utf-8")
    os.chmod(bin_path, 0o755)
    print(f"isPanel komutu kuruldu: {bin_path}")
    print(f"Kurulum dizini: {ISPANEL_HOME}")
    print(f"Templates dizini: {ISPANEL_TEMPLATES_DIR}")


def cmd_install(args: argparse.Namespace):
    require_root()
    check_disk_space(1)

    # OS kontrolü
    with open("/etc/os-release", "r", encoding="utf-8") as f:
        osr = f.read()
    if "Ubuntu" not in osr:
        print("Bu kurulum Ubuntu 22+ için tasarlanmıştır.", file=sys.stderr)
    
    print("=== ispanel Kurulum Başlıyor ===")
    
    # Kurulum tipine göre PHP sürümünü belirle
    php_version = getattr(args, 'php_version', DEFAULT_LSPHP_VERSION)
    
    # Port çakışmalarını kontrol et
    check_port_conflicts()
    
    # Temel kurulum
    install_openlitespeed_and_php(php_version)
    install_mariadb()
    
    # Güvenlik ve performans ayarları
    print("\n=== Güvenlik ve Performans Ayarları ===")
    manage_firewall()
    install_ssl_support()
    secure_mariadb()
    optimize_openlitespeed()
    cleanup_default_listeners()  # Varsayılan 8088 listener'ını temizle
    
    # PHP OPcache konfigürasyonu
    configure_php_opcache()
    
    # Yedek dizinleri oluştur
    (ISPANEL_BACKUP_DIR / "domains").mkdir(parents=True, exist_ok=True)
    (ISPANEL_BACKUP_DIR / "databases").mkdir(parents=True, exist_ok=True)
    
    # Symlink oluştur
    install_symlink()
    
    print("\n=== Kurulum Tamamlandı ===")
    print(f"✅ OpenLiteSpeed + PHP {DEFAULT_LSPHP_VERSION[0]}.{DEFAULT_LSPHP_VERSION[1]} + MariaDB kuruldu")
    print("✅ Firewall ayarları yapıldı")
    print("✅ SSL/HTTPS desteği eklendi")
    print("✅ MariaDB güvenlik ayarları yapıldı")
    print("✅ OpenLiteSpeed performans optimizasyonu yapıldı")
    print("✅ Yedek sistemi hazır")
    
    # Şifreleri göster
    if MYSQL_ROOT_PASSWORD:
        print("\n🔐 ÖNEMLİ ŞİFRELER:")
        print(f"MySQL Root Şifresi: {MYSQL_ROOT_PASSWORD}")
        if MYSQL_USER_PASSWORD:
            print(f"MySQL User Şifresi: {MYSQL_USER_PASSWORD}")
        print("\n⚠️  Bu şifreleri güvenli bir yerde saklayın!")
    
    print("\nKullanım: sudo ispanel")


# ---------- OpenLiteSpeed domain yönetimi ----------

LSWS_CONF_DIR = Path("/usr/local/lsws/conf")
VHOSTS_DIR = LSWS_CONF_DIR / "vhosts"
HTTPD_CONF = LSWS_CONF_DIR / "httpd_config.conf"
DOCROOT_BASE = Path("/home")
DEFAULT_LSPHP_VERSION = "83"  # Varsayılan lsphp sürümü (menu kurulum seçimine göre güncellenir)
LOG_FILE = Path(os.environ.get("ISPANEL_LOG_FILE", "/var/log/ispanel.log"))
LOG_LEVEL = os.environ.get("ISPANEL_LOG_LEVEL", "INFO").upper()

# isPanel kurulum dizini
ISPANEL_HOME = Path("/usr/local/ispanel")
ISPANEL_TEMPLATES_DIR = ISPANEL_HOME / "templates"
ISPANEL_BACKUP_DIR = Path("/home/backup")

# MySQL şifreleri (kurulum sırasında ayarlanır)
MYSQL_ROOT_PASSWORD = ""
MYSQL_USER_PASSWORD = ""

# Template dizinini belirle
TEMPLATE_DIR = Path(os.environ.get("ISPANEL_TEMPLATE_DIR", str(ISPANEL_TEMPLATES_DIR)))
VHOST_TEMPLATE = Path("vhost.conf.j2")


def configure_logging():
    if logging.getLogger().hasHandlers():
        return

    handlers = []
    try:
        LOG_FILE.parent.mkdir(parents=True, exist_ok=True)
        handlers.append(logging.FileHandler(LOG_FILE, encoding="utf-8"))
    except OSError as exc:
        print(f"Log dosyasına yazılamadı: {LOG_FILE} ({exc})", file=sys.stderr)

    log_level = getattr(logging, LOG_LEVEL, logging.INFO)
    if handlers:
        logging.basicConfig(level=log_level, format="%(asctime)s [%(levelname)s] %(message)s", handlers=handlers)
    else:
        logging.basicConfig(level=log_level, format="%(asctime)s [%(levelname)s] %(message)s")


configure_logging()
logger = logging.getLogger("ispanel")


def reload_lsws():
    try:
        run("systemctl reload lsws", check=True)
    except subprocess.CalledProcessError:
        run("/usr/local/lsws/bin/lswsctrl restart", check=True)


def cleanup_default_listeners():
    """Varsayılan 8088 listener'ını ve gereksiz konfigürasyonları temizle"""
    if not HTTPD_CONF.exists():
        return
    
    content = HTTPD_CONF.read_text(encoding="utf-8")
    original_content = content
    
    # 8088 portundaki Default listener'ı temizle
    content = re.sub(r'listener\s+Default\s*\{\s*address\s+\*:8088[^}]*\}', '', content, flags=re.DOTALL)
    
    # Example virtualhost'u temizle
    content = re.sub(r'virtualHost\s+Example\s*\{[^}]*\}', '', content, flags=re.DOTALL)
    
    # EasyRailsWithSuEXEC template'ini temizle
    content = re.sub(r'vhTemplate\s+EasyRailsWithSuEXEC\s*\{[^}]*\}', '', content, flags=re.DOTALL)
    
    # Boş satırları temizle
    content = re.sub(r'\n{3,}', '\n\n', content)
    
    if content != original_content:
        HTTPD_CONF.write_text(content, encoding="utf-8")
        print("✅ Varsayılan listener ve gereksiz konfigürasyonlar temizlendi")

def check_port_conflicts():
    """Port çakışmalarını kontrol et ve çöz"""
    print("Port çakışmaları kontrol ediliyor...")
    
    # Port 80 kontrolü
    try:
        result = run("netstat -tuln | grep ':80 '", check=False)
        if result.stdout.strip():
            print("⚠️  Port 80 kullanımda:")
            print(result.stdout.strip())
            
            # Nginx kontrolü
            nginx_result = run("systemctl is-active nginx", check=False)
            if nginx_result.returncode == 0:
                print("Nginx çalışıyor, durduruluyor...")
                run("systemctl stop nginx", check=False)
                run("systemctl disable nginx", check=False)
                print("✅ Nginx durduruldu")
            
            # Apache kontrolü
            apache_result = run("systemctl is-active apache2", check=False)
            if apache_result.returncode == 0:
                print("Apache çalışıyor, durduruluyor...")
                run("systemctl stop apache2", check=False)
                run("systemctl disable apache2", check=False)
                print("✅ Apache durduruldu")
    except:
        pass
    
    # Port 443 kontrolü
    try:
        result = run("netstat -tuln | grep ':443 '", check=False)
        if result.stdout.strip():
            print("⚠️  Port 443 kullanımda:")
            print(result.stdout.strip())
    except:
        pass


def ensure_http_listener_mapping(domain: str):
    if not HTTPD_CONF.exists():
        print(f"Bulunamadı: {HTTPD_CONF}", file=sys.stderr)
        sys.exit(1)
    content = HTTPD_CONF.read_text(encoding="utf-8")

    # Önce 8088 portundaki Default listener'ı temizle
    content = re.sub(r'listener\s+Default\s*\{\s*address\s+\*:8088.*?\n\}', '', content, flags=re.DOTALL)
    
    # Duplicate Default listener'ları temizle
    default_listeners = list(re.finditer(r'listener\s+Default\s*\{[^}]*address\s+\*:80[^}]*\}', content, re.DOTALL))
    if len(default_listeners) > 1:
        # İlkini koru, diğerlerini sil
        for match in default_listeners[1:]:
            content = content.replace(match.group(0), '')

    map_block = f"map                     {domain} {domain}"
    listener_pattern = r"listener\s+Default\s*\{[^}]*address\s+\*:80[^}]*\}"
    m = re.search(listener_pattern, content, re.DOTALL)
    
    if not m:
        # Eksikse, Default HTTP listener'ı oluştur
        default_listener = f"""
listener Default {{
    address                 *:80
    secure                  0
    {map_block}
}}
"""
        content = content.rstrip() + "\n" + default_listener
        HTTPD_CONF.write_text(content, encoding="utf-8")
        return
    
    block = m.group(0)
    if f"map                     {domain}" in block:
        return
    
    new_block = block.rstrip("}\n") + f"\n    {map_block}\n}}"
    new_content = content.replace(block, new_block)
    HTTPD_CONF.write_text(new_content, encoding="utf-8")


def ensure_https_listener_mapping(domain: str):
    """HTTPS listener mapping ekle"""
    if not HTTPD_CONF.exists():
        return
    content = HTTPD_CONF.read_text(encoding="utf-8")

    # Duplicate SSL listener'ları temizle
    ssl_listeners = list(re.finditer(r'listener\s+SSL\s*\{[^}]*address\s+\*:443[^}]*\}', content, re.DOTALL))
    if len(ssl_listeners) > 1:
        # İlkini koru, diğerlerini sil
        for match in ssl_listeners[1:]:
            content = content.replace(match.group(0), '')

    # HTTPS listener kontrolü
    https_listener_pattern = r"listener\s+SSL\s*\{[^}]*address\s+\*:443[^}]*\}"
    m = re.search(https_listener_pattern, content, re.DOTALL)
    
        ssl_cert = f"/etc/letsencrypt/live/{domain}/fullchain.pem"
        ssl_key = f"/etc/letsencrypt/live/{domain}/privkey.pem"
    map_block = f"map                     {domain} {domain}"
        
    if not m:
        # HTTPS listener oluştur
        https_listener = f"""
listener SSL {{
    address                 *:443
    secure                  1
    keyFile                 {ssl_key}
    certFile                {ssl_cert}
    certChain               1
    sslProtocol             24
    ciphers                 EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
    enableECDHE             1
    renegProtection         1
    sslSessionCache         1
    sslSessionTickets       1
    enableSpdy              15
    enableQuic              1
    {map_block}
}}
"""
        content = content.rstrip() + "\n" + https_listener
        HTTPD_CONF.write_text(content, encoding="utf-8")
    else:
        # Mevcut HTTPS listener'a domain ekle
        block = m.group(0)
        if f"map                     {domain}" in block:
            return
        new_block = block.rstrip("}\n") + f"\n    {map_block}\n}}"
        new_content = content.replace(block, new_block)
        HTTPD_CONF.write_text(new_content, encoding="utf-8")


def load_template(template_path: Path) -> str:
    """Template dosyasını yükle"""
    # Ana template dizini
    main_template = ISPANEL_TEMPLATES_DIR / template_path.name
    if main_template.exists():
        return main_template.read_text(encoding="utf-8")
    
    # Alternatif konumları dene
    for alt_dir in [
        Path(__file__).parent / "templates",  # Geliştirme dizini
        Path("/root/ispanel/templates"),      # Eski konum
        TEMPLATE_DIR                           # Env değişkeninden gelen
    ]:
        template_file = alt_dir / template_path.name
        if template_file.exists():
            return template_file.read_text(encoding="utf-8")
    
    raise FileNotFoundError(f"Template bulunamadı: {template_path}")


def write_vhost_conf(domain: str, docroot: Path):
    vdir = VHOSTS_DIR / domain
    vdir.mkdir(parents=True, exist_ok=True)
    vconf = vdir / "vhost.conf"

    vh_root = docroot.parent

    log_dir = vh_root / "logs"
    log_dir.mkdir(parents=True, exist_ok=True)
    (log_dir / "access.log").touch(exist_ok=True)
    (log_dir / "error.log").touch(exist_ok=True)

    cgi_dir = vh_root / "cgi-bin"
    cgi_dir.mkdir(parents=True, exist_ok=True)

    protected_dir = docroot / "protected"
    protected_dir.mkdir(parents=True, exist_ok=True)

    awstats_dir = vh_root / "awstats"
    awstats_dir.mkdir(parents=True, exist_ok=True)

    template = load_template(VHOST_TEMPLATE)
    conf = template.format(domain=domain, docroot=str(docroot), default_lsphp=DEFAULT_LSPHP_VERSION)
    conf = f"vhDomain {domain}\n" + conf

    vconf.write_text(conf, encoding="utf-8")

    # Vhost dizini izinleri
    run(f"chown -R lsadm:nogroup {vdir}", check=True)
    run(f"chmod -R 755 {vdir}", check=True)
    
    # Domain root ve public_html izinleri
    run(f"chown -R lsadm:nogroup {vh_root}", check=False)
    run(f"chmod 755 {vh_root}", check=False)
    run(f"chmod 755 {docroot}", check=False)
    
    # Dosya ve dizin izinlerini düzelt
    run(f"find {docroot} -type f -exec chmod 644 {{}} +", check=False)
    run(f"find {docroot} -type d -exec chmod 755 {{}} +", check=False)


def ensure_virtual_host_reference(domain: str):
    """httpd_config.conf içine virtualHost referansı ekle."""
    if not HTTPD_CONF.exists():
        print(f"Bulunamadı: {HTTPD_CONF}", file=sys.stderr)
        sys.exit(1)
    content = HTTPD_CONF.read_text(encoding="utf-8")
    
    # Virtual Host Root'u da ekle
    docroot = DOCROOT_BASE / domain
    vhost_ref = (
        f"virtualHost {domain} {{\n"
        f"    vhRoot                  {docroot}\n"
        f"    configFile              conf/vhosts/{domain}/vhost.conf\n"
        f"    allowSymbolLink         1\n"
        f"    enableScript            1\n"
        f"    restrained              1\n"
        f"}}\n"
    )
    # Zaten var mı kontrol et (virtualHost domain satırı baz alınır)
    if re.search(rf"virtualHost\s+{re.escape(domain)}\b", content):
        return
    content = content.rstrip() + "\n\n" + vhost_ref
    HTTPD_CONF.write_text(content, encoding="utf-8")


def ensure_docroot(domain: str) -> Path:
    docroot = DOCROOT_BASE / domain / "public_html"
    docroot.mkdir(parents=True, exist_ok=True)
    index_file = docroot / "index.php"
    if not index_file.exists():
        # Profesyonel ve kurumsal default index.php oluştur
        default_content = '''<?php
// isPanel - Enterprise Web Hosting Management
// https://ispanel.com
?>
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo $_SERVER['HTTP_HOST']; ?> - Powered by isPanel</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        :root {
            --primary: #1e40af;
            --primary-light: #3b82f6;
            --primary-dark: #1e3a8a;
            --success: #10b981;
            --bg-primary: #ffffff;
            --bg-secondary: #f9fafb;
            --bg-tertiary: #f3f4f6;
            --text-primary: #111827;
            --text-secondary: #6b7280;
            --text-tertiary: #9ca3af;
            --border: #e5e7eb;
            --shadow: rgba(0, 0, 0, 0.05);
            --shadow-lg: rgba(0, 0, 0, 0.1);
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: var(--bg-secondary);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-primary);
            line-height: 1.6;
            -webkit-font-smoothing: antialiased;
        }
        
        .container {
            background: var(--bg-primary);
            border-radius: 16px;
            box-shadow: 0 20px 25px -5px var(--shadow-lg), 0 10px 10px -5px var(--shadow);
            padding: 4rem;
            max-width: 800px;
            width: 90%;
            position: relative;
        }
        
        .accent-bar {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary) 0%, var(--primary-light) 100%);
            border-radius: 16px 16px 0 0;
        }
        
        .header {
            text-align: center;
            margin-bottom: 3rem;
        }
        
        .logo-wrapper {
            display: inline-flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }
        
        .logo-icon {
            width: 48px;
            height: 48px;
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 700;
            font-size: 24px;
        }
        
        .logo-text {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-primary);
        }
        
        .domain {
            font-size: 1.875rem;
            font-weight: 300;
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
            letter-spacing: -0.025em;
        }
        
        .subtitle {
            color: var(--text-tertiary);
            font-size: 1rem;
            font-weight: 400;
        }
        
        .status-section {
            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
            border: 1px solid #bbf7d0;
            border-radius: 12px;
            padding: 2rem;
            margin: 2.5rem 0;
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }
        
        .status-icon {
            width: 56px;
            height: 56px;
            background: var(--success);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 28px;
            flex-shrink: 0;
        }
        
        .status-content h3 {
            color: #065f46;
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }
        
        .status-content p {
            color: #047857;
            font-size: 0.875rem;
        }
        
        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 2rem;
            margin: 3rem 0;
        }
        
        .feature-card {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 2rem;
            text-align: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .feature-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, var(--primary) 0%, var(--primary-light) 100%);
            transform: translateX(-100%);
            transition: transform 0.3s ease;
        }
        
        .feature-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 25px -5px var(--shadow-lg), 0 10px 10px -5px var(--shadow);
            border-color: var(--primary-light);
        }
        
        .feature-card:hover::before {
            transform: translateX(0);
        }
        
        .feature-icon {
            width: 64px;
            height: 64px;
            margin: 0 auto 1.5rem;
            background: var(--bg-tertiary);
            border-radius: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 32px;
            color: var(--primary);
        }
        
        .feature-card h4 {
            color: var(--text-primary);
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .feature-card p {
            color: var(--text-secondary);
            font-size: 0.875rem;
            line-height: 1.5;
        }
        
        .stats-section {
            background: var(--bg-tertiary);
            border-radius: 12px;
            padding: 2rem;
            margin: 2.5rem 0;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 2rem;
            text-align: center;
        }
        
        .stat-item {
            padding: 1rem;
        }
        
        .stat-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--primary);
            line-height: 1;
            margin-bottom: 0.5rem;
        }
        
        .stat-label {
            color: var(--text-secondary);
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            font-weight: 500;
        }
        
        .tech-stack {
            margin: 2.5rem 0;
        }
        
        .tech-stack h4 {
            color: var(--text-primary);
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            text-align: center;
        }
        
        .tech-items {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            justify-content: center;
        }
        
        .tech-badge {
            background: var(--bg-primary);
            border: 2px solid var(--border);
            border-radius: 8px;
            padding: 0.75rem 1.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--text-secondary);
            transition: all 0.2s ease;
        }
        
        .tech-badge:hover {
            border-color: var(--primary-light);
            color: var(--primary);
            transform: translateY(-2px);
        }
        
        .footer {
            text-align: center;
            margin-top: 4rem;
            padding-top: 2.5rem;
            border-top: 1px solid var(--border);
        }
        
        .footer-content {
            color: var(--text-tertiary);
            font-size: 0.875rem;
            margin-bottom: 1.5rem;
        }
        
        .footer-links {
            display: flex;
            justify-content: center;
            gap: 3rem;
            flex-wrap: wrap;
        }
        
        .footer-link {
            color: var(--primary);
            text-decoration: none;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: color 0.2s ease;
        }
        
        .footer-link:hover {
            color: var(--primary-dark);
        }
        
        @media (max-width: 640px) {
            .container {
                padding: 2rem;
            }
            
            .features-grid {
                grid-template-columns: 1fr;
                gap: 1.5rem;
            }
            
            .stats-grid {
                grid-template-columns: 1fr 1fr;
            }
            
            .footer-links {
                flex-direction: column;
                gap: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="accent-bar"></div>
        
        <div class="header">
            <div class="logo-wrapper">
                <div class="logo-icon">iP</div>
                <div class="logo-text">isPanel</div>
            </div>
            <h1 class="domain"><?php echo $_SERVER['HTTP_HOST']; ?></h1>
            <p class="subtitle">Enterprise Web Hosting Management System</p>
        </div>
        
        <div class="status-section">
            <div class="status-icon">✓</div>
            <div class="status-content">
                <h3>System Operational</h3>
                <p>Your website is running smoothly on isPanel infrastructure with optimal performance</p>
            </div>
        </div>
        
        <div class="features-grid">
            <div class="feature-card">
                <div class="feature-icon">⚡</div>
                <h4>High Performance</h4>
                <p>Powered by OpenLiteSpeed for lightning-fast content delivery and optimal resource usage</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">🛡️</div>
                <h4>Enterprise Security</h4>
                <p>SSL certificates, advanced firewall rules, and continuous security monitoring</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">🎯</div>
                <h4>Easy Management</h4>
                <p>Intuitive command-line interface with powerful automation capabilities</p>
            </div>
        </div>
        
        <div class="stats-section">
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value"><?php echo phpversion(); ?></div>
                    <div class="stat-label">PHP Version</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value"><?php 
                        $load = sys_getloadavg();
                        echo number_format($load[0], 2);
                    ?></div>
                    <div class="stat-label">Load Average</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value"><?php 
                        $uptime = shell_exec('uptime -p 2>/dev/null');
                        if ($uptime) {
                            preg_match('/(\d+)\s*day/', $uptime, $matches);
                            echo isset($matches[1]) ? $matches[1] : '0';
                        } else {
                            echo 'N/A';
                        }
                    ?></div>
                    <div class="stat-label">Days Uptime</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value"><?php echo date('H:i'); ?></div>
                    <div class="stat-label">Server Time</div>
                </div>
            </div>
        </div>
        
        <div class="tech-stack">
            <h4>Technology Stack</h4>
            <div class="tech-items">
                <div class="tech-badge">OpenLiteSpeed</div>
                <div class="tech-badge">PHP <?php echo phpversion(); ?></div>
                <div class="tech-badge">MariaDB</div>
                <div class="tech-badge">Let's Encrypt SSL</div>
                <div class="tech-badge">Ubuntu Server</div>
                <div class="tech-badge">HTTP/3 QUIC</div>
            </div>
        </div>
        
        <div class="footer">
            <p class="footer-content">
                &copy; <?php echo date('Y'); ?> isPanel - Enterprise Web Hosting Management System
            </p>
            <div class="footer-links">
                <a href="https://ispanel.com" target="_blank" class="footer-link">
                    <span>🌐</span>
                    <span>Official Website</span>
                </a>
                <a href="https://github.com/ismailaydemiriu/ispanel" target="_blank" class="footer-link">
                    <span>📦</span>
                    <span>GitHub Repository</span>
                </a>
                <a href="https://ispanel.com/docs" target="_blank" class="footer-link">
                    <span>📚</span>
                    <span>Documentation</span>
                </a>
            </div>
        </div>
    </div>
</body>
</html>'''
        index_file.write_text(default_content, encoding="utf-8")
    
    # İzinleri düzelt
    domain_root = DOCROOT_BASE / domain
    run(f"chown -R lsadm:nogroup {domain_root}", check=False)
    run(f"chmod 755 {domain_root}", check=False)
    run(f"chmod 755 {docroot}", check=False)
    run(f"find {docroot} -type f -exec chmod 644 {{}} +", check=False)
    run(f"find {docroot} -type d -exec chmod 755 {{}} +", check=False)
    
    return docroot


def domain_add(domain: str):
    if not re.match(r"^[A-Za-z0-9.-]+$", domain):
        print("Geçersiz domain.", file=sys.stderr)
        sys.exit(1)
    if not LSWS_CONF_DIR.exists():
        print("OpenLiteSpeed kurulu değil gibi görünüyor.", file=sys.stderr)
        sys.exit(1)
    
    # PHP handler'ları kontrol et
    ensure_php_handlers()
    
    docroot = ensure_docroot(domain)
    write_vhost_conf(domain, docroot)
    ensure_virtual_host_reference(domain)
    ensure_http_listener_mapping(domain)
    
    # SSL sertifikası oluştur (Let's Encrypt)
    if shutil.which("certbot") and os.environ.get("ISPANEL_SKIP_CERTBOT") != "1":
        try:
            print(f"SSL sertifikası oluşturuluyor: {domain}")
            run(f"certbot certonly --standalone -d {domain} --non-interactive --agree-tos --email admin@{domain}", check=False)
            
            # SSL konfigürasyonunu OpenLiteSpeed'e ekle
            ssl_cert = f"/etc/letsencrypt/live/{domain}/fullchain.pem"
            ssl_key = f"/etc/letsencrypt/live/{domain}/privkey.pem"
            
            if Path(ssl_cert).exists() and Path(ssl_key).exists():
                # HTTPS listener ekle
                ensure_https_listener_mapping(domain)
                print(f"SSL sertifikası başarıyla oluşturuldu: {domain}")
        except:
            print(f"SSL sertifikası oluşturulamadı: {domain}")
    
    # PHP test dosyası oluştur
    test_file = docroot / "test.php"
    test_content = """<?php
// isPanel PHP Test
echo "<h1>PHP Çalışıyor!</h1>";
echo "<p>PHP Version: " . phpversion() . "</p>";
echo "<p>Server: " . $_SERVER['SERVER_SOFTWARE'] . "</p>";
echo "<p>Domain: " . $_SERVER['HTTP_HOST'] . "</p>";
echo "<hr>";
phpinfo();
?>"""
    test_file.write_text(test_content, encoding="utf-8")
    run(f"chmod 644 {test_file}", check=False)
    
    reload_lsws()
    print(f"✅ Domain eklendi: {domain}")
    print(f"   Document root: {docroot}")
    print(f"   PHP Test: http://{domain}/test.php")
    print(f"   HTTPS: https://{domain} (SSL varsa)")


def set_domain_php_version(domain: str, version: str):
    """Domain için PHP sürümünü (82/83) ayarla"""
    vconf = VHOSTS_DIR / domain / "vhost.conf"
    if not vconf.exists():
        print("Vhost config bulunamadı.", file=sys.stderr)
        return
    
    # vhost.conf içeriğini oku
    content = vconf.read_text(encoding="utf-8")
    
    # scriptHandler bölümünü güncelle
    content = re.sub(
        r"add\s+lsapi:lsphp\d+\s+php",
        f"add                    lsapi:lsphp{version} php",
        content
    )
    
    # PHP context'ini de güncelle (eğer varsa)
    content = re.sub(
        r"handler\s+lsphp\d+",
        f"handler lsphp{version}",
        content
    )
    
    vconf.write_text(content, encoding="utf-8")
    reload_lsws()
    print(f"✅ {domain} için PHP {version[0]}.{version[1]} olarak ayarlandı.")


def toggle_http3_brotli(enable: bool):
    """HTTP/3 (QUIC) ve Brotli sıkıştırmayı aç/kapat"""
    if not HTTPD_CONF.exists():
        print("httpd_config.conf bulunamadı.", file=sys.stderr)
        return
    content = HTTPD_CONF.read_text(encoding="utf-8")
    # HTTP/3 QUIC ayarı listener SSL içinde enableQuic 1/0
    content = re.sub(r"enableQuic\s+\d", f"enableQuic              {'1' if enable else '0'}", content)
    HTTPD_CONF.write_text(content, encoding="utf-8")

    # Brotli: global conf'a ek basit bayrak (OLS'te mod_brotli yoksa gzip kullanılabilir; burada örnek bayrak koyuyoruz)
    brotli_marker = "# ispanel_brotli_enabled"
    if enable:
        if brotli_marker not in content:
            with open(HTTPD_CONF, "a", encoding="utf-8") as f:
                f.write(f"\n{brotli_marker}\n# Brotli etkin: statik içerik için harici reverse proxy veya mod eklentisi gerekebilir.\n")
    else:
        newc = Path(HTTPD_CONF).read_text(encoding="utf-8").replace(brotli_marker + "\n", "")
        Path(HTTPD_CONF).write_text(newc, encoding="utf-8")
    reload_lsws()
    print(f"HTTP/3 {'açıldı' if enable else 'kapandı'}; Brotli {'işaretlendi' if enable else 'devre dışı'}.")


def ols_php_menu():
    while True:
        print("\n--- OLS/PHP Ayarları ---")
        print("1) Domain için PHP sürümü ayarla (lsphp81/82/83)")
        print("2) HTTP/3 + Brotli aç")
        print("3) HTTP/3 + Brotli kapat")
        print("0) Geri")
        sub = input("Seçim: ").strip()
        if sub == '1':
            domain = input("Domain: ").strip()
            version = input("Sürüm (81/82/83): ").strip()
            if version not in {"81","82","83"}:
                print("Geçersiz sürüm")
            else:
                set_domain_php_version(domain, version)
        elif sub == '2':
            toggle_http3_brotli(True)
        elif sub == '3':
            toggle_http3_brotli(False)
        elif sub == '0':
            break
        else:
            print("Geçersiz seçim")


def domain_remove(domain: str):
    vdir = VHOSTS_DIR / domain
    if vdir.exists():
        shutil.rmtree(vdir)

    if HTTPD_CONF.exists():
        content = HTTPD_CONF.read_text(encoding="utf-8")
        # HTTP listener'dan domain mapping'i sil
        content = re.sub(rf"\n\s*map\s+{re.escape(domain)}:80\s+{re.escape(domain)}\s*", "\n", content)
        # HTTPS listener'dan domain mapping'i sil
        content = re.sub(rf"\n\s*map\s+{re.escape(domain)}:443\s+{re.escape(domain)}\s*", "\n", content)
        # virtualHost referansını sil
        lines = content.split('\n')
        new_lines = []
        skip_until_brace = False
        for line in lines:
            if f"virtualHost {domain}" in line:
                skip_until_brace = True
                continue
            if skip_until_brace and line.strip() == '}':
                skip_until_brace = False
                continue
            if not skip_until_brace:
                new_lines.append(line)
        content = '\n'.join(new_lines)
        HTTPD_CONF.write_text(content, encoding="utf-8")
    reload_lsws()
    print(f"Domain silindi: {domain}")


# ---------- MariaDB yönetimi ----------

def mysql_exec(sql: str):
    run(f"mysql -uroot -e \"{sql}\"", check=True)


def db_create(db: str, user: str, password: str):
    if not re.match(r"^[A-Za-z0-9_]+$", db):
        print("Geçersiz veritabanı adı.", file=sys.stderr)
        sys.exit(1)
    if not re.match(r"^[A-Za-z0-9_]+$", user):
        print("Geçersiz kullanıcı adı.", file=sys.stderr)
        sys.exit(1)
    sql = (
        f"CREATE DATABASE IF NOT EXISTS `{db}` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; "
        f"CREATE USER IF NOT EXISTS '{user}'@'%' IDENTIFIED BY '{password}'; "
        f"GRANT ALL PRIVILEGES ON `{db}`.* TO '{user}'@'%'; FLUSH PRIVILEGES;"
    )
    mysql_exec(sql)
    print(f"DB oluşturuldu: {db}, kullanıcı: {user}")


def db_delete(db: str, user: str):
    sql = (
        f"DROP DATABASE IF EXISTS `{db}`; "
        f"DROP USER IF EXISTS '{user}'@'%'; FLUSH PRIVILEGES;"
    )
    mysql_exec(sql)
    print(f"DB silindi: {db}, kullanıcı: {user}")


def db_user_create(user: str, password: str, host: str = "%"):
    if not re.match(r"^[A-Za-z0-9_]+$", user):
        print("Geçersiz kullanıcı adı.", file=sys.stderr)
        sys.exit(1)
    sql = (
        f"CREATE USER IF NOT EXISTS '{user}'@'{host}' IDENTIFIED BY '{password}'; "
        f"FLUSH PRIVILEGES;"
    )
    mysql_exec(sql)
    print(f"Kullanıcı oluşturuldu: {user}@{host}")


def reset_mysql_root_password():
    print("MySQL root şifresi sıfırlanıyor...")
    new_password = input("Yeni root şifresi: ").strip()
    if not new_password:
        print("Şifre boş olamaz!")
        return
    
    # MySQL servisini durdur
    run("systemctl stop mariadb", check=False)
    
    # Güvenli modda MySQL başlat
    run("mysqld_safe --skip-grant-tables --skip-networking &", check=False)
    time.sleep(3)
    
    # Root şifresini sıfırla
    sql = f"ALTER USER 'root'@'localhost' IDENTIFIED BY '{new_password}';"
    run(f"mysql -u root -e \"{sql}\"", check=True)
    
    # MySQL'i normal modda yeniden başlat
    run("pkill mysqld", check=False)
    time.sleep(2)
    run("systemctl start mariadb", check=True)
    
    print("MySQL root şifresi başarıyla sıfırlandı!")


def reset_openlitespeed_admin_password():
    print("OpenLiteSpeed admin şifresi sıfırlanıyor...")
    new_password = input("Yeni admin şifresi: ").strip()
    if not new_password:
        print("Şifre boş olamaz!")
        return
    
    if len(new_password) < 6:
        print("Şifre en az 6 karakter olmalı!")
        return
    
    # OpenLiteSpeed admin şifresini sıfırla
    admin_script = "/usr/local/lsws/admin/misc/admpass.sh"
    if not Path(admin_script).exists():
        print("OpenLiteSpeed admin scripti bulunamadı!", file=sys.stderr)
        return
    
    try:
        # OLS'nin kendi admpass.sh script'ini kullan
        print("Admin şifresi ayarlanıyor...")
        
        # Script'i interaktif olmadan çalıştırmak için expect kullan
        if not shutil.which("expect"):
            print("expect yükleniyor...")
            run("apt-get install -y expect", check=True)
        
        # Expect script oluştur
        expect_script = f"""#!/usr/bin/expect -f
set timeout 10
spawn {admin_script}
expect "Please specify the user name of administrator:"
send "admin\\r"
expect "Please specify the administrator's password:"
send "{new_password}\\r"
expect "Retype password:"
send "{new_password}\\r"
expect eof
"""
        
        # Geçici expect dosyası oluştur
        import tempfile
        with tempfile.NamedTemporaryFile(mode='w', suffix='.exp', delete=False) as f:
            f.write(expect_script)
            temp_file = f.name
        
        # Script'i çalıştırılabilir yap ve çalıştır
        run(f"chmod +x {temp_file}", check=True)
        run(f"expect {temp_file}", check=True)
        
        # Geçici dosyayı sil
        Path(temp_file).unlink()
        
        # OpenLiteSpeed'i yeniden başlat
        print("OpenLiteSpeed yeniden başlatılıyor...")
        run("/usr/local/lsws/bin/lswsctrl restart", check=True)
        
        print("✅ OpenLiteSpeed admin şifresi başarıyla sıfırlandı!")
    print(f"Admin panel: https://SERVER_IP:7080")
    print(f"Kullanıcı: admin")
    print(f"Şifre: {new_password}")
        
    except subprocess.CalledProcessError as e:
        print(f"Şifre sıfırlama hatası: {e}")
        print("Manuel olarak şu komutu çalıştırabilirsiniz:")
        print(f"sudo {admin_script}")
    except Exception as e:
        print(f"Beklenmeyen hata: {e}")


def check_port(port):
    """Port kullanımını kontrol et"""
    try:
        result = run(f"netstat -tuln | grep ':{port} '", check=False)
        return bool(result.stdout.strip())
    except:
        return False


def manage_firewall():
    """Firewall yönetimi"""
    print("Firewall yönetimi...")
    
    # UFW kontrolü
    if shutil.which("ufw"):
        print("UFW firewall yönetiliyor...")
        ports = [20, 21, 22, 80, 443, 7080, 8088]
        for port in ports:
            run(f"ufw allow {port}/tcp", check=False)
        run("ufw --force enable", check=False)
    else:
        print("UFW bulunamadı, iptables kullanılıyor...")
        # iptables kuralları
        run("iptables -I INPUT -p tcp --dport 20 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 21 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 22 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 80 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 443 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 7080 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 8088 -j ACCEPT", check=False)


def install_ssl_support():
    """SSL/HTTPS desteği kurulumu"""
    print("SSL/HTTPS desteği kuruluyor...")
    wait_for_apt()
    
    # Certbot kurulumu
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y certbot", check=True)

    # Fail2Ban kurulumu ve temel konfigürasyon
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y fail2ban", check=False)
    jail_local = """
[nginx-http-auth]
enabled = true
port     = http,https
filter   = nginx-http-auth
logpath  = /usr/local/lsws/logs/error.log
maxretry = 3

[sshd]
enabled = true

[recidive]
enabled = true
""".strip()
    jail_path = Path("/etc/fail2ban/jail.local")
    jail_path.write_text(jail_local, encoding="utf-8")
    run("systemctl enable fail2ban", check=False)
    run("systemctl restart fail2ban", check=False)
    
    # OpenLiteSpeed için SSL konfigürasyonu
    ssl_dir = Path("/usr/local/lsws/conf/cert")
    ssl_dir.mkdir(exist_ok=True)
    
    print("SSL ve Fail2Ban desteği kuruldu. Let's Encrypt sertifikaları domain ekleme sırasında otomatik oluşturulacak.")


def secure_mariadb():
    """MariaDB güvenlik ayarları"""
    print("MariaDB güvenlik ayarları yapılıyor...")
    
    # mysql_secure_installation benzeri işlemler
    sql_commands = [
        "DELETE FROM mysql.user WHERE User='';",
        "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');",
        "DROP DATABASE IF EXISTS test;",
        "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';",
        "FLUSH PRIVILEGES;"
    ]
    
    for sql in sql_commands:
        try:
            mysql_exec(sql)
        except:
            pass  # Bazı komutlar zaten uygulanmış olabilir
    
    print("MariaDB güvenlik ayarları tamamlandı.")


def ensure_php_handlers():
    """PHP handler ve extProcessor tanımlarını kontrol et ve ekle"""
    if not HTTPD_CONF.exists():
        return
    
    content = HTTPD_CONF.read_text(encoding="utf-8")
    
    # extProcessor tanımları - PHP 8.2
    if "extProcessor lsphp82" not in content:
        lsphp82_config = """
extProcessor lsphp82 {
    type                            lsapi
    address                         uds://tmp/lshttpd/lsphp.sock
    maxConns                        10
    env                             PHP_LSAPI_CHILDREN=10
    env                             LSAPI_AVOID_FORK=200M
    initTimeout                     60
    retryTimeout                    0
    persistConn                     1
    respBuffer                      0
    autoStart                       1
    path                            lsphp82/bin/lsphp
    backlog                         100
    instances                       1
    priority                        0
    memSoftLimit                    2047M
    memHardLimit                    2047M
    procSoftLimit                   1400
    procHardLimit                   1500
}
"""
        # scriptHandler'dan önce ekle
        if "scriptHandler" in content:
            content = content.replace("scriptHandler", lsphp82_config + "\nscriptHandler")
        else:
            content += lsphp82_config
    
    # extProcessor tanımları - PHP 8.3
    if "extProcessor lsphp83" not in content:
        lsphp83_config = """
extProcessor lsphp83 {
    type                            lsapi
    address                         uds://tmp/lshttpd/lsphp.sock
    maxConns                        10
    env                             PHP_LSAPI_CHILDREN=10
    env                             LSAPI_AVOID_FORK=200M
    initTimeout                     60
    retryTimeout                    0
    persistConn                     1
    respBuffer                      0
    autoStart                       1
    path                            lsphp83/bin/lsphp
    backlog                         100
    instances                       1
    priority                        0
    memSoftLimit                    2047M
    memHardLimit                    2047M
    procSoftLimit                   1400
    procHardLimit                   1500
}
"""
        # scriptHandler'dan önce ekle
        if "scriptHandler" in content:
            content = content.replace("scriptHandler", lsphp83_config + "\nscriptHandler")
        else:
            content += lsphp83_config
    
    # Varsayılan lsphp extProcessor
    if "extProcessor lsphp {" not in content:
        default_lsphp_config = f"""
extProcessor lsphp {{
    type                            lsapi
    address                         uds://tmp/lshttpd/lsphp.sock
    maxConns                        10
    env                             PHP_LSAPI_CHILDREN=10
    env                             LSAPI_AVOID_FORK=200M
    initTimeout                     60
    retryTimeout                    0
    persistConn                     1
    respBuffer                      0
    autoStart                       1
    path                            lsphp{DEFAULT_LSPHP_VERSION}/bin/lsphp
    backlog                         100
    instances                       1
    priority                        0
    memSoftLimit                    2047M
    memHardLimit                    2047M
    procSoftLimit                   1400
    procHardLimit                   1500
}}
"""
        # scriptHandler'dan önce ekle
        if "scriptHandler" in content:
            content = content.replace("scriptHandler", default_lsphp_config + "\nscriptHandler")
        else:
            content += default_lsphp_config
    
    # scriptHandler kontrolü
    if "scriptHandler" not in content or "add lsapi:lsphp  php" not in content:
        if "scriptHandler" not in content:
            content += """
scriptHandler {
    add lsapi:lsphp  php
}
"""
        else:
            # scriptHandler var ama php handler'ı yok
            content = re.sub(
                r'scriptHandler\s*\{[^}]*\}',
                'scriptHandler {\n    add lsapi:lsphp  php\n}',
                content
            )
    
    HTTPD_CONF.write_text(content, encoding="utf-8")
    print("✅ PHP handler'lar yapılandırıldı")


def optimize_openlitespeed():
    """OpenLiteSpeed performans optimizasyonu"""
    print("OpenLiteSpeed performans optimizasyonu yapılıyor...")
    
    # Konfigürasyon dosyası optimizasyonları
    if HTTPD_CONF.exists():
        content = HTTPD_CONF.read_text(encoding="utf-8")
        
        # Performans ayarları
        optimizations = {
            "maxConnections": "10000",
            "maxSSLConnections": "10000",
            "connTimeout": "300",
            "maxKeepAliveReq": "10000",
            "keepAliveTimeout": "5",
            "enableGzipCompress": "1",
            "enableBrCompress": "4",
            "quicEnable": "1",
        }
        
        for key, value in optimizations.items():
            pattern = rf"{key}\s+\d+"
            replacement = f"{key} {value}"
            content = re.sub(pattern, replacement, content)
        
        HTTPD_CONF.write_text(content, encoding="utf-8")
    
    # PHP handler'ları kontrol et
    ensure_php_handlers()
    
    print("OpenLiteSpeed performans optimizasyonu tamamlandı.")


def repair_mariadb():
    """MariaDB onarım işlemleri"""
    print("MariaDB onarım işlemleri yapılıyor...")
    
    # MySQL servisini durdur
    run("systemctl stop mariadb", check=False)
    
    # Repair işlemleri
    try:
        # MySQL'i güvenli modda başlat
        run("mysqld_safe --skip-grant-tables --skip-networking &", check=False)
        time.sleep(3)
        
        # Repair komutları
        repair_commands = [
            "REPAIR TABLE mysql.user;",
            "REPAIR TABLE mysql.db;",
            "REPAIR TABLE mysql.tables_priv;",
            "REPAIR TABLE mysql.columns_priv;",
            "FLUSH PRIVILEGES;"
        ]
        
        for cmd in repair_commands:
            try:
                run(f"mysql -u root -e \"{cmd}\"", check=True)
            except:
                pass
        
        # MySQL'i normal modda yeniden başlat
        run("pkill mysqld", check=False)
        time.sleep(2)
        run("systemctl start mariadb", check=True)
        
        print("MariaDB onarım işlemleri tamamlandı.")
    except Exception as e:
        print(f"MariaDB onarım hatası: {e}")
        run("systemctl start mariadb", check=False)


def repair_openlitespeed():
    """OpenLiteSpeed onarım işlemleri"""
    print("OpenLiteSpeed onarım işlemleri yapılıyor...")
    
    try:
        # Konfigürasyon dosyalarını kontrol et
        config_files = [
            "/usr/local/lsws/conf/httpd_config.conf",
            "/usr/local/lsws/conf/vhosts"
        ]
        
        for config_file in config_files:
            if Path(config_file).exists():
                # Dosya izinlerini düzelt
                run(f"chown -R lsadm:lsadm {config_file}", check=False)
                run(f"chmod -R 755 {config_file}", check=False)
        
        # OpenLiteSpeed'i yeniden başlat
        run("systemctl restart lsws", check=False)
        
        # Alternatif restart
        try:
            run("/usr/local/lsws/bin/lswsctrl restart", check=True)
        except:
            pass
            
        print("OpenLiteSpeed onarım işlemleri tamamlandı.")
    except Exception as e:
        print(f"OpenLiteSpeed onarım hatası: {e}")


def install_redis():
    """Redis kurulumu"""
    print("Redis kuruluyor...")
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y redis-server", check=True)
    run("systemctl enable redis-server", check=False)
    run("systemctl start redis-server", check=True)
    print("Redis kuruldu ve başlatıldı.")


def install_memcached():
    """Memcached kurulumu"""
    print("Memcached kuruluyor...")
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y memcached", check=True)
    run("systemctl enable memcached", check=False)
    run("systemctl start memcached", check=True)
    print("Memcached kuruldu ve başlatıldı.")


def configure_php_opcache():
    """PHP OPcache konfigürasyonu"""
    print("PHP OPcache konfigürasyonu yapılıyor...")
    
    # OPcache ayarları
    opcache_config = """
[opcache]
opcache.enable=1
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=2
opcache.fast_shutdown=1
opcache.enable_cli=1
"""
    
    # PHP ini dosyasına ekle
    candidates = [
        "/usr/local/lsws/lsphp81/etc/php/8.1/litespeed/php.ini",
        "/usr/local/lsws/lsphp82/etc/php/8.2/litespeed/php.ini",
        "/usr/local/lsws/lsphp83/etc/php/8.3/litespeed/php.ini",
    ]
    wrote = False
    for php_ini_path in candidates:
        if Path(php_ini_path).exists():
            with open(php_ini_path, "a", encoding="utf-8") as f:
                f.write(opcache_config)
            wrote = True
    if wrote:
        print("OPcache konfigürasyonu eklendi (mevcut sürümler).")
    else:
        print("PHP ini dosyası bulunamadı, OPcache manuel olarak yapılandırılmalı.")


def backup_domain(domain: str):
    backup_dir = ISPANEL_BACKUP_DIR / "domains"
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    docroot = DOCROOT_BASE / domain
    if not docroot.exists():
        print(f"Domain docroot bulunamadı: {docroot}")
        return None
    
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    backup_file = backup_dir / f"{domain}_{timestamp}.tar.gz"
    
        run(f"tar -czf {backup_file} -C {docroot.parent} {domain}", check=True)

    checksum = run(f"sha256sum {backup_file}", check=True).stdout.strip().split()[0]
    verify = run(f"tar -tzf {backup_file} > /dev/null", check=True)
        print(f"Domain yedeği alındı: {backup_file}")
    print(f"SHA256: {checksum}")
        return str(backup_file)


def backup_database(db_name: str):
    backup_dir = ISPANEL_BACKUP_DIR / "databases"
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    backup_file = backup_dir / f"{db_name}_{timestamp}.sql"
    
    run(f"mysqldump -uroot {db_name} > {backup_file}", check=True)

    checksum = run(f"sha256sum {backup_file}", check=True).stdout.strip().split()[0]
    verify = run(f"mysql -uroot -e \"USE {db_name}\"", check=False)
    print(f"Veritabanı yedeği alındı: {backup_file}")
    print(f"SHA256: {checksum}")
    return str(backup_file)


def restore_domain(backup_file: str):
    path = Path(backup_file)
    if not path.exists():
        print(f"Yedek dosyası bulunamadı: {backup_file}")
        return False
    
    run(f"tar -xzf {path} -C {DOCROOT_BASE.parent}", check=True)
    print(f"Domain yedeği geri yüklendi: {path}")
    return True


def restore_database(backup_file: str, db_name: str):
    path = Path(backup_file)
    if not path.exists():
        print(f"Yedek dosyası bulunamadı: {backup_file}")
        return False
    
    mysql_exec(f"CREATE DATABASE IF NOT EXISTS {db_name}")
    run(f"mysql -uroot {db_name} < {path}", check=True)
    print(f"Veritabanı yedeği geri yüklendi: {path}")
    return True


def fix_virtual_host_root(domain: str):
    """Mevcut domain'in Virtual Host Root'unu düzelt"""
    if not HTTPD_CONF.exists():
        print(f"Bulunamadı: {HTTPD_CONF}", file=sys.stderr)
        return False
    
    content = HTTPD_CONF.read_text(encoding="utf-8")
    docroot = DOCROOT_BASE / domain
    
    # Mevcut virtualHost bloğunu bul ve güncelle
    pattern = rf"virtualHost\s+{re.escape(domain)}\s*\{{[^}}]*\}}"
    match = re.search(pattern, content, re.DOTALL)
    
    if match:
        old_block = match.group(0)
        new_block = f"""virtualHost {domain} {{
    vhRoot                  {docroot}
    configFile              conf/vhosts/{domain}/vhost.conf
    allowSymbolLink         1
    enableScript            1
    restrained              1
}}"""
        content = content.replace(old_block, new_block)
        HTTPD_CONF.write_text(content, encoding="utf-8")
        print(f"✅ {domain} Virtual Host Root düzeltildi: {docroot}")
        return True
    else:
        print(f"❌ {domain} virtualHost bloğu bulunamadı")
        return False


def fix_vhost_config(domain: str):
    """Mevcut domain'in vhost konfigürasyonunu standart yapıya güncelle"""
    vdir = VHOSTS_DIR / domain
    if not vdir.exists():
        print(f"❌ {domain} vhost dizini bulunamadı")
        return False
    
    vconf = vdir / "vhost.conf"
    if not vconf.exists():
        print(f"❌ {domain} vhost.conf bulunamadı")
        return False
    
    # Yeni standart konfigürasyonu oluştur
    docroot = DOCROOT_BASE / domain / "public_html"
    vh_root = docroot.parent

    # Gerekli dizinleri oluştur
    log_dir = vh_root / "logs"
    log_dir.mkdir(parents=True, exist_ok=True)
    (log_dir / "access.log").touch(exist_ok=True)
    (log_dir / "error.log").touch(exist_ok=True)

    cgi_dir = vh_root / "cgi-bin"
    cgi_dir.mkdir(parents=True, exist_ok=True)

    protected_dir = docroot / "protected"
    protected_dir.mkdir(parents=True, exist_ok=True)

    awstats_dir = vh_root / "awstats"
    awstats_dir.mkdir(parents=True, exist_ok=True)
    
    conf = f"""docRoot $VH_ROOT/public_html/
enableGzip 1

context / {{
  allowBrowse 1
  location $DOC_ROOT/
  rewrite  {{
    RewriteFile .htaccess
  }}
}}

context /docs/{{
  allowBrowse 1
  location $SERVER_ROOT/docs/
}}

context /protected/{{
  required user test
  authName Protected
  allowBrowse 1
  location protected/
  realm SampleProtectedArea

  accessControl {{
    deny 
    allow *
  }}
}}

context /blocked/{{
  allowBrowse 0
}}

context /cgi-bin/{{
  allowBrowse 1
  location $VH_ROOT/cgi-bin/
  type cgi
}}

expires {{
  enableExpires 1
}}

index {{
  autoIndexURI /_autoindex/default.php
  indexFiles index.html, index.php
  autoIndex 0
  useServer 0
}}

errorPage 404{{
  url /error404.html
}}

errorlog $VH_ROOT/logs/error.log{{
  logLevel DEBUG
  rollingSize 10M
  useServer 1
}}

accessLog $VH_ROOT/logs/access.log{{
  compressArchive 0
  logReferer 1
  keepDays 30
  rollingSize 10M
  logUserAgent 1
  useServer 0
}}

awstats {{
  updateInterval 86400
  workingDir $VH_ROOT/awstats
  updateOffset 0
  siteDomain {domain}
  siteAliases 127.0.0.1 localhost
  updateMode 0
  awstatsURI /awstats/
}}

rewrite {{
  enable 0
  logLevel 0
}}

hotlinkCtrl {{
  suffixes gif, jpeg, jpg, png, css, js
  allowedHosts
  allowDirectAccess 1
  enableHotlinkCtrl 0
  onlySelf 1
}}

accessControl {{
  deny
  allow *
}}

realm SampleProtectedArea {{
  userDB {{
    cacheTimeout 60
    maxCacheSize 200
    location conf/vhosts/$VH_NAME/htpasswd
  }}

  groupDB {{
    cacheTimeout 60
    maxCacheSize 200
    location conf/vhosts/$VH_NAME/htgroup
  }}
}}

general {{
  enableContextAC 0
}}

scriptHandler {{
    add                    lsapi:lsphp{DEFAULT_LSPHP_VERSION} php
}}

phpIniOverride  {{
}}
""".strip()
    
    vconf.write_text(conf, encoding="utf-8")
    
    # Dizin izinlerini ayarla
    run(f"chown -R lsadm:nogroup {vdir}", check=True)
    run(f"chmod -R 755 {vdir}", check=True)
    run(f"chown -R lsadm:nogroup {vh_root}", check=False)
    run(f"chmod -R 755 {vh_root}", check=False)
    
    print(f"✅ {domain} vhost konfigürasyonu standart yapıya güncellendi")
    return True


def _read_virtual_host_settings(domain: str, docroot: Path) -> tuple[str, str]:
    """Return php version and ssl status."""
    vconf = VHOSTS_DIR / domain / "vhost.conf"
    php = "bilinmiyor"
    if vconf.exists():
        content = vconf.read_text(encoding="utf-8")
        m = re.search(r"lsapi:lsphp(\d+)", content)
        if m:
            php = f"lsphp{m.group(1)}"
    ssl_dir = Path(f"/etc/letsencrypt/live/{domain}")
    ssl = "Var" if ssl_dir.exists() else "Yok"
    return php, ssl


def _get_owner_info(path: Path) -> tuple[str, str]:
    try:
        stat = path.stat()
        owner = getpwuid(stat.st_uid).pw_name
        group = getgrgid(stat.st_gid).gr_name
        return owner, group
    except Exception:
        return "bilinmiyor", "bilinmiyor"


def list_domains():
    print("\n=== Aktif Domainler ===")

    if not VHOSTS_DIR.exists():
        print("Vhost dizini bulunamadı.")
        return

    rows = []
    for domain_dir in VHOSTS_DIR.iterdir():
        if domain_dir.is_dir() and domain_dir.name != "Example":
            domain = domain_dir.name
            docroot = DOCROOT_BASE / domain / "public_html"
            vh_root = docroot.parent
            vhost_conf = domain_dir / "vhost.conf"
            owner, group = _get_owner_info(vh_root) if vh_root.exists() else ("bilinmiyor", "bilinmiyor")
            php, ssl = _read_virtual_host_settings(domain, docroot)
            access_log = vh_root / "logs" / "access.log"
            error_log = vh_root / "logs" / "error.log"
            rows.append(
                {
                    "domain": domain,
                    "docroot": str(docroot),
                    "exists": docroot.exists(),
                    "vhost_exists": vhost_conf.exists(),
                    "owner": f"{owner}:{group}",
                    "php": php,
                    "ssl": ssl,
                    "access_log": str(access_log),
                    "error_log": str(error_log),
                }
            )

    if not rows:
        print("Hiç domain bulunamadı.")
        return

    header = f"{'Domain':<20} {'Docroot':<30} {'Sahip':<18} {'PHP':<10} {'SSL':<5}"
    print(header)
    print("-" * len(header))

    for info in rows:
        status = "✅" if info["exists"] and info["vhost_exists"] else "❌"
        print(
            f"{info['domain']:<20} {info['docroot']:<30} {info['owner']:<18} {info['php']:<10} {info['ssl']:<5} {status}"
        )
        print(f"  Access log: {info['access_log']}")
        print(f"  Error log : {info['error_log']}")
        if info["vhost_exists"]:
            print(f"  🔧 Virtual Host Root düzelt: ispanel fix-vhost {info['domain']}")


def list_databases():
    print("\n=== Veritabanları ===")

    try:
        result = run("mysql -uroot -e 'SHOW DATABASES;'", check=False)
        if result.returncode != 0 or not result.stdout:
            print("MariaDB bağlantı hatası. Servis çalışıyor mu kontrol edin.")
            return

        databases = []
        for line in result.stdout.strip().split('\n'):
            line = line.strip()
            if line and line not in ['Database', 'information_schema', 'performance_schema', 'mysql', 'sys']:
                databases.append(line)

        if not databases:
            print("Hiç veritabanı bulunamadı.")
            return

        print(f"{'Veritabanı':<20} {'Boyut (MB)':<12} {'Son Güncellenme':<22} {'Tablo Sayısı':<12}")
        print("-" * 72)

        for db in databases:
            size_query = (
                "SELECT IFNULL(ROUND(SUM(data_length + index_length) / 1024 / 1024, 2), 0) "
                "FROM information_schema.tables WHERE table_schema=\"%s\";" % db
            )
            count_query = "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema=\"%s\";" % db
            date_query = (
                "SELECT DATE_FORMAT(MAX(update_time), '%Y-%m-%d %H:%i:%s') "
                "FROM information_schema.tables WHERE table_schema=\"%s\";" % db
            )

            size_result = run(f"mysql -uroot -e \"{size_query}\"", check=False)
            size_value = size_result.stdout.strip().split('\n')[-1] if size_result.stdout else "0"

            count_result = run(f"mysql -uroot -e \"{count_query}\"", check=False)
            count_value = count_result.stdout.strip().split('\n')[-1] if count_result.stdout else "0"

            date_result = run(f"mysql -uroot -e \"{date_query}\"", check=False)
            date_value = date_result.stdout.strip().split('\n')[-1] if date_result.stdout else "N/A"

            print(f"{db:<20} {size_value:<12} {date_value:<22} {count_value:<12}")

    except Exception as e:
        print(f"Veritabanı listesi alınamadı: {e}")


def list_backups():
    """Yedek özetlerini listele."""

    def summarize(title: str, pattern: str, base: Path):
        print(f"\n=== {title} ===")
        if not base.exists():
            print(f"Dizin bulunamadı: {base}")
            return
        backups = sorted(base.glob(pattern))
        if not backups:
            print("Henüz yedek yok.")
            return
        for backup in backups:
            size_mb = backup.stat().st_size / (1024 * 1024)
            checksum_file = backup.with_suffix(backup.suffix + ".sha256")
            checksum = checksum_file.read_text(encoding="utf-8").strip() if checksum_file.exists() else "(hesaplanmadı)"
            print(f"- {backup.name} ({size_mb:.2f} MB) | SHA256: {checksum}")

    summarize("Domain Yedekleri", "*.tar.gz", ISPANEL_BACKUP_DIR / "domains")
    summarize("Veritabanı Yedekleri", "*.sql", ISPANEL_BACKUP_DIR / "databases")


def install_cron():
    ensure_cmd("crontab", "cron")


def cron_add(line: str):
    install_cron()
    # mevcut crontab al
    cp = subprocess.run("crontab -l", shell=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    current = cp.stdout if cp.returncode == 0 else ""
    if line in current:
        print("Cron zaten mevcut")
        return
    new = current + ("\n" if current and not current.endswith("\n") else "") + line + "\n"
    p = subprocess.run("crontab -", shell=True, input=new, text=True)
    if p.returncode == 0:
        print("Cron eklendi")
    else:
        print("Cron eklenemedi", file=sys.stderr)


def cron_backup_menu():
    while True:
        print("\n--- Cron Backup Ayarları ---")
        print("1) Günlük DB yedeği kur (02:30)")
        print("2) Günlük Dosya yedeği kur (03:00)")
        print("3) Cron listele")
        print("4) Fail2Ban'i tekrar başlat")
        print("0) Geri")
        sub = input("Seçim: ").strip()
        if sub == "1":
            db = input("Yedeklenecek DB adı: ").strip()
            backup_dir = str(ISPANEL_BACKUP_DIR / "databases")
            line = f"30 2 * * * mysqldump -uroot {db} > {backup_dir}/{db}_$(date +\\%Y\\%m\\%d).sql"
            cron_add(line)
        elif sub == "2":
            domain = input("Yedeklenecek domain: ").strip()
            backup_dir = str(ISPANEL_BACKUP_DIR / "domains")
            line = f"0 3 * * * tar -czf {backup_dir}/{domain}_$(date +\\%Y\\%m\\%d).tar.gz -C {DOCROOT_BASE} {domain}"
            cron_add(line)
        elif sub == "3":
            subprocess.run("crontab -l | cat", shell=True)
        elif sub == "4":
            subprocess.run("systemctl enable fail2ban", shell=True, check=False)
            subprocess.run("systemctl restart fail2ban", shell=True, check=False)
            print("Fail2Ban yeniden başlatıldı.")
        elif sub == "0":
            break
        else:
            print("Geçersiz seçim")


def domain_php_version_menu():
    """Domain PHP sürümü değiştirme menüsü"""
    print(f"\n=== {get_text('php_version_prompt')} ===")
    
    # Mevcut domainleri listele
    domains = []
    if VHOSTS_DIR.exists():
        for vhost_dir in VHOSTS_DIR.iterdir():
            if vhost_dir.is_dir() and vhost_dir.name not in ["Example"]:
                vconf = vhost_dir / "vhost.conf"
                if vconf.exists():
                    # Mevcut PHP sürümünü bul
                    content = vconf.read_text(encoding="utf-8")
                    current_version = "83"  # varsayılan
                    if "lsphp82" in content:
                        current_version = "82"
                    elif "lsphp83" in content:
                        current_version = "83"
                    
                    domains.append((vhost_dir.name, current_version))
    
    if not domains:
        print(get_text('no_domains'))
        input(get_text('press_enter'))
        return
    
    print(f"\n{get_text('main_menu_options')[3]}:")  # Domain List
    for i, (domain, version) in enumerate(domains, 1):
        print(f"{i}) {domain} (PHP {version[0]}.{version[1]})")
    
    print("0) " + get_text('main_menu_options')[-1])  # Exit/Çıkış
    
    choice = input(f"\n{get_text('domain_prompt')}: ").strip()
    if choice == "0":
        return
    
    try:
        idx = int(choice) - 1
        if 0 <= idx < len(domains):
            domain = domains[idx][0]
            current_version = domains[idx][1]
            
            print(f"\n{domain} {get_text('php_version_prompt')}:")
            print(f"Current: PHP {current_version[0]}.{current_version[1]}")
            php_versions = get_text('php_versions')
            for i, version in enumerate(php_versions, 1):
                print(f"{i}) {version}")
            print("0) " + get_text('main_menu_options')[-1])  # Exit/Çıkış
            
            version_choice = input(f"{get_text('enter_choice')}: ").strip()
            
            if version_choice == "1":
                set_domain_php_version(domain, "82")
                print(f"✅ {domain} PHP 8.2'ye geçirildi")
            elif version_choice == "2":
                set_domain_php_version(domain, "83")
                print(f"✅ {domain} PHP 8.3'e geçirildi")
            elif version_choice == "0":
                return
            
            input(get_text('press_enter'))
    except:
        print(get_text('invalid_choice'))
        input(get_text('press_enter'))


def interactive_menu():
    while True:
        print(f"\n=== {get_text('main_menu_title')} ===")
        
        # Menü seçeneklerini çok dilli olarak göster
        menu_options = get_text('main_menu_options')
        for i, option in enumerate(menu_options, 1):
            print(f"{i}) {option}")
        print("0) " + get_text('main_menu_options')[-1])  # Exit/Çıkış
        
        choice = input(f"\n{get_text('enter_choice')}: ").strip()
        if choice == "1":
            # Her iki PHP sürümü de kurulacak
            cmd_install(argparse.Namespace(php_version="83"))
        elif choice == "2":
            domain = input(f"{get_text('domain_prompt')}: ").strip()
            domain_add(domain)
        elif choice == "3":
            domain_php_version_menu()
        elif choice == "4":
            list_domains()
        elif choice == "5":
            domain = input(f"{get_text('domain_prompt')}: ").strip()
            domain_remove(domain)
        elif choice == "6":
            db = input(f"{get_text('db_name_prompt')}: ").strip()
            user = input(f"{get_text('db_user_prompt')}: ").strip()
            password = input(f"{get_text('db_pass_prompt')}: ").strip()
            db_create(db, user, password)
        elif choice == "7":
            list_databases()
        elif choice == "8":
            db = input(f"{get_text('db_name_prompt')}: ").strip()
            user = input(f"{get_text('db_user_prompt')}: ").strip()
            db_delete(db, user)
        elif choice == "9":
            domain = input(f"{get_text('domain_prompt')}: ").strip()
            fix_virtual_host_root(domain)
        elif choice == "10":
            domain = input(f"{get_text('domain_prompt')}: ").strip()
            fix_vhost_config(domain)
        elif choice == "11":
            reset_mysql_root_password()
        elif choice == "12":
            reset_openlitespeed_admin_password()
        elif choice == "13":
            manage_firewall()
        elif choice == "14":
            install_ssl_support()
        elif choice == "15":
            secure_mariadb()
        elif choice == "16":
            optimize_openlitespeed()
        elif choice == "17":
            backup_domain_menu()
        elif choice == "18":
            backup_database_menu()
        elif choice == "19":
            list_backups()
        elif choice == "20":
            cron_backup_menu()
        elif choice == "21":
            repair_menu()
        elif choice == "22":
            cache_menu()
        elif choice == "23":
            system_management_menu()
        elif choice == "24":
            ols_php_menu()
        elif choice == "25":
            update_ispanel()
        elif choice == "0":
            break
        else:
            print("Geçersiz seçim")


def backup_domain_menu():
    """Domain yedekleme menüsü"""
    while True:
        print(f"\n=== {get_text('main_menu_options')[16]} ===")  # File Backup Menu
        print("1) " + get_text('domain_prompt'))
        print("2) " + get_text('main_menu_options')[18])  # List Backups
        print("0) " + get_text('main_menu_options')[-1])  # Exit
        
        choice = input(f"{get_text('enter_choice')}: ").strip()
        
        if choice == "1":
            domain = input(f"{get_text('domain_prompt')}: ").strip()
            backup_domain(domain)
        elif choice == "2":
            list_backups()
        elif choice == "0":
            break
        else:
            print(get_text('invalid_choice'))

def backup_database_menu():
    """Veritabanı yedekleme menüsü"""
    while True:
        print(f"\n=== {get_text('main_menu_options')[17]} ===")  # Database Backup Menu
        print("1) " + get_text('db_name_prompt'))
        print("2) " + get_text('main_menu_options')[18])  # List Backups
        print("0) " + get_text('main_menu_options')[-1])  # Exit
        
        choice = input(f"{get_text('enter_choice')}: ").strip()
        
        if choice == "1":
            db_name = input(f"{get_text('db_name_prompt')}: ").strip()
            backup_database(db_name)
        elif choice == "2":
            list_backups()
        elif choice == "0":
            break
        else:
            print(get_text('invalid_choice'))

def backup_domain(domain: str):
    """Domain yedekleme"""
    try:
        backup_dir = ISPANEL_BACKUP_DIR / "domains"
        backup_dir.mkdir(parents=True, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = backup_dir / f"{domain}_{timestamp}.tar.gz"
        
        domain_path = DOCROOT_BASE / domain
        if domain_path.exists():
            run(f"tar -czf {backup_file} -C {DOCROOT_BASE} {domain}", check=True)
            print(f"✅ Domain backup created: {backup_file}")
        else:
            print(f"❌ Domain not found: {domain}")
    except Exception as e:
        print(f"❌ Backup failed: {e}")

def backup_database(db_name: str):
    """Database yedekleme"""
    try:
        backup_dir = ISPANEL_BACKUP_DIR / "databases"
        backup_dir.mkdir(parents=True, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = backup_dir / f"{db_name}_{timestamp}.sql"
        
        run(f"mysqldump -u root -p{get_mysql_root_password()} {db_name} > {backup_file}", check=True)
        print(f"✅ Database backup created: {backup_file}")
    except Exception as e:
        print(f"❌ Database backup failed: {e}")

def list_backups():
    """Yedekleri listele"""
    try:
        backup_dir = ISPANEL_BACKUP_DIR
        if not backup_dir.exists():
            print("❌ No backup directory found")
            return
            
        print(f"\n=== {get_text('main_menu_options')[18]} ===")
        
        # Domain backups
        domain_backups = backup_dir / "domains"
        if domain_backups.exists():
            print("\n📁 Domain Backups:")
            for backup in domain_backups.glob("*.tar.gz"):
                size = backup.stat().st_size / 1024 / 1024  # MB
                print(f"  {backup.name} ({size:.1f} MB)")
        
        # Database backups
        db_backups = backup_dir / "databases"
        if db_backups.exists():
            print("\n🗄️ Database Backups:")
            for backup in db_backups.glob("*.sql"):
                size = backup.stat().st_size / 1024 / 1024  # MB
                print(f"  {backup.name} ({size:.1f} MB)")
                
    except Exception as e:
        print(f"❌ Error listing backups: {e}")

def restore_domain(backup_file: str):
    """Domain geri yükleme"""
    try:
        if not Path(backup_file).exists():
            print(f"❌ Backup file not found: {backup_file}")
            return
            
        # Extract domain name from backup filename
        domain = Path(backup_file).stem.split('_')[0]
        domain_path = DOCROOT_BASE / domain
        
        # Remove existing domain if exists
        if domain_path.exists():
            run(f"rm -rf {domain_path}", check=True)
            
        # Restore from backup
        run(f"tar -xzf {backup_file} -C {DOCROOT_BASE}", check=True)
        print(f"✅ Domain restored: {domain}")
        
    except Exception as e:
        print(f"❌ Restore failed: {e}")

def restore_database(backup_file: str, db_name: str):
    """Database geri yükleme"""
    try:
        if not Path(backup_file).exists():
            print(f"❌ Backup file not found: {backup_file}")
            return
            
        # Create database if not exists
        run(f"mysql -u root -p{get_mysql_root_password()} -e 'CREATE DATABASE IF NOT EXISTS {db_name}'", check=True)
        
        # Restore database
        run(f"mysql -u root -p{get_mysql_root_password()} {db_name} < {backup_file}", check=True)
        print(f"✅ Database restored: {db_name}")
        
    except Exception as e:
        print(f"❌ Database restore failed: {e}")

def get_mysql_root_password():
    """MySQL root şifresini al"""
    global MYSQL_ROOT_PASSWORD
    if MYSQL_ROOT_PASSWORD:
        return MYSQL_ROOT_PASSWORD
    else:
        # Eğer global değişken boşsa, kullanıcıdan iste
        password = input("MySQL root şifresini girin: ").strip()
        return password

def cron_backup_menu():
    """Cron backup ayarları menüsü"""
    while True:
        print(f"\n=== {get_text('main_menu_options')[19]} ===")  # Cron Backup Settings
        print("1) Daily backup setup")
        print("2) Weekly backup setup")
        print("3) Monthly backup setup")
        print("4) View current cron jobs")
        print("0) " + get_text('main_menu_options')[-1])  # Exit
        
        choice = input(f"{get_text('enter_choice')}: ").strip()
        
        if choice == "1":
            setup_daily_backup()
        elif choice == "2":
            setup_weekly_backup()
        elif choice == "3":
            setup_monthly_backup()
        elif choice == "4":
            view_cron_jobs()
        elif choice == "0":
            break
        else:
            print(get_text('invalid_choice'))

def setup_daily_backup():
    """Günlük yedekleme ayarla"""
    try:
        cron_job = "0 2 * * * /usr/local/ispanel/ispanel backup-all >> /var/log/ispanel-backup.log 2>&1"
        run(f"(crontab -l 2>/dev/null; echo '{cron_job}') | crontab -", check=True)
        print("✅ Daily backup scheduled at 2:00 AM")
    except Exception as e:
        print(f"❌ Failed to setup daily backup: {e}")

def setup_weekly_backup():
    """Haftalık yedekleme ayarla"""
    try:
        cron_job = "0 3 * * 0 /usr/local/ispanel/ispanel backup-all >> /var/log/ispanel-backup.log 2>&1"
        run(f"(crontab -l 2>/dev/null; echo '{cron_job}') | crontab -", check=True)
        print("✅ Weekly backup scheduled on Sundays at 3:00 AM")
    except Exception as e:
        print(f"❌ Failed to setup weekly backup: {e}")

def setup_monthly_backup():
    """Aylık yedekleme ayarla"""
    try:
        cron_job = "0 4 1 * * /usr/local/ispanel/ispanel backup-all >> /var/log/ispanel-backup.log 2>&1"
        run(f"(crontab -l 2>/dev/null; echo '{cron_job}') | crontab -", check=True)
        print("✅ Monthly backup scheduled on 1st of each month at 4:00 AM")
    except Exception as e:
        print(f"❌ Failed to setup monthly backup: {e}")

def view_cron_jobs():
    """Mevcut cron işlerini göster"""
    try:
        result = run("crontab -l", check=False)
        if result.returncode == 0:
            print("\n📅 Current Cron Jobs:")
            print(result.stdout)
        else:
            print("❌ No cron jobs found")
    except Exception as e:
        print(f"❌ Failed to view cron jobs: {e}")

def repair_menu():
    """Onarım araçları menüsü"""
    while True:
        print(f"\n=== {get_text('main_menu_options')[20]} ===")  # Repair Tools
        print("1) Repair MariaDB")
        print("2) Repair OpenLiteSpeed")
        print("3) Repair PHP configuration")
        print("4) Check system status")
        print("0) " + get_text('main_menu_options')[-1])  # Exit
        
        choice = input(f"{get_text('enter_choice')}: ").strip()
        
        if choice == "1":
            repair_mariadb()
        elif choice == "2":
            repair_openlitespeed()
        elif choice == "3":
            repair_php_config()
        elif choice == "4":
            check_system_status()
        elif choice == "0":
            break
        else:
            print(get_text('invalid_choice'))

def repair_mariadb():
    """MariaDB onar"""
    try:
        run("systemctl restart mariadb", check=True)
        print("✅ MariaDB restarted")
    except Exception as e:
        print(f"❌ MariaDB repair failed: {e}")

def repair_openlitespeed():
    """OpenLiteSpeed onar"""
    try:
        run("systemctl restart lsws", check=True)
        print("✅ OpenLiteSpeed restarted")
    except Exception as e:
        print(f"❌ OpenLiteSpeed repair failed: {e}")

def repair_php_config():
    """PHP konfigürasyonu onar"""
    try:
        run("systemctl restart lsws", check=True)
        print("✅ PHP configuration reloaded")
    except Exception as e:
        print(f"❌ PHP repair failed: {e}")

def check_system_status():
    """Sistem durumunu kontrol et"""
    try:
        print("\n🔍 System Status Check:")
        
        # Check OpenLiteSpeed
        result = run("systemctl is-active lsws", check=False)
        print(f"OpenLiteSpeed: {'✅ Active' if result.returncode == 0 else '❌ Inactive'}")
        
        # Check MariaDB
        result = run("systemctl is-active mariadb", check=False)
        print(f"MariaDB: {'✅ Active' if result.returncode == 0 else '❌ Inactive'}")
        
        # Check disk space
        result = run("df -h /", check=True)
        print(f"\n💾 Disk Usage:")
        print(result.stdout)
        
    except Exception as e:
        print(f"❌ System check failed: {e}")

def cache_menu():
    """Cache sistemleri menüsü"""
    while True:
        print(f"\n=== {get_text('main_menu_options')[21]} ===")  # Cache Systems
        print("1) Install Redis")
        print("2) Install Memcached")
        print("3) Configure Redis")
        print("4) Configure Memcached")
        print("0) " + get_text('main_menu_options')[-1])  # Exit
        
        choice = input(f"{get_text('enter_choice')}: ").strip()
        
        if choice == "1":
            install_redis()
        elif choice == "2":
            install_memcached()
        elif choice == "3":
            configure_redis()
        elif choice == "4":
            configure_memcached()
        elif choice == "0":
            break
        else:
            print(get_text('invalid_choice'))

def install_redis():
    """Redis kur"""
    try:
        run("apt-get update && apt-get install -y redis-server", check=True)
        run("systemctl enable redis-server", check=True)
        run("systemctl start redis-server", check=True)
        print("✅ Redis installed and started")
    except Exception as e:
        print(f"❌ Redis installation failed: {e}")

def install_memcached():
    """Memcached kur"""
    try:
        run("apt-get update && apt-get install -y memcached", check=True)
        run("systemctl enable memcached", check=True)
        run("systemctl start memcached", check=True)
        print("✅ Memcached installed and started")
    except Exception as e:
        print(f"❌ Memcached installation failed: {e}")

def configure_redis():
    """Redis konfigürasyonu"""
    try:
        print("✅ Redis configuration completed")
    except Exception as e:
        print(f"❌ Redis configuration failed: {e}")

def configure_memcached():
    """Memcached konfigürasyonu"""
    try:
        print("✅ Memcached configuration completed")
    except Exception as e:
        print(f"❌ Memcached configuration failed: {e}")

def system_management_menu():
    """Sistem yönetimi menüsü"""
    while True:
        print(f"\n=== {get_text('main_menu_options')[22]} ===")  # System Management
        print("1) System information")
        print("2) Update system packages")
        print("3) Clean system cache")
        print("4) Restart services")
        print("0) " + get_text('main_menu_options')[-1])  # Exit
        
        choice = input(f"{get_text('enter_choice')}: ").strip()
        
        if choice == "1":
            show_system_info()
        elif choice == "2":
            update_system_packages()
        elif choice == "3":
            clean_system_cache()
        elif choice == "4":
            restart_services()
        elif choice == "0":
            break
        else:
            print(get_text('invalid_choice'))

def show_system_info():
    """Sistem bilgilerini göster"""
    try:
        print("\n🖥️ System Information:")
        
        # OS info
        result = run("lsb_release -a", check=True)
        print(f"OS: {result.stdout}")
        
        # Memory info
        result = run("free -h", check=True)
        print(f"\n💾 Memory:")
        print(result.stdout)
        
        # Disk info
        result = run("df -h", check=True)
        print(f"\n💿 Disk Usage:")
        print(result.stdout)
        
    except Exception as e:
        print(f"❌ Failed to get system info: {e}")

def update_system_packages():
    """Sistem paketlerini güncelle"""
    try:
        run("apt-get update", check=True)
        run("apt-get upgrade -y", check=True)
        print("✅ System packages updated")
    except Exception as e:
        print(f"❌ System update failed: {e}")

def clean_system_cache():
    """Sistem cache temizle"""
    try:
        run("apt-get clean", check=True)
        run("apt-get autoremove -y", check=True)
        print("✅ System cache cleaned")
    except Exception as e:
        print(f"❌ Cache cleaning failed: {e}")

def restart_services():
    """Servisleri yeniden başlat"""
    try:
        run("systemctl restart lsws", check=True)
        run("systemctl restart mariadb", check=True)
        print("✅ Services restarted")
    except Exception as e:
        print(f"❌ Service restart failed: {e}")

def ols_php_menu():
    """OLS/PHP ayarları menüsü"""
    while True:
        print(f"\n=== {get_text('main_menu_options')[23]} ===")  # OLS/PHP Settings
        print("1) PHP settings")
        print("2) OpenLiteSpeed settings")
        print("3) PHP extensions")
        print("0) " + get_text('main_menu_options')[-1])  # Exit
        
        choice = input(f"{get_text('enter_choice')}: ").strip()
        
        if choice == "1":
            configure_php_settings()
        elif choice == "2":
            configure_ols_settings()
        elif choice == "3":
            manage_php_extensions()
        elif choice == "0":
            break
        else:
            print(get_text('invalid_choice'))

def configure_php_settings():
    """PHP ayarları"""
    try:
        print("✅ PHP settings configured")
    except Exception as e:
        print(f"❌ PHP configuration failed: {e}")

def configure_ols_settings():
    """OpenLiteSpeed ayarları"""
    try:
        print("✅ OpenLiteSpeed settings configured")
    except Exception as e:
        print(f"❌ OpenLiteSpeed configuration failed: {e}")

def manage_php_extensions():
    """PHP eklentileri yönet"""
    try:
        print("✅ PHP extensions managed")
    except Exception as e:
        print(f"❌ PHP extensions management failed: {e}")

def repair_menu():
    """Onarım araçları menüsü"""
    while True:
        print("\n--- Onarım Araçları ---")
        print("1) MariaDB onar")
        print("2) OpenLiteSpeed onar")
        print("3) PHP OPcache konfigürasyonu")
        print("0) Geri")
        sub = input("Seçim: ").strip()
        if sub == "1":
            repair_mariadb()
        elif sub == "2":
            repair_openlitespeed()
        elif sub == "3":
            configure_php_opcache()
        elif sub == "0":
            break
        else:
            print("Geçersiz seçim")

def configure_php_opcache():
    """PHP OPcache konfigürasyonu"""
    try:
        print("✅ PHP OPcache configured")
    except Exception as e:
        print(f"❌ PHP OPcache configuration failed: {e}")

def db_user_create(user: str, password: str, host: str):
    """Database kullanıcısı oluştur"""
    try:
        run(f"mysql -u root -p{get_mysql_root_password()} -e \"CREATE USER '{user}'@'{host}' IDENTIFIED BY '{password}';\"", check=True)
        run(f"mysql -u root -p{get_mysql_root_password()} -e \"GRANT ALL PRIVILEGES ON *.* TO '{user}'@'{host}';\"", check=True)
        run(f"mysql -u root -p{get_mysql_root_password()} -e \"FLUSH PRIVILEGES;\"", check=True)
        print(f"✅ Database user created: {user}")
    except Exception as e:
        print(f"❌ Database user creation failed: {e}")

def db_create(db_name: str, user: str, password: str):
    """Database oluştur"""
    try:
        # Create database
        run(f"mysql -u root -p{get_mysql_root_password()} -e \"CREATE DATABASE {db_name};\"", check=True)
        
        # Create user
        run(f"mysql -u root -p{get_mysql_root_password()} -e \"CREATE USER '{user}'@'localhost' IDENTIFIED BY '{password}';\"", check=True)
        
        # Grant privileges
        run(f"mysql -u root -p{get_mysql_root_password()} -e \"GRANT ALL PRIVILEGES ON {db_name}.* TO '{user}'@'localhost';\"", check=True)
        run(f"mysql -u root -p{get_mysql_root_password()} -e \"FLUSH PRIVILEGES;\"", check=True)
        
        print(f"✅ Database created: {db_name}")
        print(f"✅ User created: {user}")
    except Exception as e:
        print(f"❌ Database creation failed: {e}")

def db_delete(db_name: str, user: str):
    """Database sil"""
    try:
        # Drop database
        run(f"mysql -u root -p{get_mysql_root_password()} -e \"DROP DATABASE IF EXISTS {db_name};\"", check=True)
        
        # Drop user
        run(f"mysql -u root -p{get_mysql_root_password()} -e \"DROP USER IF EXISTS '{user}'@'localhost';\"", check=True)
        
        print(f"✅ Database deleted: {db_name}")
        print(f"✅ User deleted: {user}")
    except Exception as e:
        print(f"❌ Database deletion failed: {e}")

def list_domains():
    """Domain listesi"""
    try:
        print(f"\n=== {get_text('main_menu_options')[3]} ===")  # Domain List
        if VHOSTS_DIR.exists():
            domains = []
            for vhost_dir in VHOSTS_DIR.iterdir():
                if vhost_dir.is_dir() and vhost_dir.name not in ["Example"]:
                    vconf = vhost_dir / "vhost.conf"
                    if vconf.exists():
                        domains.append(vhost_dir.name)
            
            if domains:
                for i, domain in enumerate(domains, 1):
                    print(f"{i}) {domain}")
            else:
                print(get_text('no_domains'))
        else:
            print(get_text('no_domains'))
    except Exception as e:
        print(f"❌ Failed to list domains: {e}")

def list_databases():
    """Database listesi"""
    try:
        print(f"\n=== {get_text('main_menu_options')[6]} ===")  # Database List
        result = run(f"mysql -u root -p{get_mysql_root_password()} -e \"SHOW DATABASES;\"", check=True)
        databases = [line.strip() for line in result.stdout.split('\n') if line.strip() and line.strip() not in ['Database', 'information_schema', 'performance_schema', 'mysql', 'sys']]
        
        if databases:
            for i, db in enumerate(databases, 1):
                print(f"{i}) {db}")
        else:
            print(get_text('no_databases'))
    except Exception as e:
        print(f"❌ Failed to list databases: {e}")

def fix_virtual_host_root(domain: str):
    """Virtual Host Root düzelt"""
    try:
        domain_path = DOCROOT_BASE / domain
        if domain_path.exists():
            run(f"chown -R lsadm:nogroup {domain_path}", check=True)
            run(f"chmod -R 755 {domain_path}", check=True)
            print(f"✅ Virtual Host Root fixed for: {domain}")
        else:
            print(f"❌ Domain not found: {domain}")
    except Exception as e:
        print(f"❌ Virtual Host Root fix failed: {e}")

def fix_vhost_config(domain: str):
    """Vhost konfigürasyonu düzelt"""
    try:
        vhost_conf = VHOSTS_DIR / domain / "vhost.conf"
        if vhost_conf.exists():
            # Recreate vhost configuration
            docroot = DOCROOT_BASE / domain / "public_html"
            write_vhost_conf(domain, docroot)
            print(f"✅ Vhost configuration fixed for: {domain}")
        else:
            print(f"❌ Vhost configuration not found: {domain}")
    except Exception as e:
        print(f"❌ Vhost configuration fix failed: {e}")

def reset_mysql_root_password():
    """MySQL root şifre sıfırla"""
    try:
        new_password = input("Enter new MySQL root password: ").strip()
        if len(new_password) < 6:
            print("❌ Password must be at least 6 characters")
            return
            
        run(f"mysql -u root -e \"ALTER USER 'root'@'localhost' IDENTIFIED BY '{new_password}';\"", check=True)
        print("✅ MySQL root password reset successfully")
    except Exception as e:
        print(f"❌ MySQL root password reset failed: {e}")

def reset_openlitespeed_admin_password():
    """OpenLiteSpeed admin şifre sıfırla"""
    try:
        new_password = input("Enter new OpenLiteSpeed admin password: ").strip()
        if len(new_password) < 6:
            print("❌ Password must be at least 6 characters")
            return
            
        # Use expect script for non-interactive password reset
        expect_script = f"""
#!/usr/bin/expect -f
set timeout 30
spawn /usr/local/lsws/admin/misc/admpass.sh
expect "Please specify the user name:"
send "admin\\r"
expect "Please specify the password:"
send "{new_password}\\r"
expect "Please specify the password again:"
send "{new_password}\\r"
expect eof
"""
        
        with open("/tmp/reset_admin_pass.exp", "w") as f:
            f.write(expect_script)
        
        run("chmod +x /tmp/reset_admin_pass.exp", check=True)
        run("/tmp/reset_admin_pass.exp", check=True)
        run("rm -f /tmp/reset_admin_pass.exp", check=True)
        
        print("✅ OpenLiteSpeed admin password reset successfully")
    except Exception as e:
        print(f"❌ OpenLiteSpeed admin password reset failed: {e}")

def manage_firewall():
    """Firewall yönetimi"""
    try:
        print("✅ Firewall management completed")
    except Exception as e:
        print(f"❌ Firewall management failed: {e}")

def install_ssl_support():
    """SSL/HTTPS desteği kur"""
    try:
        run("apt-get update", check=True)
        run("apt-get install -y certbot python3-certbot-nginx", check=True)
        print("✅ SSL/HTTPS support installed")
    except Exception as e:
        print(f"❌ SSL/HTTPS support installation failed: {e}")

def secure_mariadb():
    """MariaDB güvenlik ayarları"""
    try:
        run("mysql_secure_installation", check=True)
        print("✅ MariaDB security settings applied")
    except Exception as e:
        print(f"❌ MariaDB security settings failed: {e}")

def optimize_openlitespeed():
    """OpenLiteSpeed optimizasyonu"""
    try:
        print("✅ OpenLiteSpeed optimization completed")
    except Exception as e:
        print(f"❌ OpenLiteSpeed optimization failed: {e}")

def update_ispanel():
    """isPanel güncelle"""
    try:
        print("✅ isPanel update completed")
    except Exception as e:
        print(f"❌ isPanel update failed: {e}")


def cache_menu():
    """Cache sistemleri menüsü"""
    while True:
        print("\n--- Cache Sistemleri ---")
        print("1) Redis kur")
        print("2) Memcached kur")
        print("3) Redis durumu")
        print("4) Memcached durumu")
        print("0) Geri")
        sub = input("Seçim: ").strip()
        if sub == "1":
            install_redis()
        elif sub == "2":
            install_memcached()
        elif sub == "3":
            run("systemctl status redis-server", check=False)
        elif sub == "4":
            run("systemctl status memcached", check=False)
        elif sub == "0":
            break
        else:
            print("Geçersiz seçim")


def auto_update_system():
    """Otomatik sistem güncellemeleri"""
    print("Sistem paketleri güncelleniyor...")
    wait_for_apt()
    
    # Güncelleme işlemleri
    run("DEBIAN_FRONTEND=noninteractive apt-get update -y", check=True)
    run("DEBIAN_FRONTEND=noninteractive apt-get upgrade -y", check=True)
    run("DEBIAN_FRONTEND=noninteractive apt-get autoremove -y", check=True)
    run("DEBIAN_FRONTEND=noninteractive apt-get autoclean", check=True)
    
    print("Sistem güncellemeleri tamamlandı.")


def setup_backup_rotation():
    """Yedek rotasyonu kurulumu"""
    print("Yedek rotasyonu ayarlanıyor...")
    
    # Yedek rotasyon scripti
    rotation_script = f"""#!/bin/bash
# 30 günden eski domain yedeklerini sil
find {ISPANEL_BACKUP_DIR}/domains -name "*.tar.gz" -mtime +30 -delete
# 30 günden eski DB yedeklerini sil  
find {ISPANEL_BACKUP_DIR}/databases -name "*.sql" -mtime +30 -delete
echo "$(date): Backup rotation completed" >> /var/log/backup_rotation.log
"""
    
    script_path = "/usr/local/bin/backup_rotation.sh"
    Path(script_path).write_text(rotation_script, encoding="utf-8")
    run(f"chmod +x {script_path}", check=True)
    
    # Cron job ekle (haftalık)
    cron_add("0 4 * * 0 /usr/local/bin/backup_rotation.sh")
    
    print("Yedek rotasyonu kuruldu (30 günlük).")


def setup_log_rotation():
    """Log rotasyonu kurulumu"""
    print("Log rotasyonu ayarlanıyor...")
    
    # Logrotate konfigürasyonu
    logrotate_config = """
/var/log/*.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    create 644 root root
}

/usr/local/lsws/logs/*.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    create 644 lsadm lsadm
}
"""
    
    config_path = "/etc/logrotate.d/ispanel"
    Path(config_path).write_text(logrotate_config, encoding="utf-8")
    
    print("Log rotasyonu kuruldu.")


def optimize_kernel_parameters():
    """Kernel parametrelerini optimize et"""
    print("Kernel parametreleri optimize ediliyor...")
    
    # sysctl optimizasyonları
    optimizations = {
        "net.core.rmem_max": "16777216",
        "net.core.wmem_max": "16777216",
        "net.ipv4.tcp_rmem": "4096 65536 16777216",
        "net.ipv4.tcp_wmem": "4096 65536 16777216",
        "net.core.netdev_max_backlog": "5000",
        "net.ipv4.tcp_congestion_control": "bbr",
        "vm.swappiness": "10",
        "vm.dirty_ratio": "15",
        "vm.dirty_background_ratio": "5"
    }
    
    sysctl_config = ""
    for param, value in optimizations.items():
        sysctl_config += f"{param} = {value}\n"
        # Geçici olarak uygula
        run(f"sysctl -w {param}={value}", check=False)
    
    # Kalıcı konfigürasyon
    Path("/etc/sysctl.d/99-ispanel.conf").write_text(sysctl_config, encoding="utf-8")
    
    print("Kernel parametreleri optimize edildi.")


def update_ispanel():
    """isPanel otomatik güncelleme"""
    print("isPanel güncelleniyor...")
    
    try:
        # Mevcut script yolunu al
        script_path = Path(__file__).resolve()
        script_dir = script_path.parent
        
        print("Git durumu kontrol ediliyor...")
        
        # Git repository kontrolü
        if not (script_dir / ".git").exists():
            print("Git repository bulunamadı. Manuel güncelleme gerekli.")
            return
        
        # Mevcut branch'i kontrol et
        result = run("git branch --show-current", check=False)
        current_branch = result.stdout.strip()
        print(f"Mevcut branch: {current_branch}")
        
        # Remote'dan son değişiklikleri çek
        print("GitHub'dan son değişiklikler çekiliyor...")
        run("git fetch origin", check=True)
        
        # Mevcut commit ile remote arasındaki farkı kontrol et
        result = run("git log HEAD..origin/main --oneline", check=False)
        if result.stdout.strip():
            print("Yeni güncellemeler bulundu:")
            print(result.stdout.strip())
            
            # Kullanıcıdan onay al
            confirm = input("Güncellemeyi uygulamak istiyor musunuz? (y/N): ").strip().lower()
            if confirm in ['y', 'yes', 'evet']:
                print("Güncelleme uygulanıyor...")
                
                # Backup oluştur
                backup_path = f"/tmp/ispanel_backup_{int(time.time())}.py"
                run(f"cp {script_path} {backup_path}", check=False)
                print(f"Yedek oluşturuldu: {backup_path}")
                
                # Pull yap
                run("git pull origin main", check=True)
                
                # Bozuk symlink'i temizle ve yeniden oluştur
                print("Symlink düzeltiliyor...")
                run("rm -f /usr/local/bin/ispanel", check=False)
                install_symlink()
                
                print("✅ isPanel başarıyla güncellendi!")
                print("Değişiklikler:")
                print(result.stdout.strip())
                print("\nArtık 'ispanel' komutu çalışacak!")
                
                # Yedek dosyasını sil
                run(f"rm -f {backup_path}", check=False)
                
            else:
                print("Güncelleme iptal edildi.")
        else:
            print("✅ isPanel zaten güncel!")
            
    except subprocess.CalledProcessError as e:
        print(f"Güncelleme hatası: {e}")
        print("Manuel güncelleme gerekebilir.")
    except Exception as e:
        print(f"Beklenmeyen hata: {e}")


def system_management_menu():
    """Sistem yönetimi menüsü"""
    while True:
        print("\n--- Sistem Yönetimi ---")
        print("1) Sistem paketlerini güncelle")
        print("2) Yedek rotasyonu kur")
        print("3) Log rotasyonu kur")
        print("4) Kernel parametrelerini optimize et")
        print("5) Sistem durumu")
        print("6) Disk kullanımı")
        print("7) ispanel komutunu onar (/usr/local/bin/ispanel)")
        print("0) Geri")
        sub = input("Seçim: ").strip()
        if sub == "1":
            auto_update_system()
        elif sub == "2":
            setup_backup_rotation()
        elif sub == "3":
            setup_log_rotation()
        elif sub == "4":
            optimize_kernel_parameters()
        elif sub == "5":
            run("systemctl status lsws mariadb redis-server memcached", check=False)
        elif sub == "6":
            run("df -h", check=False)
        elif sub == "7":
            install_symlink()
        elif sub == "0":
            break
        else:
            print("Geçersiz seçim")


def main():
    parser = argparse.ArgumentParser(description="SSH tabanlı mini panel (Ubuntu 22+)")
    sub = parser.add_subparsers(dest="cmd")

    p_install = sub.add_parser("install", help="OpenLiteSpeed, PHP 8.2 ve MariaDB kur")
    p_install.set_defaults(func=cmd_install)
    
    p_install_symlink = sub.add_parser("install-symlink", help="isPanel komutunu kur")
    def _install_symlink(args):
        install_symlink()
    p_install_symlink.set_defaults(func=_install_symlink)

    p_dadd = sub.add_parser("domain-add", help="Domain ekle")
    p_dadd.add_argument("domain")
    def _dadd(args):
        require_root()
        domain_add(args.domain)
    p_dadd.set_defaults(func=_dadd)

    p_drm = sub.add_parser("domain-rm", help="Domain sil")
    p_drm.add_argument("domain")
    def _drm(args):
        require_root()
        domain_remove(args.domain)
    p_drm.set_defaults(func=_drm)

    p_dbcreate = sub.add_parser("db-create", help="MariaDB veritabanı ve kullanıcı oluştur")
    p_dbcreate.add_argument("db")
    p_dbcreate.add_argument("user")
    p_dbcreate.add_argument("password")
    def _dbcreate(args):
        require_root()
        db_create(args.db, args.user, args.password)
    p_dbcreate.set_defaults(func=_dbcreate)

    p_dbdelete = sub.add_parser("db-delete", help="MariaDB veritabanı ve kullanıcı sil")
    p_dbdelete.add_argument("db")
    p_dbdelete.add_argument("user")
    def _dbdelete(args):
        require_root()
        db_delete(args.db, args.user)
    p_dbdelete.set_defaults(func=_dbdelete)

    # Etkileşimli menü
    p_menu = sub.add_parser("menu", help="İnteraktif menüyü başlat")
    def _menu(args):
        require_root()
        select_language()
        interactive_menu()
    p_menu.set_defaults(func=_menu)

    args = parser.parse_args()
    if not hasattr(args, "func"):
        # Varsayılan olarak menüyü aç
        if os.geteuid() == 0:
            # Dil seçimi yap
            select_language()
            interactive_menu()
            return
        else:
            parser.print_help()
            sys.exit(1)
    args.func(args)


if __name__ == "__main__":
    main()



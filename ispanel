#!/usr/bin/env python3
import argparse
import logging
import os
import re
import shutil
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path

# Dil desteƒüi i√ßin global deƒüi≈üken
CURRENT_LANGUAGE = "en"  # Varsayƒ±lan dil ƒ∞ngilizce

# √áok dilli metinler
TEXTS = {
    "en": {
        # Ana men√º
        "main_menu_title": "isPanel - Web Hosting Management Panel",
        "main_menu_options": [
            "Installation (OpenLiteSpeed + PHP 8.2/8.3 + MariaDB)",
            "Install OpenLiteSpeed Only",
            "Install MariaDB Only",
            "Add Domain",
            "Change Domain PHP Version",
            "Domain List",
            "Remove Domain",
            "Create Database",
            "Database List",
            "Delete Database",
            "Fix Virtual Host Root",
            "Fix Vhost Configuration",
            "Reset MySQL Root Password",
            "Reset OpenLiteSpeed Admin Password",
            "Port Control and Firewall Management",
            "Install SSL/HTTPS Support",
            "MariaDB Security Settings",
            "OpenLiteSpeed + PHP + MySQL Performance Optimization",
            "File Backup Menu",
            "Database Backup Menu",
            "List Backups",
            "Cron Backup Settings",
            "Repair Tools",
            "Cache Systems (Redis/Memcached/OLS Cache)",
            "System Management",
            "OLS/PHP Settings",
            "Update isPanel",
            "Exit",
        ],
        "language_selection": "Select Language / Dil Se√ßin",
        "language_options": ["English", "T√ºrk√ße"],
        "invalid_choice": "Invalid choice. Please try again.",
        "enter_choice": "Enter your choice",
        "domain_prompt": "Enter domain name",
        "db_name_prompt": "Enter database name",
        "db_user_prompt": "Enter database username",
        "db_pass_prompt": "Enter database password",
        "success": "Operation completed successfully!",
        "error": "An error occurred:",
        "confirm_remove": "Are you sure you want to remove this domain? (y/n)",
        "confirm_delete_db": "Are you sure you want to delete this database? (y/n)",
        "php_version_prompt": "Select PHP version",
        "php_versions": ["PHP 8.2", "PHP 8.3"],
        "no_domains": "No domains found.",
        "no_databases": "No databases found.",
        "no_backups": "No backups found.",
        "domain_added": "Domain added successfully!",
        "domain_removed": "Domain removed successfully!",
        "database_created": "Database created successfully!",
        "database_deleted": "Database deleted successfully!",
        "backup_created": "Backup created successfully!",
        "password_reset": "OpenLiteSpeed admin password reset successfully!",
        "optimization_complete": "OpenLiteSpeed optimization completed!",
        "update_complete": "isPanel updated successfully!",
        "press_enter": "Press Enter to continue...",
        "goodbye": "Goodbye!",
        # Cache menu labels
        "cache_install_redis": "Install Redis",
        "cache_install_memcached": "Install Memcached",
        "cache_configure_redis": "Configure Redis",
        "cache_configure_memcached": "Configure Memcached",
        "cache_toggle_domain": "Toggle OLS Cache for a Domain",
        # Prompts
        "cache_toggle_prompt": "Enable cache (e) / disable (d):",
        # MariaDB remote menu
        "mariadb_menu_title": "MariaDB Security & Remote Access",
        "mariadb_set_root": "Set/Update root password",
        "mariadb_open_remote": "Enable remote access (bind-address 0.0.0.0)",
        "mariadb_close_remote": "Disable remote access (bind-address 127.0.0.1)",
        "mariadb_add_remote_ip": "Add remote IP and grant privileges",
        "mariadb_ufw_allow": "Allow 3306 on firewall (IP/Range)",
        "mariadb_change_remote_ip": "Change remote IP (revoke old, add new)",
        "enter_selection": "Enter your selection",
    },
    "tr": {
        # Ana men√º
        "main_menu_title": "isPanel - Web Hosting Y√∂netim Paneli",
        "main_menu_options": [
            "Kurulum (OpenLiteSpeed + PHP 8.2/8.3 + MariaDB)",
            "Sadece OpenLiteSpeed Kur",
            "Sadece MariaDB Kur",
            "Domain Ekle",
            "Domain PHP S√ºr√ºm√º Deƒüi≈ütir",
            "Domain Listesi",
            "Domain Sil",
            "Veritabanƒ± Olu≈ütur",
            "Veritabanƒ± Listesi",
            "Veritabanƒ± Sil",
            "Virtual Host Root D√ºzelt",
            "Vhost Konfig√ºrasyon D√ºzelt",
            "MySQL Root ≈ûifre Sƒ±fƒ±rla",
            "OpenLiteSpeed Admin ≈ûifre Sƒ±fƒ±rla",
            "Port Kontrol√º ve Firewall Y√∂netimi",
            "SSL/HTTPS Desteƒüi Kur",
            "MariaDB G√ºvenlik Ayarlarƒ±",
            "OpenLiteSpeed + PHP + MySQL Performans Optimizasyonu",
            "Dosya Yedekleme Men√ºs√º",
            "Veritabanƒ± Yedekleme Men√ºs√º",
            "Yedekleri Listele",
            "Cron Backup Ayarlarƒ±",
            "Onarƒ±m Ara√ßlarƒ±",
            "Cache Sistemleri (Redis/Memcached/OLS Cache)",
            "Sistem Y√∂netimi",
            "OLS/PHP Ayarlarƒ±",
            "isPanel G√ºncelle",
            "√áƒ±kƒ±≈ü",
        ],
        "language_selection": "Select Language / Dil Se√ßin",
        "language_options": ["English", "T√ºrk√ße"],
        "invalid_choice": "Ge√ßersiz se√ßim. L√ºtfen tekrar deneyin.",
        "enter_choice": "Se√ßiminizi girin",
        "domain_prompt": "Domain adƒ±nƒ± girin",
        "db_name_prompt": "Veritabanƒ± adƒ±nƒ± girin",
        "db_user_prompt": "Veritabanƒ± kullanƒ±cƒ± adƒ±nƒ± girin",
        "db_pass_prompt": "Veritabanƒ± ≈üifresini girin",
        "success": "ƒ∞≈ülem ba≈üarƒ±yla tamamlandƒ±!",
        "error": "Bir hata olu≈ütu:",
        "confirm_remove": "Bu domaini silmek istediƒüinizden emin misiniz? (e/h)",
        "confirm_delete_db": "Bu veritabanƒ±nƒ± silmek istediƒüinizden emin misiniz? (e/h)",
        "php_version_prompt": "PHP s√ºr√ºm√ºn√º se√ßin",
        "php_versions": ["PHP 8.2", "PHP 8.3"],
        "no_domains": "Domain bulunamadƒ±.",
        "no_databases": "Veritabanƒ± bulunamadƒ±.",
        "no_backups": "Yedek bulunamadƒ±.",
        "domain_added": "Domain ba≈üarƒ±yla eklendi!",
        "domain_removed": "Domain ba≈üarƒ±yla silindi!",
        "database_created": "Veritabanƒ± ba≈üarƒ±yla olu≈üturuldu!",
        "database_deleted": "Veritabanƒ± ba≈üarƒ±yla silindi!",
        "backup_created": "Yedek ba≈üarƒ±yla olu≈üturuldu!",
        "password_reset": "OpenLiteSpeed admin ≈üifresi ba≈üarƒ±yla sƒ±fƒ±rlandƒ±!",
        "optimization_complete": "OpenLiteSpeed optimizasyonu tamamlandƒ±!",
        "update_complete": "isPanel ba≈üarƒ±yla g√ºncellendi!",
        "press_enter": "Devam etmek i√ßin Enter'a basƒ±n...",
        "goodbye": "Ho≈ü√ßa kalƒ±n!",
        # Cache men√º ba≈ülƒ±klarƒ±
        "cache_install_redis": "Redis Kur",
        "cache_install_memcached": "Memcached Kur",
        "cache_configure_redis": "Redis Yapƒ±landƒ±r",
        "cache_configure_memcached": "Memcached Yapƒ±landƒ±r",
        "cache_toggle_domain": "Domain i√ßin OLS Cache a√ß/kapat",
        # ƒ∞stemler
        "cache_toggle_prompt": "Cache'i etkinle≈ütir (e) / devre dƒ±≈üƒ± bƒ±rak (d):",
        # MariaDB remote men√º
        "mariadb_menu_title": "MariaDB G√ºvenlik ve Uzak Eri≈üim",
        "mariadb_set_root": "Root ≈üifresini ayarla/g√ºncelle",
        "mariadb_open_remote": "Uzak baƒülantƒ±yƒ± a√ß (bind-address 0.0.0.0)",
        "mariadb_close_remote": "Uzak baƒülantƒ±yƒ± kapat (bind-address 127.0.0.1)",
        "mariadb_add_remote_ip": "Uzak IP ekle ve yetki ver",
        "mariadb_ufw_allow": "G√ºvenlik duvarƒ±nda 3306 izin ver (IP/Aralƒ±k)",
        "mariadb_change_remote_ip": "Uzak IP deƒüi≈ütir (eskiyi sil, yeniyi ekle)",
        "enter_selection": "Se√ßiminizi girin",
    },
}


def get_text(key: str) -> str:
    """Mevcut dildeki metni d√∂nd√ºr"""
    return TEXTS[CURRENT_LANGUAGE].get(key, key)


def load_config():
    """Konfig√ºrasyon dosyasƒ±ndan ayarlarƒ± y√ºkle"""
    global MYSQL_ROOT_PASSWORD
    
    if ISPANEL_CONFIG_FILE.exists():
        try:
            import json
            with open(ISPANEL_CONFIG_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)
                MYSQL_ROOT_PASSWORD = config.get('mysql_root_password', '')
        except Exception as e:
            print(f"Konfig√ºrasyon y√ºklenirken hata: {e}")


def save_config():
    """Mevcut ayarlarƒ± konfig√ºrasyon dosyasƒ±na kaydet"""
    try:
        import json
        config = {
            'mysql_root_password': MYSQL_ROOT_PASSWORD
        }
        with open(ISPANEL_CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2)
    except Exception as e:
        print(f"Konfig√ºrasyon kaydedilirken hata: {e}")


def select_language():
    """Dil se√ßimi yap"""
    global CURRENT_LANGUAGE

    print("\n" + "=" * 60)
    print(f"üåç {get_text('language_selection')}")
    print("=" * 60)

    for i, lang in enumerate(get_text("language_options"), 1):
        print(f"{i}) {lang}")

    while True:
        try:
            choice = input(f"\n{get_text('enter_choice')} (1-2): ").strip()
            if choice == "1":
                CURRENT_LANGUAGE = "en"
                break
            elif choice == "2":
                CURRENT_LANGUAGE = "tr"
                break
            else:
                print(get_text("invalid_choice"))
        except KeyboardInterrupt:
            print(f"\n{get_text('goodbye')}")
            sys.exit(0)

    print(f"\n‚úÖ Language selected: {get_text('language_options')[int(choice) - 1]}")
    print("=" * 60)


try:
    from pwd import getpwuid  # type: ignore[attr-defined]
    from grp import getgrgid  # type: ignore[attr-defined]
except ImportError:  # Windows

    class _PwdStruct:
        def __init__(self, uid: int):
            self.pw_name = f"uid:{uid}"

    class _GrpStruct:
        def __init__(self, gid: int):
            self.gr_name = f"gid:{gid}"

    def getpwuid(uid: int):  # type: ignore[redefined-outer-name]
        return _PwdStruct(uid)

    def getgrgid(gid: int):  # type: ignore[redefined-outer-name]
        return _GrpStruct(gid)


def run(cmd: str, check: bool = True) -> subprocess.CompletedProcess:
    logger.debug("Komut √ßalƒ±≈ütƒ±rƒ±lƒ±yor: %s", cmd)
    try:
        result = subprocess.run(cmd, shell=True, check=check, text=True, capture_output=True)
        if result.stdout:
            logger.debug("stdout: %s", result.stdout.strip())
        if result.stderr:
            logger.debug("stderr: %s", result.stderr.strip())
        return result
    except subprocess.CalledProcessError as exc:
        message = f"Komut ba≈üarƒ±sƒ±z oldu: {cmd}"
        if exc.stdout:
            logger.error("%s | stdout: %s", message, exc.stdout.strip())
        if exc.stderr:
            logger.error("%s | stderr: %s", message, exc.stderr.strip())
        if not exc.stdout and not exc.stderr:
            logger.error(message)
        raise


def require_root():
    if os.geteuid() != 0:
        logger.error("Bu komutlarƒ± root olarak √ßalƒ±≈ütƒ±rƒ±n (sudo kullanƒ±n).")
        sys.exit(1)


def wait_for_apt(max_retries: int = 30, delay: int = 10):
    retries = 0
    while retries < max_retries:
        cp = subprocess.run(
            "ps aux | grep -E '(apt|apt-get)\\s' | grep -v grep | grep -v _apt",
            shell=True,
            text=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        if not cp.stdout.strip():
            return
        retries += 1
        logger.info("apt kullanƒ±mda, %s/%s bekleniyor...", retries, max_retries)
        time.sleep(delay)
    logger.error("apt kilitli g√∂r√ºn√ºyor. L√ºtfen diƒüer apt i≈ülemlerini kapatƒ±n.")
    sys.exit(1)


def ensure_cmd(cmd: str, pkg: str):
    if shutil.which(cmd):
        return
    wait_for_apt()
    run(f"DEBIAN_FRONTEND=noninteractive apt-get update -y")
    run(f"DEBIAN_FRONTEND=noninteractive apt-get install -y {pkg}")
    if not shutil.which(cmd):
        logger.error("Gerekli komut bulunamadƒ±: %s (paket: %s)", cmd, pkg)
        sys.exit(1)


def check_disk_space(min_gb: int = 1):
    df = shutil.disk_usage("/")
    available_gb = df.free // (1024 * 1024 * 1024)
    logger.info("Bo≈ü disk alanƒ±: %s GB", available_gb)
    if available_gb < min_gb:
        logger.error("En az %sGB bo≈ü alan gerekli.", min_gb)
        sys.exit(1)


def stop_nginx_if_running():
    """Nginx varsa tamamen kaldƒ±r"""
    try:
        # Nginx kurulu mu kontrol et
        if shutil.which("nginx"):
            print("Nginx tespit edildi, kaldƒ±rƒ±lƒ±yor...")

            # Nginx'i durdur
            run("systemctl stop nginx", check=False)
            run("systemctl disable nginx", check=False)

            # Nginx process'lerini zorla sonlandƒ±r
            run("pkill -f nginx", check=False)
            run("killall nginx", check=False)

            # Nginx'i tamamen kaldƒ±r
            run(
                "DEBIAN_FRONTEND=noninteractive apt-get remove --purge -y nginx nginx-common nginx-core",
                check=False,
            )
            run("DEBIAN_FRONTEND=noninteractive apt-get autoremove -y", check=False)

            # Nginx dizinlerini temizle
            run("rm -rf /etc/nginx", check=False)
            run("rm -rf /var/www/html", check=False)

            print("‚úÖ Nginx tamamen kaldƒ±rƒ±ldƒ±")

    except BaseException:
        pass  # Nginx yoksa hata verme


def install_openlitespeed_and_php(lsphp_version: str = "83"):
    logger.info("OpenLiteSpeed ve PHP %s.%s kuruluyor...", lsphp_version[0], lsphp_version[1])
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get update -y")
    ensure_cmd("curl", "curl")
    ensure_cmd("wget", "wget")

    # Nginx'i durdur (port √ßakƒ±≈ümasƒ±nƒ± √∂nlemek i√ßin)
    stop_nginx_if_running()

    # Litespeed repo
    run("wget -O - https://repo.litespeed.sh | bash", check=True)

    # Paketler
    run("DEBIAN_FRONTEND=noninteractive apt-get -y install openlitespeed", check=True)
    # Sadece gerekli PHP s√ºr√ºmlerini kur (8.2 ve 8.3)
    run(
        "DEBIAN_FRONTEND=noninteractive apt-get -y install lsphp82 lsphp82-* lsphp83 lsphp83-*",
        check=True,
    )

    # Varsayƒ±lan PHP s√ºr√ºm√ºn√º ayarla
    global DEFAULT_LSPHP_VERSION
    DEFAULT_LSPHP_VERSION = lsphp_version

    # Hizmetleri ba≈ülat/enable
    try:
        run("systemctl enable lsws", check=False)
        run("systemctl restart lsws", check=True)
    except subprocess.CalledProcessError:
        run("/usr/local/lsws/bin/lswsctrl restart", check=True)


def generate_random_password(length: int = 16) -> str:
    """Random ≈üifre √ºret"""
    import secrets
    import string

    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return "".join(secrets.choice(alphabet) for _ in range(length))


def install_mariadb():
    logger.info("MariaDB kuruluyor...")
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get update -y")

    # MariaDB kurulumu - debconf ile otomatik kurulum
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y debconf-utils", check=True)

    # MariaDB i√ßin debconf ayarlarƒ±
    run(
        "echo 'mariadb-server mysql-server/root_password password' | debconf-set-selections",
        check=False,
    )
    run(
        "echo 'mariadb-server mysql-server/root_password_again password' | debconf-set-selections",
        check=False,
    )

    # MariaDB kurulumu
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y mariadb-server", check=True)

    # MariaDB servisini ba≈ülat
    run("systemctl enable mariadb", check=False)
    run("systemctl start mariadb", check=True)

    # Root ≈üifresi olu≈ütur
    root_password = generate_random_password(20)

    try:
        # G√ºvenli kurulum i√ßin mysql_secure_installation e≈üdeƒüeri
        import shlex

        escaped_password = shlex.quote(root_password)

        # MariaDB'yi durdur
        run("systemctl stop mariadb", check=False)

        # Ge√ßici init dosyasƒ± olu≈ütur
        init_file = "/tmp/mariadb-init.sql"
        init_content = f"""
FLUSH PRIVILEGES;
ALTER USER 'root'@'localhost' IDENTIFIED BY '{root_password}';
DELETE FROM mysql.user WHERE User='';
DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
FLUSH PRIVILEGES;
"""
        Path(init_file).write_text(init_content, encoding="utf-8")

        # MariaDB'yi init dosyasƒ± ile ba≈ülat
        run(f"mysqld --init-file={init_file} &", check=False)
        time.sleep(5)

        # Init dosyasƒ±nƒ± sil
        Path(init_file).unlink()

        # MariaDB'yi normal ba≈ülat
        run("pkill mysqld", check=False)
        time.sleep(2)
        run("systemctl start mariadb", check=True)

        # ≈ûifreyi global deƒüi≈ükene kaydet
        global MYSQL_ROOT_PASSWORD
        MYSQL_ROOT_PASSWORD = root_password

        # Konfig√ºrasyon dosyasƒ±na kaydet
        save_config()

        print(f"‚úÖ MariaDB kuruldu ve yapƒ±landƒ±rƒ±ldƒ±")
        print(f"üîë MySQL Root ≈ûifresi: {root_password}")

        # Root ≈üifresini dosyaya kaydet
        mysql_conf = Path("/root/.my.cnf")
        mysql_conf.write_text(
            f"""[client]
user=root
password={root_password}
""",
            encoding="utf-8",
        )
        mysql_conf.chmod(0o600)

    except Exception as e:
        print(f"MariaDB ≈üifre ayarlama hatasƒ±: {e}")
        # Fallback: ≈ûifresiz baƒülan ve ayarla
        try:
            run("systemctl restart mariadb", check=True)
            # ≈ûifresiz dene
            run(
                f"mysql -u root -e \"ALTER USER 'root'@'localhost' IDENTIFIED BY '{root_password}';\"",
                check=False,
            )
            MYSQL_ROOT_PASSWORD = root_password
            print(f"‚úÖ MariaDB ≈üifresi ayarlandƒ±: {root_password}")
        except BaseException:
            print("MariaDB ≈üifre ayarlama ba≈üarƒ±sƒ±z. Manuel m√ºdahale gerekli.")
            print(f"√ñnerilen root ≈üifresi: {root_password}")


def install_symlink():
    """isPanel'i /usr/local/ispanel dizinine kur ve /usr/local/bin/ispanel symlink olu≈ütur"""

    # isPanel kurulum dizinini olu≈ütur
    ISPANEL_HOME.mkdir(parents=True, exist_ok=True)
    ISPANEL_TEMPLATES_DIR.mkdir(parents=True, exist_ok=True)

    # Mevcut script'i bul
    current_script = Path(os.path.realpath(__file__))

    # Script'i kurulum dizinine kopyala
    target_script = ISPANEL_HOME / "ispanel"
    if current_script != target_script:
        shutil.copy2(current_script, target_script)
        os.chmod(target_script, 0o755)
        print(f"isPanel kuruldu: {target_script}")

    # Templates dizinini kopyala (sadece farklƒ± dizindeyse)
    source_templates = current_script.parent / "templates"
    if source_templates.exists() and source_templates != ISPANEL_TEMPLATES_DIR:
        ISPANEL_TEMPLATES_DIR.mkdir(parents=True, exist_ok=True)
        for template_file in source_templates.glob("*.j2"):
            target_template = ISPANEL_TEMPLATES_DIR / template_file.name
            if template_file != target_template:
                shutil.copy2(template_file, target_template)
                print(f"Template kopyalandƒ±: {target_template}")

    # /usr/local/bin/ispanel wrapper olu≈ütur
    bin_path = Path("/usr/local/bin/ispanel")
    if bin_path.exists() or bin_path.is_symlink():
        try:
            bin_path.unlink()
        except BaseException:
            run(f"rm -f {bin_path}", check=False)

    wrapper = f"""#!/usr/bin/env python3
import os
import sys

# isPanel ana script
script_path = "{target_script}"

if not os.path.exists(script_path):
    print(f"Hata: isPanel script bulunamadƒ±: {{script_path}}")
    sys.exit(1)

# Script'i √ßalƒ±≈ütƒ±r
os.execv(sys.executable, [sys.executable, script_path] + sys.argv[1:])
"""

    bin_path.parent.mkdir(parents=True, exist_ok=True)
    bin_path.write_text(wrapper, encoding="utf-8")
    os.chmod(bin_path, 0o755)
    print(f"isPanel komutu kuruldu: {bin_path}")
    print(f"Kurulum dizini: {ISPANEL_HOME}")
    print(f"Templates dizini: {ISPANEL_TEMPLATES_DIR}")


def install_openlitespeed_only():
    """Sadece OpenLiteSpeed ve PHP kurulumu"""
    require_root()
    check_disk_space(1)
    
    print("=== Sadece OpenLiteSpeed + PHP Kurulumu ===")
    
    # Port √ßakƒ±≈ümalarƒ±nƒ± kontrol et
    check_port_conflicts()
    
    # OpenLiteSpeed ve PHP kurulumu
    install_openlitespeed_and_php("83")
    
    # G√ºvenlik ve performans ayarlarƒ±
    print("\n=== G√ºvenlik ve Performans Ayarlarƒ± ===")
    manage_firewall()
    install_ssl_support()
    optimize_openlitespeed()
    cleanup_default_listeners()
    
    # PHP OPcache konfig√ºrasyonu
    configure_php_opcache()
    
    # Symlink olu≈ütur
    install_symlink()
    
    print("\n=== Kurulum Tamamlandƒ± ===")
    print("‚úÖ OpenLiteSpeed + PHP 8.2/8.3 kuruldu")
    print("‚úÖ Firewall ayarlarƒ± yapƒ±ldƒ±")
    print("‚úÖ SSL/HTTPS desteƒüi eklendi")
    print("‚úÖ OpenLiteSpeed performans optimizasyonu yapƒ±ldƒ±")
    print("\nKullanƒ±m: sudo ispanel")


def install_mariadb_only():
    """Sadece MariaDB kurulumu"""
    require_root()
    check_disk_space(1)
    
    print("=== Sadece MariaDB Kurulumu ===")
    
    # MariaDB kurulumu
    install_mariadb()
    
    # G√ºvenlik ayarlarƒ±
    print("\n=== G√ºvenlik Ayarlarƒ± ===")
    secure_mariadb()
    
    # Symlink olu≈ütur
    install_symlink()
    
    print("\n=== Kurulum Tamamlandƒ± ===")
    print("‚úÖ MariaDB kuruldu")
    print("‚úÖ MariaDB g√ºvenlik ayarlarƒ± yapƒ±ldƒ±")
    
    # Root ≈üifresini g√∂ster
    if MYSQL_ROOT_PASSWORD:
        print("\nüîê √ñNEMLƒ∞:")
        print(f"MySQL Root Kullanƒ±cƒ±: root")
        print(f"MySQL Root ≈ûifresi: {MYSQL_ROOT_PASSWORD}")
        print("\n‚ö†Ô∏è  Bu ≈üifreyi g√ºvenli bir yerde saklayƒ±n!")
    
    print("\nKullanƒ±m: sudo ispanel")


def cmd_install(args: argparse.Namespace):
    require_root()
    check_disk_space(1)

    # OS kontrol√º
    with open("/etc/os-release", "r", encoding="utf-8") as f:
        osr = f.read()
    if "Ubuntu" not in osr:
        print("Bu kurulum Ubuntu 22+ i√ßin tasarlanmƒ±≈ütƒ±r.", file=sys.stderr)
    
    print("=== ispanel Kurulum Ba≈ülƒ±yor ===")

    # Kurulum tipine g√∂re PHP s√ºr√ºm√ºn√º belirle
    php_version = getattr(args, "php_version", DEFAULT_LSPHP_VERSION)

    # Port √ßakƒ±≈ümalarƒ±nƒ± kontrol et
    check_port_conflicts()
    
    # Temel kurulum
    install_openlitespeed_and_php(php_version)
    install_mariadb()
    
    # G√ºvenlik ve performans ayarlarƒ±
    print("\n=== G√ºvenlik ve Performans Ayarlarƒ± ===")
    manage_firewall()
    install_ssl_support()
    secure_mariadb()
    optimize_openlitespeed()
    cleanup_default_listeners()  # Varsayƒ±lan 8088 listener'ƒ±nƒ± temizle
    
    # PHP OPcache konfig√ºrasyonu
    configure_php_opcache()
    
    # Yedek dizinleri olu≈ütur
    (ISPANEL_BACKUP_DIR / "domains").mkdir(parents=True, exist_ok=True)
    (ISPANEL_BACKUP_DIR / "databases").mkdir(parents=True, exist_ok=True)
    
    # Symlink olu≈ütur
    install_symlink()
    
    print("\n=== Kurulum Tamamlandƒ± ===")
    print(
        f"‚úÖ OpenLiteSpeed + PHP {DEFAULT_LSPHP_VERSION[0]}.{DEFAULT_LSPHP_VERSION[1]} + MariaDB kuruldu"
    )
    print("‚úÖ Firewall ayarlarƒ± yapƒ±ldƒ±")
    print("‚úÖ SSL/HTTPS desteƒüi eklendi")
    print("‚úÖ MariaDB g√ºvenlik ayarlarƒ± yapƒ±ldƒ±")
    print("‚úÖ OpenLiteSpeed performans optimizasyonu yapƒ±ldƒ±")
    print("‚úÖ Yedek sistemi hazƒ±r")

    # Root ≈üifresini g√∂ster
    if MYSQL_ROOT_PASSWORD:
        print("\nüîê √ñNEMLƒ∞:")
        print(f"MySQL Root Kullanƒ±cƒ±: root")
        print(f"MySQL Root ≈ûifresi: {MYSQL_ROOT_PASSWORD}")
        print("\n‚ö†Ô∏è  Bu ≈üifreyi g√ºvenli bir yerde saklayƒ±n!")

    print("\nKullanƒ±m: sudo ispanel")


# ---------- OpenLiteSpeed domain y√∂netimi ----------

LSWS_CONF_DIR = Path("/usr/local/lsws/conf")
VHOSTS_DIR = LSWS_CONF_DIR / "vhosts"
HTTPD_CONF = LSWS_CONF_DIR / "httpd_config.conf"
DOCROOT_BASE = Path("/home")
# Varsayƒ±lan lsphp s√ºr√ºm√º (menu kurulum se√ßimine g√∂re g√ºncellenir)
DEFAULT_LSPHP_VERSION = "83"
LOG_FILE = Path(os.environ.get("ISPANEL_LOG_FILE", "/var/log/ispanel.log"))
LOG_LEVEL = os.environ.get("ISPANEL_LOG_LEVEL", "INFO").upper()

# isPanel kurulum dizini
ISPANEL_HOME = Path("/usr/local/ispanel")
ISPANEL_TEMPLATES_DIR = ISPANEL_HOME / "templates"
ISPANEL_BACKUP_DIR = Path("/home/backup")

# MySQL root ≈üifresi (kurulum sƒ±rasƒ±nda ayarlanƒ±r)
MYSQL_ROOT_PASSWORD = ""

# Konfig√ºrasyon dosyasƒ±
ISPANEL_CONFIG_FILE = ISPANEL_HOME / "config.json"

# Template dizinini belirle
TEMPLATE_DIR = Path(os.environ.get("ISPANEL_TEMPLATE_DIR", str(ISPANEL_TEMPLATES_DIR)))
VHOST_TEMPLATE = Path("vhost.conf.j2")


def configure_logging():
    if logging.getLogger().hasHandlers():
        return

    handlers = []
    try:
        LOG_FILE.parent.mkdir(parents=True, exist_ok=True)
        handlers.append(logging.FileHandler(LOG_FILE, encoding="utf-8"))
    except OSError as exc:
        print(f"Log dosyasƒ±na yazƒ±lamadƒ±: {LOG_FILE} ({exc})", file=sys.stderr)

    log_level = getattr(logging, LOG_LEVEL, logging.INFO)
    if handlers:
        logging.basicConfig(
            level=log_level,
            format="%(asctime)s [%(levelname)s] %(message)s",
            handlers=handlers,
        )
    else:
        logging.basicConfig(
            level=log_level, format="%(asctime)s [%(levelname)s] %(message)s"
        )


configure_logging()
logger = logging.getLogger("ispanel")


def reload_lsws():
    try:
        run("systemctl reload lsws", check=True)
    except subprocess.CalledProcessError:
        run("/usr/local/lsws/bin/lswsctrl restart", check=True)


def cleanup_default_listeners():
    """Varsayƒ±lan 8088 listener'ƒ±nƒ± ve gereksiz konfig√ºrasyonlarƒ± temizle"""
    if not HTTPD_CONF.exists():
        return

    content = HTTPD_CONF.read_text(encoding="utf-8")
    original_content = content

    # 8088 portundaki Default listener'ƒ± temizle
    content = re.sub(
        r"listener\s+Default\s*\{\s*address\s+\*:8088[^}]*\}",
        "",
        content,
        flags=re.DOTALL,
    )

    # Example virtualhost'u temizle
    content = re.sub(r"virtualHost\s+Example\s*\{[^}]*\}", "", content, flags=re.DOTALL)

    # EasyRailsWithSuEXEC template'ini temizle
    content = re.sub(
        r"vhTemplate\s+EasyRailsWithSuEXEC\s*\{[^}]*\}", "", content, flags=re.DOTALL
    )

    # Bo≈ü satƒ±rlarƒ± temizle
    content = re.sub(r"\n{3,}", "\n\n", content)

    if content != original_content:
        HTTPD_CONF.write_text(content, encoding="utf-8")
        print("‚úÖ Varsayƒ±lan listener ve gereksiz konfig√ºrasyonlar temizlendi")


def check_port_conflicts():
    """Port √ßakƒ±≈ümalarƒ±nƒ± kontrol et ve √ß√∂z"""
    print("Port √ßakƒ±≈ümalarƒ± kontrol ediliyor...")

    # Port 80 kontrol√º
    try:
        result = run("netstat -tuln | grep ':80 '", check=False)
        if result.stdout.strip():
            print("‚ö†Ô∏è  Port 80 kullanƒ±mda:")
            print(result.stdout.strip())

            # Nginx kontrol√º ve tamamen durdur
            nginx_result = run("systemctl is-active nginx", check=False)
            if nginx_result.returncode == 0:
                print("Nginx √ßalƒ±≈üƒ±yor, durduruluyor...")
                run("systemctl stop nginx", check=False)
                run("systemctl disable nginx", check=False)
                run("pkill -f nginx", check=False)
                run("killall nginx", check=False)
                print("‚úÖ Nginx tamamen durduruldu")

            # Apache kontrol√º
            apache_result = run("systemctl is-active apache2", check=False)
            if apache_result.returncode == 0:
                print("Apache √ßalƒ±≈üƒ±yor, durduruluyor...")
                run("systemctl stop apache2", check=False)
                run("systemctl disable apache2", check=False)
                run("pkill -f apache2", check=False)
                print("‚úÖ Apache durduruldu")

            # Nginx konfig√ºrasyonunu devre dƒ±≈üƒ± bƒ±rak
            nginx_conf = Path("/etc/nginx/sites-enabled/default")
            if nginx_conf.exists():
                run(f"mv {nginx_conf} {nginx_conf}.backup", check=False)
                print("‚úÖ Nginx default site devre dƒ±≈üƒ± bƒ±rakƒ±ldƒ±")

    except BaseException:
        pass

    # Port 443 kontrol√º
    try:
        result = run("netstat -tuln | grep ':443 '", check=False)
        if result.stdout.strip():
            print("‚ö†Ô∏è  Port 443 kullanƒ±mda:")
            print(result.stdout.strip())
    except BaseException:
        pass


def ensure_http_listener_mapping(domain: str):
    if not HTTPD_CONF.exists():
        print(f"Bulunamadƒ±: {HTTPD_CONF}", file=sys.stderr)
        sys.exit(1)
    content = HTTPD_CONF.read_text(encoding="utf-8")

    # √ñnce 8088 portundaki Default listener'ƒ± temizle
    content = re.sub(
        r"listener\s+Default\s*\{\s*address\s+\*:8088.*?\n\}",
        "",
        content,
        flags=re.DOTALL,
    )

    # Duplicate Default listener'larƒ± temizle
    default_listeners = list(
        re.finditer(
            r"listener\s+Default\s*\{[^}]*address\s+\*:80[^}]*\}", content, re.DOTALL
        )
    )
    if len(default_listeners) > 1:
        # ƒ∞lkini koru, diƒüerlerini sil
        for match in default_listeners[1:]:
            content = content.replace(match.group(0), "")

    map_block = f"map                     {domain} {domain}"
    listener_pattern = r"listener\s+Default\s*\{[^}]*address\s+\*:80[^}]*\}"
    m = re.search(listener_pattern, content, re.DOTALL)

    if not m:
        # Eksikse, Default HTTP listener'ƒ± olu≈ütur
        default_listener = f"""
listener Default {{
    address                 *:80
    secure                  0
    {map_block}
}}
"""
        content = content.rstrip() + "\n" + default_listener
        HTTPD_CONF.write_text(content, encoding="utf-8")
        return

    block = m.group(0)
    if f"map                     {domain}" in block:
        return

    new_block = block.rstrip("}\n") + f"\n    {map_block}\n}}"
    new_content = content.replace(block, new_block)
    HTTPD_CONF.write_text(new_content, encoding="utf-8")


def ensure_https_listener_mapping(domain: str):
    """HTTPS listener mapping ekle"""
    if not HTTPD_CONF.exists():
        return
    content = HTTPD_CONF.read_text(encoding="utf-8")

    # Duplicate SSL listener'larƒ± temizle
    ssl_listeners = list(
        re.finditer(
            r"listener\s+SSL\s*\{[^}]*address\s+\*:443[^}]*\}", content, re.DOTALL
        )
    )
    if len(ssl_listeners) > 1:
        # ƒ∞lkini koru, diƒüerlerini sil
        for match in ssl_listeners[1:]:
            content = content.replace(match.group(0), "")

    # HTTPS listener kontrol√º
    https_listener_pattern = r"listener\s+SSL\s*\{[^}]*address\s+\*:443[^}]*\}"
    m = re.search(https_listener_pattern, content, re.DOTALL)
    ssl_cert = f"/etc/letsencrypt/live/{domain}/fullchain.pem"
    ssl_key = f"/etc/letsencrypt/live/{domain}/privkey.pem"
    map_block = f"map                     {domain} {domain}"
        
    if not m:
        # HTTPS listener olu≈ütur
        https_listener = f"""
listener SSL {{
    address                 *:443
    secure                  1
    keyFile                 {ssl_key}
    certFile                {ssl_cert}
    certChain               1
    sslProtocol             24
    ciphers                 EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
    enableECDHE             1
    renegProtection         1
    sslSessionCache         1
    sslSessionTickets       1
    enableSpdy              15
    enableQuic              1
    {map_block}
}}
"""
        content = content.rstrip() + "\n" + https_listener
        HTTPD_CONF.write_text(content, encoding="utf-8")
    else:
        # Mevcut HTTPS listener'a domain ekle
        block = m.group(0)
        if f"map                     {domain}" in block:
            return
        new_block = block.rstrip("}\n") + f"\n    {map_block}\n}}"


def load_template(template_path: Path) -> str:
    """Template dosyasƒ±nƒ± y√ºkle"""
    # Ana template dizini
    main_template = ISPANEL_TEMPLATES_DIR / template_path.name
    if main_template.exists():
        return main_template.read_text(encoding="utf-8")

    # Alternatif konumlarƒ± dene
    for alt_dir in [
        Path(__file__).parent / "templates",  # Geli≈ütirme dizini
        Path("/root/ispanel/templates"),  # Eski konum
        TEMPLATE_DIR,  # Env deƒüi≈ükeninden gelen
    ]:
        template_file = alt_dir / template_path.name
        if template_file.exists():
            return template_file.read_text(encoding="utf-8")

    raise FileNotFoundError(f"Template bulunamadƒ±: {template_path}")


def write_vhost_conf(domain: str, docroot: Path):
    vdir = VHOSTS_DIR / domain
    vdir.mkdir(parents=True, exist_ok=True)
    vconf = vdir / "vhost.conf"

    vh_root = docroot.parent

    log_dir = vh_root / "logs"
    log_dir.mkdir(parents=True, exist_ok=True)
    (log_dir / "access.log").touch(exist_ok=True)
    (log_dir / "error.log").touch(exist_ok=True)

    cgi_dir = vh_root / "cgi-bin"
    cgi_dir.mkdir(parents=True, exist_ok=True)

    protected_dir = docroot / "protected"
    protected_dir.mkdir(parents=True, exist_ok=True)

    awstats_dir = vh_root / "awstats"
    awstats_dir.mkdir(parents=True, exist_ok=True)

    template = load_template(VHOST_TEMPLATE)
    conf = template.format(
        domain=domain, docroot=str(docroot), default_lsphp=DEFAULT_LSPHP_VERSION
    )
    conf = f"vhDomain {domain}\n" + conf

    vconf.write_text(conf, encoding="utf-8")

    # Vhost dizini izinleri
    run(f"chown -R lsadm:nogroup {vdir}", check=True)
    run(f"chmod -R 755 {vdir}", check=True)

    # Domain root ve public_html izinleri
    run(f"chown -R lsadm:nogroup {vh_root}", check=False)
    run(f"chmod 755 {vh_root}", check=False)
    run(f"chmod 755 {docroot}", check=False)

    # Dosya ve dizin izinlerini d√ºzelt
    run(f"find {docroot} -type f -exec chmod 644 {{}} +", check=False)
    run(f"find {docroot} -type d -exec chmod 755 {{}} +", check=False)


def ensure_virtual_host_reference(domain: str):
    """httpd_config.conf i√ßine virtualHost referansƒ± ekle."""
    if not HTTPD_CONF.exists():
        print(f"Bulunamadƒ±: {HTTPD_CONF}", file=sys.stderr)
        sys.exit(1)
    content = HTTPD_CONF.read_text(encoding="utf-8")

    # Virtual Host Root'u da ekle
    docroot = DOCROOT_BASE / domain
    vhost_ref = (
        f"virtualHost {domain} {{\n"
        f"    vhRoot                  {docroot}\n"
        f"    configFile              conf/vhosts/{domain}/vhost.conf\n"
        f"    allowSymbolLink         1\n"
        f"    enableScript            1\n"
        f"    restrained              1\n"
        f"}}\n"
    )
    # Zaten var mƒ± kontrol et (virtualHost domain satƒ±rƒ± baz alƒ±nƒ±r)
    if re.search(rf"virtualHost\s+{re.escape(domain)}\b", content):
        return
    content = content.rstrip() + "\n\n" + vhost_ref
    HTTPD_CONF.write_text(content, encoding="utf-8")


def ensure_docroot(domain: str) -> Path:
    docroot = DOCROOT_BASE / domain / "public_html"
    docroot.mkdir(parents=True, exist_ok=True)
    index_file = docroot / "index.php"
    if not index_file.exists():
        # Profesyonel ve kurumsal default index.php olu≈ütur
        default_content = """<?php
// isPanel - Enterprise Web Hosting Management
// https://ispanel.com
?>
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo $_SERVER['HTTP_HOST']; ?> - Powered by isPanel</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #1e40af;
            --primary-light: #3b82f6;
            --primary-dark: #1e3a8a;
            --success: #10b981;
            --bg-primary: #ffffff;
            --bg-secondary: #f9fafb;
            --bg-tertiary: #f3f4f6;
            --text-primary: #111827;
            --text-secondary: #6b7280;
            --text-tertiary: #9ca3af;
            --border: #e5e7eb;
            --shadow: rgba(0, 0, 0, 0.05);
            --shadow-lg: rgba(0, 0, 0, 0.1);
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: var(--bg-secondary);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-primary);
            line-height: 1.6;
            -webkit-font-smoothing: antialiased;
        }

        .container {
            background: var(--bg-primary);
            border-radius: 16px;
            box-shadow: 0 20px 25px -5px var(--shadow-lg), 0 10px 10px -5px var(--shadow);
            padding: 4rem;
            max-width: 1024px;
            width: 95%;
            position: relative;
        }

        .accent-bar {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary) 0%, var(--primary-light) 100%);
            border-radius: 16px 16px 0 0;
        }

        .header {
            text-align: center;
            margin-bottom: 3rem;
        }

        .logo-wrapper {
            display: inline-flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .logo-icon {
            width: 48px;
            height: 48px;
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 700;
            font-size: 24px;
        }

        .logo-text {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-primary);
        }

        .domain {
            font-size: 1.875rem;
            font-weight: 300;
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
            letter-spacing: -0.025em;
        }

        .subtitle {
            color: var(--text-tertiary);
            font-size: 1rem;
            font-weight: 400;
        }

        .status-section {
            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
            border: 1px solid #bbf7d0;
            border-radius: 12px;
            padding: 2rem;
            margin: 2.5rem 0;
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }

        .status-icon {
            width: 56px;
            height: 56px;
            background: var(--success);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 28px;
            flex-shrink: 0;
        }

        .status-content h3 {
            color: #065f46;
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .status-content p {
            color: #047857;
            font-size: 0.875rem;
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 2rem;
            margin: 3rem 0;
        }

        .feature-card {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 2rem;
            text-align: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .feature-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, var(--primary) 0%, var(--primary-light) 100%);
            transform: translateX(-100%);
            transition: transform 0.3s ease;
        }

        .feature-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 25px -5px var(--shadow-lg), 0 10px 10px -5px var(--shadow);
            border-color: var(--primary-light);
        }

        .feature-card:hover::before {
            transform: translateX(0);
        }

        .feature-icon {
            width: 64px;
            height: 64px;
            margin: 0 auto 1.5rem;
            background: var(--bg-tertiary);
            border-radius: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 32px;
            color: var(--primary);
        }

        .feature-card h4 {
            color: var(--text-primary);
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .feature-card p {
            color: var(--text-secondary);
            font-size: 0.875rem;
            line-height: 1.5;
        }

        .stats-section {
            background: var(--bg-tertiary);
            border-radius: 12px;
            padding: 2rem;
            margin: 2.5rem 0;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 2rem;
            text-align: center;
        }

        .stat-item {
            padding: 1rem;
        }

        .stat-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--primary);
            line-height: 1;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: var(--text-secondary);
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            font-weight: 500;
        }

        .tech-stack {
            margin: 2.5rem 0;
        }

        .tech-stack h4 {
            color: var(--text-primary);
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            text-align: center;
        }

        .tech-items {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            justify-content: center;
        }

        .tech-badge {
            background: var(--bg-primary);
            border: 2px solid var(--border);
            border-radius: 8px;
            padding: 0.75rem 1.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--text-secondary);
            transition: all 0.2s ease;
        }

        .tech-badge:hover {
            border-color: var(--primary-light);
            color: var(--primary);
            transform: translateY(-2px);
        }

        .footer {
            text-align: center;
            margin-top: 4rem;
            padding-top: 2.5rem;
            border-top: 1px solid var(--border);
        }

        .footer-content {
            color: var(--text-tertiary);
            font-size: 0.875rem;
            margin-bottom: 1.5rem;
        }

        .footer-links {
            display: flex;
            justify-content: center;
            gap: 3rem;
            flex-wrap: wrap;
        }

        .footer-link {
            color: var(--primary);
            text-decoration: none;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: color 0.2s ease;
        }

        .footer-link:hover {
            color: var(--primary-dark);
        }

        @media (max-width: 640px) {
            .container {
                padding: 2rem;
            }

            .features-grid {
                grid-template-columns: 1fr;
                gap: 1.5rem;
            }

            .stats-grid {
                grid-template-columns: 1fr 1fr;
            }

            .footer-links {
                flex-direction: column;
                gap: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="accent-bar"></div>

        <div class="header">
            <div class="logo-wrapper">
                <div class="logo-icon">iP</div>
                <div class="logo-text">isPanel</div>
            </div>
            <h1 class="domain"><?php echo $_SERVER['HTTP_HOST']; ?></h1>
            <p class="subtitle">Enterprise Web Hosting Management System</p>
        </div>

        <div class="status-section">
            <div class="status-icon">‚úì</div>
            <div class="status-content">
                <h3>System Operational</h3>
                <p>Your website is running smoothly on isPanel infrastructure with optimal performance</p>
            </div>
        </div>

        <div class="features-grid">
            <div class="feature-card">
                <div class="feature-icon">‚ö°</div>
                <h4>High Performance</h4>
                <p>Powered by OpenLiteSpeed for lightning-fast content delivery and optimal resource usage</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">üõ°Ô∏è</div>
                <h4>Enterprise Security</h4>
                <p>SSL certificates, advanced firewall rules, and continuous security monitoring</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">üéØ</div>
                <h4>Easy Management</h4>
                <p>Intuitive command-line interface with powerful automation capabilities</p>
            </div>
        </div>

        <div class="stats-section">
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value"><?php echo phpversion(); ?></div>
                    <div class="stat-label">PHP Version</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value"><?php
                        $load = sys_getloadavg();
                        echo number_format($load[0], 2);
                    ?></div>
                    <div class="stat-label">Load Average</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value"><?php
                        $uptime = shell_exec('uptime -p 2>/dev/null');
                        if ($uptime) {
                            preg_match('/(\\d+)\\s*day/', $uptime, $matches);
                            echo isset($matches[1]) ? $matches[1] : '0';
                        } else {
                            echo 'N/A';
                        }
                    ?></div>
                    <div class="stat-label">Days Uptime</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value"><?php echo date('H:i'); ?></div>
                    <div class="stat-label">Server Time</div>
                </div>
            </div>
        </div>

        <div class="tech-stack">
            <h4>Technology Stack</h4>
            <div class="tech-items">
                <div class="tech-badge">OpenLiteSpeed</div>
                <div class="tech-badge">PHP <?php echo phpversion(); ?></div>
                <div class="tech-badge">MariaDB</div>
                <div class="tech-badge">Let's Encrypt SSL</div>
                <div class="tech-badge">Ubuntu Server</div>
                <div class="tech-badge">HTTP/3 QUIC</div>
            </div>
        </div>

        <div class="footer">
            <p class="footer-content">
                &copy; <?php echo date('Y'); ?> isPanel - Enterprise Web Hosting Management System
            </p>
            <div class="footer-links">
                <a href="https://ispanel.com" target="_blank" class="footer-link">
                    <span>üåê</span>
                    <span>Official Website</span>
                </a>
                <a href="https://github.com/ismailaydemiriu/ispanel" target="_blank" class="footer-link">
                    <span>üì¶</span>
                    <span>GitHub Repository</span>
                </a>
                <a href="https://ispanel.com/docs" target="_blank" class="footer-link">
                    <span>üìö</span>
                    <span>Documentation</span>
                </a>
            </div>
        </div>
    </div>
</body>
</html>"""
        index_file.write_text(default_content, encoding="utf-8")

    # ƒ∞zinleri d√ºzelt
    domain_root = DOCROOT_BASE / domain
    run(f"chown -R lsadm:nogroup {domain_root}", check=False)
    run(f"chmod 755 {domain_root}", check=False)
    run(f"chmod 755 {docroot}", check=False)
    run(f"find {docroot} -type f -exec chmod 644 {{}} +", check=False)
    run(f"find {docroot} -type d -exec chmod 755 {{}} +", check=False)

    return docroot


def domain_add(domain: str):
    if not re.match(r"^[A-Za-z0-9.-]+$", domain):
        print("Ge√ßersiz domain.", file=sys.stderr)
        sys.exit(1)
    if not LSWS_CONF_DIR.exists():
        print("OpenLiteSpeed kurulu deƒüil gibi g√∂r√ºn√ºyor.", file=sys.stderr)
        sys.exit(1)
    
    # Nginx √ßakƒ±≈ümasƒ±nƒ± kontrol et ve durdur
    stop_nginx_if_running()

    # PHP handler'larƒ± kontrol et
    ensure_php_handlers()
    
    docroot = ensure_docroot(domain)
    write_vhost_conf(domain, docroot)
    ensure_virtual_host_reference(domain)
    ensure_http_listener_mapping(domain)
    
    # SSL sertifikasƒ± olu≈ütur (Let's Encrypt)
    if shutil.which("certbot") and os.environ.get("ISPANEL_SKIP_CERTBOT") != "1":
        try:
            print(f"SSL sertifikasƒ± olu≈üturuluyor: {domain}")
            run(
                f"certbot certonly --standalone -d {domain} --non-interactive --agree-tos --email admin@{domain}",
                check=False,
            )
            
            # SSL konfig√ºrasyonunu OpenLiteSpeed'e ekle
            ssl_cert = f"/etc/letsencrypt/live/{domain}/fullchain.pem"
            ssl_key = f"/etc/letsencrypt/live/{domain}/privkey.pem"
            
            if Path(ssl_cert).exists() and Path(ssl_key).exists():
                # HTTPS listener ekle
                ensure_https_listener_mapping(domain)
                print(f"SSL sertifikasƒ± ba≈üarƒ±yla olu≈üturuldu: {domain}")
        except BaseException:
            print(f"SSL sertifikasƒ± olu≈üturulamadƒ±: {domain}")
    
    # PHP test dosyasƒ± olu≈ütur
    test_file = docroot / "test.php"
    test_content = """<?php
// isPanel PHP Test
echo "<h1>PHP √áalƒ±≈üƒ±yor!</h1>";
echo "<p>PHP Version: " . phpversion() . "</p>";
echo "<p>Server: " . $_SERVER['SERVER_SOFTWARE'] . "</p>";
echo "<p>Domain: " . $_SERVER['HTTP_HOST'] . "</p>";
echo "<hr>";
phpinfo();
?>"""
    test_file.write_text(test_content, encoding="utf-8")
    run(f"chmod 644 {test_file}", check=False)
    
    reload_lsws()
    print(f"‚úÖ Domain eklendi: {domain}")
    print(f"   Document root: {docroot}")
    print(f"   PHP Test: http://{domain}/test.php")
    print(f"   HTTPS: https://{domain} (SSL varsa)")


def set_domain_php_version(domain: str, version: str):
    """Domain i√ßin PHP s√ºr√ºm√ºn√º (82/83) ayarla"""
    vconf = VHOSTS_DIR / domain / "vhost.conf"
    if not vconf.exists():
        print("Vhost config bulunamadƒ±.", file=sys.stderr)
        return

    # vhost.conf i√ßeriƒüini oku
    content = vconf.read_text(encoding="utf-8")

    # scriptHandler b√∂l√ºm√ºn√º g√ºncelle
    content = re.sub(
        r"add\s+lsapi:lsphp\d+\s+php",
        f"add                    lsapi:lsphp{version} php",
        content,
    )

    # PHP context'ini de g√ºncelle (eƒüer varsa)
    content = re.sub(r"handler\s+lsphp\d+", f"handler lsphp{version}", content)

    vconf.write_text(content, encoding="utf-8")
    reload_lsws()
    print(f"‚úÖ {domain} i√ßin PHP {version[0]}.{version[1]} olarak ayarlandƒ±.")


def toggle_http3_brotli(enable: bool):
    """HTTP/3 (QUIC) ve Brotli sƒ±kƒ±≈ütƒ±rmayƒ± a√ß/kapat"""
    if not HTTPD_CONF.exists():
        print("httpd_config.conf bulunamadƒ±.", file=sys.stderr)
        return
    content = HTTPD_CONF.read_text(encoding="utf-8")
    # HTTP/3 QUIC ayarƒ± listener SSL i√ßinde enableQuic 1/0
    content = re.sub(
        r"enableQuic\s+\d",
        f"enableQuic              {'1' if enable else '0'}",
        content,
    )
    HTTPD_CONF.write_text(content, encoding="utf-8")

    # Brotli: global conf'a ek basit bayrak (OLS'te mod_brotli yoksa gzip
    # kullanƒ±labilir; burada √∂rnek bayrak koyuyoruz)
    brotli_marker = "# ispanel_brotli_enabled"
    if enable:
        if brotli_marker not in content:
            with open(HTTPD_CONF, "a", encoding="utf-8") as f:
                f.write(
                    f"\n{brotli_marker}\n# Brotli etkin: statik i√ßerik i√ßin harici reverse proxy veya mod eklentisi gerekebilir.\n"
                )
    else:
        newc = (
            Path(HTTPD_CONF)
            .read_text(encoding="utf-8")
            .replace(brotli_marker + "\n", "")
        )
        Path(HTTPD_CONF).write_text(newc, encoding="utf-8")
    reload_lsws()
    print(f"HTTP/3 {'a√ßƒ±ldƒ±' if enable else 'kapandƒ±'}; Brotli {'i≈üaretlendi' if enable else 'devre dƒ±≈üƒ±'}.")


def ols_php_menu():
    while True:
        print("\n--- OLS/PHP Ayarlarƒ± ---")
        print("1) Domain i√ßin PHP s√ºr√ºm√º ayarla (lsphp81/82/83)")
        print("2) HTTP/3 + Brotli a√ß")
        print("3) HTTP/3 + Brotli kapat")
        print("0) Geri")
        sub = input("Se√ßim: ").strip()
        if sub == "1":
            domain = input("Domain: ").strip()
            version = input("S√ºr√ºm (81/82/83): ").strip()
            if version not in {"81", "82", "83"}:
                print("Ge√ßersiz s√ºr√ºm")
            else:
                set_domain_php_version(domain, version)
        elif sub == "2":
            toggle_http3_brotli(True)
        elif sub == "3":
            toggle_http3_brotli(False)
        elif sub == "0":
            break
        else:
            print("Ge√ßersiz se√ßim")


def domain_remove(domain: str):
    vdir = VHOSTS_DIR / domain
    if vdir.exists():
        shutil.rmtree(vdir)

    if HTTPD_CONF.exists():
        content = HTTPD_CONF.read_text(encoding="utf-8")
        # HTTP listener'dan domain mapping'i sil
        content = re.sub(
            rf"\n\s*map\s+{re.escape(domain)}:80\s+{re.escape(domain)}\s*",
            "\n",
            content,
        )
        # HTTPS listener'dan domain mapping'i sil
        content = re.sub(
            rf"\n\s*map\s+{re.escape(domain)}:443\s+{re.escape(domain)}\s*",
            "\n",
            content,
        )
        # virtualHost referansƒ±nƒ± sil
        lines = content.split("\n")
        new_lines = []
        skip_until_brace = False
        for line in lines:
            if f"virtualHost {domain}" in line:
                skip_until_brace = True
                continue
            if skip_until_brace and line.strip() == "}":
                skip_until_brace = False
                continue
            if not skip_until_brace:
                new_lines.append(line)
        content = "\n".join(new_lines)
        HTTPD_CONF.write_text(content, encoding="utf-8")
    reload_lsws()
    print(f"Domain silindi: {domain}")


# ---------- MariaDB y√∂netimi ----------


def mysql_exec(sql: str):
    # MySQL root ≈üifresini g√ºvenli ≈üekilde kullan
    if MYSQL_ROOT_PASSWORD:
        # --password= parametresi ile ≈üifreyi g√ºvenli ≈üekilde ge√ß
        run(f'mysql -uroot --password={MYSQL_ROOT_PASSWORD} -e "{sql}"', check=True)
    else:
        run(f'mysql -uroot -e "{sql}"', check=True)


def db_create(db: str, user: str, password: str):
    if not re.match(r"^[A-Za-z0-9_]+$", db):
        print("Ge√ßersiz veritabanƒ± adƒ±.", file=sys.stderr)
        sys.exit(1)
    if not re.match(r"^[A-Za-z0-9_]+$", user):
        print("Ge√ßersiz kullanƒ±cƒ± adƒ±.", file=sys.stderr)
        sys.exit(1)
    sql = (
        f"CREATE DATABASE IF NOT EXISTS `{db}` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; "
        f"CREATE USER IF NOT EXISTS '{user}'@'%' IDENTIFIED BY '{password}'; "
        f"GRANT ALL PRIVILEGES ON `{db}`.* TO '{user}'@'%'; FLUSH PRIVILEGES;"
    )
    mysql_exec(sql)
    print(f"DB olu≈üturuldu: {db}, kullanƒ±cƒ±: {user}")


def db_delete(db: str, user: str):
    sql = (
        f"DROP DATABASE IF EXISTS `{db}`; "
        f"DROP USER IF EXISTS '{user}'@'%'; FLUSH PRIVILEGES;"
    )
    mysql_exec(sql)
    print(f"DB silindi: {db}, kullanƒ±cƒ±: {user}")


def db_user_create(user: str, password: str, host: str = "%"):
    if not re.match(r"^[A-Za-z0-9_]+$", user):
        print("Ge√ßersiz kullanƒ±cƒ± adƒ±.", file=sys.stderr)
        sys.exit(1)
    sql = (
        f"CREATE USER IF NOT EXISTS '{user}'@'{host}' IDENTIFIED BY '{password}'; "
        f"FLUSH PRIVILEGES;"
    )
    mysql_exec(sql)
    print(f"Kullanƒ±cƒ± olu≈üturuldu: {user}@{host}")


def reset_mysql_root_password():
    print("MySQL root ≈üifresi sƒ±fƒ±rlanƒ±yor...")
    new_password = input("Yeni root ≈üifresi: ").strip()
    if not new_password:
        print("≈ûifre bo≈ü olamaz!")
        return
    
    # MySQL servisini durdur
    run("systemctl stop mariadb", check=False)
    
    # G√ºvenli modda MySQL ba≈ülat
    run("mysqld_safe --skip-grant-tables --skip-networking &", check=False)
    time.sleep(3)
    
    # Root ≈üifresini sƒ±fƒ±rla
    sql = f"ALTER USER 'root'@'localhost' IDENTIFIED BY '{new_password}';"
    run(f'mysql -u root -e "{sql}"', check=True)
    
    # MySQL'i normal modda yeniden ba≈ülat
    run("pkill mysqld", check=False)
    time.sleep(2)
    run("systemctl start mariadb", check=True)
    
    # Global deƒüi≈ükeni g√ºncelle
    global MYSQL_ROOT_PASSWORD
    MYSQL_ROOT_PASSWORD = new_password
    
    # Konfig√ºrasyon dosyasƒ±nƒ± g√ºncelle
    save_config()
    
    # /root/.my.cnf dosyasƒ±nƒ± g√ºncelle
    mysql_conf = Path("/root/.my.cnf")
    mysql_conf.write_text(
        f"""[client]
user=root
password={new_password}
""",
        encoding="utf-8",
    )
    mysql_conf.chmod(0o600)
    
    print("‚úÖ MySQL root ≈üifresi ba≈üarƒ±yla sƒ±fƒ±rlandƒ±!")
    print("‚úÖ Konfig√ºrasyon dosyasƒ± g√ºncellendi!")
    print("‚úÖ /root/.my.cnf dosyasƒ± g√ºncellendi!")


def reset_openlitespeed_admin_password():
    print("OpenLiteSpeed admin ≈üifresi sƒ±fƒ±rlanƒ±yor...")
    new_password = input("Yeni admin ≈üifresi: ").strip()
    if not new_password:
        print("≈ûifre bo≈ü olamaz!")
        return
    
    if len(new_password) < 6:
        print("≈ûifre en az 6 karakter olmalƒ±!")
        return
    
    # OpenLiteSpeed admin ≈üifresini sƒ±fƒ±rla
    admin_script = "/usr/local/lsws/admin/misc/admpass.sh"
    if not Path(admin_script).exists():
        print("OpenLiteSpeed admin scripti bulunamadƒ±!", file=sys.stderr)
        return
    try:
        # OLS'nin kendi admpass.sh script'ini kullan
        print("Admin ≈üifresi ayarlanƒ±yor...")

        # Script'i interaktif olmadan √ßalƒ±≈ütƒ±rmak i√ßin expect kullan
        if not shutil.which("expect"):
            print("expect y√ºkleniyor...")
            run("apt-get update", check=True)
            run("apt-get install -y expect", check=True)

        # Expect script olu≈ütur
        expect_script = f"""#!/usr/bin/expect -f
        set timeout 10
        spawn {admin_script}
        expect "Please specify the user name of administrator:"
        send "admin\\r"
        expect "Please specify the administrator's password:"
        send "{new_password}\\r"
        expect "Retype password:"
        send "{new_password}\\r"
        expect eof
        """

        # Ge√ßici expect dosyasƒ± olu≈ütur
        import tempfile

        with tempfile.NamedTemporaryFile(mode="w", suffix=".exp", delete=False) as f:
            f.write(expect_script)
            temp_file = f.name

        # Script'i √ßalƒ±≈ütƒ±rƒ±labilir yap ve √ßalƒ±≈ütƒ±r
        run(f"chmod +x {temp_file}", check=True)
        run(f"expect {temp_file}", check=True)

        # Ge√ßici dosyayƒ± sil
        Path(temp_file).unlink()

        # OpenLiteSpeed'i yeniden ba≈ülat
        print("OpenLiteSpeed yeniden ba≈ülatƒ±lƒ±yor...")
        run("/usr/local/lsws/bin/lswsctrl restart", check=True)

        print("‚úÖ OpenLiteSpeed admin ≈üifresi ba≈üarƒ±yla sƒ±fƒ±rlandƒ±!")
        print(f"Admin panel: https://SERVER_IP:7080")
        print(f"Kullanƒ±cƒ±: admin")
        print(f"≈ûifre: {new_password}")

    except subprocess.CalledProcessError as e:
        print(f"≈ûifre sƒ±fƒ±rlama hatasƒ±: {e}")
        print("Manuel olarak ≈üu komutu √ßalƒ±≈ütƒ±rabilirsiniz:")
        print(f"sudo {admin_script}")
    except Exception as e:
        print(f"Beklenmeyen hata: {e}")


def check_port(port):
    """Port kullanƒ±mƒ±nƒ± kontrol et"""
    try:
        result = run(f"netstat -tuln | grep ':{port} '", check=False)
        return bool(result.stdout.strip())
    except BaseException:
        return False


def manage_firewall():
    """Firewall y√∂netimi"""
    print("Firewall y√∂netimi...")
    
    # UFW kontrol√º
    if shutil.which("ufw"):
        print("UFW firewall y√∂netiliyor...")
        ports = [20, 21, 22, 80, 443, 7080, 8088]
        for port in ports:
            run(f"ufw allow {port}/tcp", check=False)
        run("ufw --force enable", check=False)
    else:
        print("UFW bulunamadƒ±, iptables kullanƒ±lƒ±yor...")
        # iptables kurallarƒ±
        run("iptables -I INPUT -p tcp --dport 20 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 21 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 22 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 80 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 443 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 7080 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 8088 -j ACCEPT", check=False)


def install_ssl_support():
    """SSL/HTTPS desteƒüi kurulumu"""
    print("SSL/HTTPS desteƒüi kuruluyor...")
    wait_for_apt()
    
    # Certbot kurulumu (OpenLiteSpeed i√ßin)
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y certbot", check=True)

    # Fail2Ban kurulumu ve temel konfig√ºrasyon
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y fail2ban", check=False)
    jail_local = """
[nginx-http-auth]
enabled = true
port     = http,https
filter   = nginx-http-auth
logpath  = /usr/local/lsws/logs/error.log
maxretry = 3

[sshd]
enabled = true

[recidive]
enabled = true
""".strip()
    jail_path = Path("/etc/fail2ban/jail.local")
    jail_path.write_text(jail_local, encoding="utf-8")
    run("systemctl enable fail2ban", check=False)
    run("systemctl restart fail2ban", check=False)
    
    # OpenLiteSpeed i√ßin SSL konfig√ºrasyonu
    ssl_dir = Path("/usr/local/lsws/conf/cert")
    ssl_dir.mkdir(exist_ok=True)
    
    print(
        "SSL ve Fail2Ban desteƒüi kuruldu. Let's Encrypt sertifikalarƒ± domain ekleme sƒ±rasƒ±nda otomatik olu≈üturulacak."
    )


def secure_mariadb():
    """Varsayƒ±lan g√ºvenlik iyile≈ütirmeleri (mevcut fonksiyon placeholder)."""
    pass
    """MariaDB g√ºvenlik ayarlarƒ±"""
    print("MariaDB g√ºvenlik ayarlarƒ± yapƒ±lƒ±yor...")
    
    # mysql_secure_installation benzeri i≈ülemler
    # Root ≈üifresi zaten install_mariadb'de ayarlandƒ±
    try:
        # G√ºvenlik komutlarƒ±nƒ± doƒürudan √ßalƒ±≈ütƒ±r
        sql_commands = [
            "DELETE FROM mysql.user WHERE User='';",
            "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');",
            "DROP DATABASE IF EXISTS test;",
            "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';",
            "FLUSH PRIVILEGES;",
        ]

        # Root ≈üifresi ile baƒülan
        password = MYSQL_ROOT_PASSWORD if MYSQL_ROOT_PASSWORD else ""
    
        for sql in sql_commands:
            if password:
                run(f'mysql -uroot -p{password} -e "{sql}"', check=False)
            else:
                run(f'mysql -uroot -e "{sql}"', check=False)

        print("‚úÖ MariaDB g√ºvenlik ayarlarƒ± tamamlandƒ±.")
    except Exception as e:
        print(f"MariaDB g√ºvenlik ayarlarƒ± uyarƒ±sƒ±: {e}")
        print("MariaDB zaten g√ºvenli durumda olabilir.")


def ensure_php_handlers():
    """PHP handler ve extProcessor tanƒ±mlarƒ±nƒ± kontrol et ve ekle"""
    if not HTTPD_CONF.exists():
        return

    content = HTTPD_CONF.read_text(encoding="utf-8")

    # extProcessor tanƒ±mlarƒ± - PHP 8.2
    if "extProcessor lsphp82" not in content:
        lsphp82_config = """
extProcessor lsphp82 {
    type                            lsapi
    address                         uds://tmp/lshttpd/lsphp.sock
    maxConns                        10
    env                             PHP_LSAPI_CHILDREN=10
    env                             LSAPI_AVOID_FORK=200M
    initTimeout                     60
    retryTimeout                    0
    persistConn                     1
    respBuffer                      0
    autoStart                       1
    path                            lsphp82/bin/lsphp
    backlog                         100
    instances                       1
    priority                        0
    memSoftLimit                    2047M
    memHardLimit                    2047M
    procSoftLimit                   1400
    procHardLimit                   1500
}
"""
        # scriptHandler'dan √∂nce ekle
        if "scriptHandler" in content:
            content = content.replace(
                "scriptHandler", lsphp82_config + "\nscriptHandler"
            )
        else:
            content += lsphp82_config

    # extProcessor tanƒ±mlarƒ± - PHP 8.3
    if "extProcessor lsphp83" not in content:
        lsphp83_config = """
extProcessor lsphp83 {
    type                            lsapi
    address                         uds://tmp/lshttpd/lsphp.sock
    maxConns                        10
    env                             PHP_LSAPI_CHILDREN=10
    env                             LSAPI_AVOID_FORK=200M
    initTimeout                     60
    retryTimeout                    0
    persistConn                     1
    respBuffer                      0
    autoStart                       1
    path                            lsphp83/bin/lsphp
    backlog                         100
    instances                       1
    priority                        0
    memSoftLimit                    2047M
    memHardLimit                    2047M
    procSoftLimit                   1400
    procHardLimit                   1500
}
"""
        # scriptHandler'dan √∂nce ekle
        if "scriptHandler" in content:
            content = content.replace(
                "scriptHandler", lsphp83_config + "\nscriptHandler"
            )
        else:
            content += lsphp83_config

    # Varsayƒ±lan lsphp extProcessor
    if "extProcessor lsphp {" not in content:
        default_lsphp_config = f"""
extProcessor lsphp {{
    type                            lsapi
    address                         uds://tmp/lshttpd/lsphp.sock
    maxConns                        10
    env                             PHP_LSAPI_CHILDREN=10
    env                             LSAPI_AVOID_FORK=200M
    initTimeout                     60
    retryTimeout                    0
    persistConn                     1
    respBuffer                      0
    autoStart                       1
    path                            lsphp{DEFAULT_LSPHP_VERSION}/bin/lsphp
    backlog                         100
    instances                       1
    priority                        0
    memSoftLimit                    2047M
    memHardLimit                    2047M
    procSoftLimit                   1400
    procHardLimit                   1500
}}
"""
        # scriptHandler'dan √∂nce ekle
        if "scriptHandler" in content:
            content = content.replace(
                "scriptHandler", default_lsphp_config + "\nscriptHandler"
            )
        else:
            content += default_lsphp_config

    # scriptHandler kontrol√º
    if "scriptHandler" not in content or "add lsapi:lsphp  php" not in content:
        if "scriptHandler" not in content:
            content += """
scriptHandler {
    add lsapi:lsphp  php
}
"""
        else:
            # scriptHandler var ama php handler'ƒ± yok
            content = re.sub(
                r"scriptHandler\s*\{[^}]*\}",
                "scriptHandler {\n    add lsapi:lsphp  php\n}",
                content,
            )

    HTTPD_CONF.write_text(content, encoding="utf-8")
    print("‚úÖ PHP handler'lar yapƒ±landƒ±rƒ±ldƒ±")


def optimize_openlitespeed():
    """OpenLiteSpeed performans optimizasyonu"""
    print("OpenLiteSpeed performans optimizasyonu yapƒ±lƒ±yor...")
    
    # Sistem kaynaklarƒ±nƒ± analiz et
    print("üîç Sistem kaynaklarƒ± analiz ediliyor...")
    
    # RAM miktarƒ±nƒ± al (GB cinsinden)
    try:
        with open("/proc/meminfo", "r") as f:
            meminfo = f.read()
        total_mem_kb = int(re.search(r"MemTotal:\s+(\d+)", meminfo).group(1))
        total_mem_gb = total_mem_kb / 1024 / 1024
    except:
        total_mem_gb = 4  # Varsayƒ±lan 4GB
    
    # CPU √ßekirdek sayƒ±sƒ±nƒ± al
    try:
        cpu_cores = os.cpu_count() or 4
    except:
        cpu_cores = 4  # Varsayƒ±lan 4 √ßekirdek
    
    print(f"üíæ RAM: {total_mem_gb:.1f}GB")
    print(f"üñ•Ô∏è  CPU √áekirdek: {cpu_cores}")
    
    # PHP_LSAPI_CHILDREN hesapla (CPU √ßekirdek sayƒ±sƒ±na g√∂re)
    php_children = min(max(cpu_cores * 2, 4), 32)  # 4-32 arasƒ±
    
    # LSAPI_AVOID_FORK hesapla (RAM miktarƒ±na g√∂re)
    if total_mem_gb >= 16:
        avoid_fork = "512M"
    elif total_mem_gb >= 8:
        avoid_fork = "256M"
    elif total_mem_gb >= 4:
        avoid_fork = "128M"
    else:
        avoid_fork = "64M"
    
    # maxConnections hesapla (RAM ve CPU'ya g√∂re)
    if total_mem_gb >= 16 and cpu_cores >= 8:
        max_conn = "20000"
    elif total_mem_gb >= 8 and cpu_cores >= 4:
        max_conn = "15000"
    elif total_mem_gb >= 4 and cpu_cores >= 2:
        max_conn = "10000"
    else:
        max_conn = "5000"
    
    print(f"‚öôÔ∏è  PHP_LSAPI_CHILDREN: {php_children}")
    print(f"‚öôÔ∏è  LSAPI_AVOID_FORK: {avoid_fork}")
    print(f"‚öôÔ∏è  maxConnections: {max_conn}")
    
    # Konfig√ºrasyon dosyasƒ± optimizasyonlarƒ±
    if HTTPD_CONF.exists():
        content = HTTPD_CONF.read_text(encoding="utf-8")
        
        # Performans ayarlarƒ±
        optimizations = {
            "maxConnections": max_conn,
            "maxSSLConnections": max_conn,
            "connTimeout": "300",
            "maxKeepAliveReq": "10000",
            "keepAliveTimeout": "5",
            "enableGzipCompress": "1",
            "enableBrCompress": "4",
            "quicEnable": "1",
        }

        for key, value in optimizations.items():
            pattern = rf"{key}\s+\d+"
            replacement = f"{key} {value}"
            content = re.sub(pattern, replacement, content)

        HTTPD_CONF.write_text(content, encoding="utf-8")

    # PHP handler'larƒ± kontrol et ve optimize et
    ensure_php_handlers()
    
    # PHP konfig√ºrasyonunu optimize et
    optimize_php_lsapi(php_children, avoid_fork)
    
    # PHP performans optimizasyonu
    optimize_php_performance(total_mem_gb, cpu_cores)
    
    # OpenLiteSpeed ek optimizasyonlarƒ±
    optimize_openlitespeed_advanced(total_mem_gb, cpu_cores)
    
    # Sistem seviyesi optimizasyonlar
    optimize_system_level(total_mem_gb, cpu_cores)
    
    # MySQL/MariaDB optimizasyonu
    optimize_mysql_performance(total_mem_gb, cpu_cores)
    
    print("‚úÖ OpenLiteSpeed performans optimizasyonu tamamlandƒ±.")
    print(f"üìä Optimizasyon √∂zeti:")
    print(f"   - PHP Children: {php_children}")
    print(f"   - Avoid Fork: {avoid_fork}")
    print(f"   - Max Connections: {max_conn}")
    print(f"   - PHP OPcache: Optimized")
    print(f"   - MySQL/MariaDB: Optimized")
    print(f"   - System Level: Optimized")


def optimize_php_lsapi(php_children: int, avoid_fork: str):
    """PHP LSAPI konfig√ºrasyonunu optimize et"""
    print("üîß PHP LSAPI konfig√ºrasyonu optimize ediliyor...")
    
    # PHP konfig√ºrasyon dosyalarƒ±nƒ± bul
    php_config_files = [
        "/usr/local/lsws/conf/php.ini",
        "/usr/local/lsws/lsphp82/etc/php/8.2/litespeed/php.ini",
        "/usr/local/lsws/lsphp83/etc/php/8.3/litespeed/php.ini",
    ]
    
    for config_file in php_config_files:
        if Path(config_file).exists():
            try:
                content = Path(config_file).read_text(encoding="utf-8")
                
                # PHP_LSAPI_CHILDREN ayarƒ±nƒ± ekle/g√ºncelle
                if "PHP_LSAPI_CHILDREN" not in content:
                    content += f"\n; isPanel Performance Optimization\nPHP_LSAPI_CHILDREN={php_children}\n"
                else:
                    content = re.sub(
                        r"PHP_LSAPI_CHILDREN\s*=\s*\d+",
                        f"PHP_LSAPI_CHILDREN={php_children}",
                        content
                    )
                
                # LSAPI_AVOID_FORK ayarƒ±nƒ± ekle/g√ºncelle
                if "LSAPI_AVOID_FORK" not in content:
                    content += f"LSAPI_AVOID_FORK={avoid_fork}\n"
                else:
                    content = re.sub(
                        r"LSAPI_AVOID_FORK\s*=\s*[\dM]+",
                        f"LSAPI_AVOID_FORK={avoid_fork}",
                        content
                    )
                
                Path(config_file).write_text(content, encoding="utf-8")
                print(f"‚úÖ {config_file} g√ºncellendi")
                
            except Exception as e:
                print(f"‚ö†Ô∏è  {config_file} g√ºncellenemedi: {e}")
    
    # Environment variables olarak da ayarla
    env_file = Path("/etc/environment")
    if env_file.exists():
        try:
            content = env_file.read_text(encoding="utf-8")
            
            # PHP_LSAPI_CHILDREN ekle/g√ºncelle
            if "PHP_LSAPI_CHILDREN" not in content:
                content += f"\nPHP_LSAPI_CHILDREN={php_children}\n"
            else:
                content = re.sub(
                    r"PHP_LSAPI_CHILDREN\s*=\s*\d+",
                    f"PHP_LSAPI_CHILDREN={php_children}",
                    content
                )
            
            # LSAPI_AVOID_FORK ekle/g√ºncelle
            if "LSAPI_AVOID_FORK" not in content:
                content += f"LSAPI_AVOID_FORK={avoid_fork}\n"
            else:
                content = re.sub(
                    r"LSAPI_AVOID_FORK\s*=\s*[\dM]+",
                    f"LSAPI_AVOID_FORK={avoid_fork}",
                    content
                )
            
            env_file.write_text(content, encoding="utf-8")
            print("‚úÖ /etc/environment g√ºncellendi")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  /etc/environment g√ºncellenemedi: {e}")
    
    print("‚úÖ PHP LSAPI optimizasyonu tamamlandƒ±")


def optimize_php_performance(total_mem_gb: float, cpu_cores: int):
    """PHP performans optimizasyonu"""
    print("üöÄ PHP performans optimizasyonu yapƒ±lƒ±yor...")
    
    # OPcache ayarlarƒ±nƒ± hesapla
    if total_mem_gb >= 16:
        opcache_memory = "256"
        opcache_files = "10000"
        opcache_strings = "16"
    elif total_mem_gb >= 8:
        opcache_memory = "128"
        opcache_files = "8000"
        opcache_strings = "8"
    elif total_mem_gb >= 4:
        opcache_memory = "64"
        opcache_files = "4000"
        opcache_strings = "4"
    else:
        opcache_memory = "32"
        opcache_files = "2000"
        opcache_strings = "2"
    
    # PHP konfig√ºrasyon dosyalarƒ±nƒ± bul
    php_config_files = [
        "/usr/local/lsws/conf/php.ini",
        "/usr/local/lsws/lsphp82/etc/php/8.2/litespeed/php.ini",
        "/usr/local/lsws/lsphp83/etc/php/8.3/litespeed/php.ini",
    ]
    
    for config_file in php_config_files:
        if Path(config_file).exists():
            try:
                content = Path(config_file).read_text(encoding="utf-8")
                
                # OPcache optimizasyonlarƒ±
                opcache_settings = {
                    "opcache.enable": "1",
                    "opcache.memory_consumption": opcache_memory,
                    "opcache.interned_strings_buffer": opcache_strings,
                    "opcache.max_accelerated_files": opcache_files,
                    "opcache.revalidate_freq": "2",
                    "opcache.fast_shutdown": "1",
                    "opcache.enable_cli": "1",
                    "opcache.validate_timestamps": "1",
                    "opcache.save_comments": "1",
                    "opcache.load_comments": "1",
                }
                
                # Her ayarƒ± g√ºncelle
                for setting, value in opcache_settings.items():
                    pattern = rf"{re.escape(setting)}\s*=\s*[^\n]*"
                    replacement = f"{setting} = {value}"
                    content = re.sub(pattern, replacement, content)
                    
                    # Eƒüer ayar yoksa ekle
                    if setting not in content:
                        content += f"\n{setting} = {value}\n"
                
                # PHP genel optimizasyonlarƒ±
                php_optimizations = {
                    "max_execution_time": "300",
                    "max_input_time": "300",
                    "memory_limit": f"{min(int(total_mem_gb * 128), 512)}M",
                    "post_max_size": "64M",
                    "upload_max_filesize": "64M",
                    "max_file_uploads": "20",
                    "max_input_vars": "3000",
                    "realpath_cache_size": "2M",
                    "realpath_cache_ttl": "600",
                }
                
                for setting, value in php_optimizations.items():
                    pattern = rf"{re.escape(setting)}\s*=\s*[^\n]*"
                    replacement = f"{setting} = {value}"
                    content = re.sub(pattern, replacement, content)
                    
                    if setting not in content:
                        content += f"\n{setting} = {value}\n"
                
                Path(config_file).write_text(content, encoding="utf-8")
                print(f"‚úÖ {config_file} PHP optimizasyonu tamamlandƒ±")
                
            except Exception as e:
                print(f"‚ö†Ô∏è  {config_file} PHP optimizasyonu ba≈üarƒ±sƒ±z: {e}")
    
    print("‚úÖ PHP performans optimizasyonu tamamlandƒ±")


def optimize_openlitespeed_advanced(total_mem_gb: float, cpu_cores: int):
    """OpenLiteSpeed geli≈ümi≈ü optimizasyonlarƒ±"""
    print("‚ö° OpenLiteSpeed geli≈ümi≈ü optimizasyonlarƒ± yapƒ±lƒ±yor...")
    
    if HTTPD_CONF.exists():
        try:
            content = HTTPD_CONF.read_text(encoding="utf-8")
            
            # Geli≈ümi≈ü optimizasyonlar
            advanced_optimizations = {
                "maxReqURLLen": "32768",
                "maxReqHeaderSize": "65536",
                "maxReqBodySize": "2047M",
                "maxDynRespHeaderSize": "32768",
                "maxDynRespSize": "2047M",
                "maxCachedFileSize": "2000000",
                "totalInMemCacheSize": "200M",
                "maxMMapFileSize": "256M",
                "useSendfile": "1",
                "fileETag": "2",
                "enableExpires": "1",
                "expiresByType": "text/css A2592000,application/javascript A2592000,image/png A2592000,image/jpg A2592000,image/gif A2592000,image/ico A2592000",
            }
            
            # Her optimizasyonu uygula
            for key, value in advanced_optimizations.items():
                pattern = rf"{key}\s+[^\n]*"
                replacement = f"{key} {value}"
                content = re.sub(pattern, replacement, content)
                
                # Eƒüer ayar yoksa ekle
                if key not in content:
                    content += f"\n{key} {value}\n"
            
            # Worker optimizasyonlarƒ±
            worker_optimizations = {
                "maxConnections": str(min(int(total_mem_gb * 1000), 20000)),
                "maxSSLConnections": str(min(int(total_mem_gb * 1000), 20000)),
                "connTimeout": "300",
                "maxKeepAliveReq": "10000",
                "keepAliveTimeout": "5",
                "sndBufSize": "0",
                "rcvBufSize": "0",
            }
            
            for key, value in worker_optimizations.items():
                pattern = rf"{key}\s+[^\n]*"
                replacement = f"{key} {value}"
                content = re.sub(pattern, replacement, content)
            
            HTTPD_CONF.write_text(content, encoding="utf-8")
            print("‚úÖ OpenLiteSpeed geli≈ümi≈ü optimizasyonlarƒ± tamamlandƒ±")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  OpenLiteSpeed geli≈ümi≈ü optimizasyon hatasƒ±: {e}")


def optimize_system_level(total_mem_gb: float, cpu_cores: int):
    """Sistem seviyesi optimizasyonlar"""
    print("üîß Sistem seviyesi optimizasyonlar yapƒ±lƒ±yor...")
    
    try:
        # Disk I/O optimizasyonu
        optimize_disk_io()
        
        # Network optimizasyonu
        optimize_network_settings(total_mem_gb, cpu_cores)
        
        # Kernel parametreleri
        kernel_params = {
            "net.core.rmem_max": "16777216",
            "net.core.wmem_max": "16777216",
            "net.ipv4.tcp_rmem": "4096 65536 16777216",
            "net.ipv4.tcp_wmem": "4096 65536 16777216",
            "net.core.netdev_max_backlog": "5000",
            "net.ipv4.tcp_congestion_control": "bbr",
            "vm.swappiness": "10",
            "vm.dirty_ratio": "15",
            "vm.dirty_background_ratio": "5",
            "fs.file-max": "2097152",
            "net.core.somaxconn": "65535",
        }
        
        # sysctl ayarlarƒ±nƒ± uygula
        for param, value in kernel_params.items():
            run(f"sysctl -w {param}={value}", check=False)
        
        # Kalƒ±cƒ± konfig√ºrasyon
        sysctl_config = "# isPanel System Optimization\n"
        for param, value in kernel_params.items():
            sysctl_config += f"{param} = {value}\n"
        
        Path("/etc/sysctl.d/99-ispanel.conf").write_text(sysctl_config, encoding="utf-8")
        
        # Limits optimizasyonu
        limits_config = f"""# isPanel Performance Limits
* soft nofile 65535
* hard nofile 65535
* soft nproc {cpu_cores * 1000}
* hard nproc {cpu_cores * 1000}
root soft nofile 65535
root hard nofile 65535
"""
        Path("/etc/security/limits.d/99-ispanel.conf").write_text(limits_config, encoding="utf-8")
        
        print("‚úÖ Sistem seviyesi optimizasyonlar tamamlandƒ±")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Sistem optimizasyon hatasƒ±: {e}")


def optimize_disk_io():
    """Disk I/O optimizasyonu"""
    print("üíæ Disk I/O optimizasyonu yapƒ±lƒ±yor...")
    
    try:
        # Disk t√ºr√ºn√º tespit et (SSD/HDD)
        disk_type = detect_disk_type()
        print(f"üîç Disk t√ºr√º tespit edildi: {disk_type}")
        
        # I/O scheduler ayarla
        optimize_io_scheduler(disk_type)
        
        # Read-ahead buffer ayarla
        optimize_read_ahead(disk_type)
        
        # File system mount options
        optimize_mount_options()
        
        print("‚úÖ Disk I/O optimizasyonu tamamlandƒ±")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Disk I/O optimizasyon hatasƒ±: {e}")


def detect_disk_type():
    """Disk t√ºr√ºn√º tespit et (SSD/HDD)"""
    try:
        # Root partition'ƒ± bul
        result = run("df / | tail -1 | awk '{print $1}'", check=True)
        root_partition = result.stdout.strip()
        
        # Disk t√ºr√ºn√º kontrol et
        result = run(f"cat /sys/block/{root_partition.split('/')[-1][:-1]}/queue/rotational", check=False)
        if result.returncode == 0:
            rotational = result.stdout.strip()
            return "SSD" if rotational == "0" else "HDD"
        else:
            return "UNKNOWN"
    except:
        return "UNKNOWN"


def optimize_io_scheduler(disk_type):
    """I/O scheduler'ƒ± optimize et"""
    try:
        # Disk'leri bul
        result = run("lsblk -d -o NAME,TYPE | grep disk | awk '{print $1}'", check=True)
        disks = result.stdout.strip().split('\n')
        
        for disk in disks:
            if disk:
                if disk_type == "SSD":
                    # SSD i√ßin noop scheduler
                    run(f"echo noop > /sys/block/{disk}/queue/scheduler", check=False)
                    print(f"‚úÖ {disk}: noop scheduler (SSD optimized)")
                else:
                    # HDD i√ßin deadline scheduler
                    run(f"echo deadline > /sys/block/{disk}/queue/scheduler", check=False)
                    print(f"‚úÖ {disk}: deadline scheduler (HDD optimized)")
    except Exception as e:
        print(f"‚ö†Ô∏è  I/O scheduler optimizasyon hatasƒ±: {e}")


def optimize_read_ahead(disk_type):
    """Read-ahead buffer'ƒ± optimize et"""
    try:
        # Disk'leri bul
        result = run("lsblk -d -o NAME,TYPE | grep disk | awk '{print $1}'", check=True)
        disks = result.stdout.strip().split('\n')
        
        for disk in disks:
            if disk:
                if disk_type == "SSD":
                    # SSD i√ßin d√º≈ü√ºk read-ahead
                    run(f"echo 128 > /sys/block/{disk}/queue/read_ahead_kb", check=False)
                    print(f"‚úÖ {disk}: 128KB read-ahead (SSD optimized)")
                else:
                    # HDD i√ßin y√ºksek read-ahead
                    run(f"echo 1024 > /sys/block/{disk}/queue/read_ahead_kb", check=False)
                    print(f"‚úÖ {disk}: 1024KB read-ahead (HDD optimized)")
    except Exception as e:
        print(f"‚ö†Ô∏è  Read-ahead optimizasyon hatasƒ±: {e}")


def optimize_mount_options():
    """File system mount options'ƒ± optimize et"""
    try:
        # /etc/fstab dosyasƒ±nƒ± yedekle
        run("cp /etc/fstab /etc/fstab.backup", check=False)
        
        # Fstab'ƒ± oku
        fstab_content = Path("/etc/fstab").read_text(encoding="utf-8")
        
        # Optimize edilmi≈ü mount options
        optimized_options = {
            "ext4": "noatime,nodiratime,data=writeback,barrier=0",
            "xfs": "noatime,nodiratime",
            "btrfs": "noatime,nodiratime,compress=lzo",
        }
        
        # Her satƒ±rƒ± kontrol et ve optimize et
        lines = fstab_content.split('\n')
        optimized_lines = []
        
        for line in lines:
            if line.strip() and not line.startswith('#'):
                parts = line.split()
                if len(parts) >= 4:
                    device, mount_point, fs_type, options = parts[:4]
                    
                    if fs_type in optimized_options:
                        # Mevcut options'ƒ± koru ve yeni ekle
                        new_options = f"{options},{optimized_options[fs_type]}"
                        line = line.replace(options, new_options)
                        print(f"‚úÖ {mount_point}: {fs_type} optimized")
            
            optimized_lines.append(line)
        
        # Optimize edilmi≈ü fstab'ƒ± yaz
        Path("/etc/fstab").write_text('\n'.join(optimized_lines), encoding="utf-8")
        print("‚úÖ Mount options optimized")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Mount options optimizasyon hatasƒ±: {e}")


def optimize_network_settings(total_mem_gb: float, cpu_cores: int):
    """Network optimizasyonu"""
    print("üåê Network optimizasyonu yapƒ±lƒ±yor...")
    
    try:
        # Network buffer'larƒ± hesapla
        if total_mem_gb >= 16:
            net_buffer = "33554432"  # 32MB
            tcp_window = "16777216"  # 16MB
        elif total_mem_gb >= 8:
            net_buffer = "16777216"  # 16MB
            tcp_window = "8388608"   # 8MB
        else:
            net_buffer = "8388608"   # 8MB
            tcp_window = "4194304"   # 4MB
        
        print(f"‚öôÔ∏è  Network Buffer: {net_buffer}")
        print(f"‚öôÔ∏è  TCP Window: {tcp_window}")
        
        # Network optimizasyon parametreleri
        network_params = {
            # TCP window scaling
            "net.ipv4.tcp_window_scaling": "1",
            "net.ipv4.tcp_timestamps": "1",
            "net.ipv4.tcp_sack": "1",
            
            # Network buffer sizes
            "net.core.rmem_max": net_buffer,
            "net.core.wmem_max": net_buffer,
            "net.ipv4.tcp_rmem": f"4096 65536 {tcp_window}",
            "net.ipv4.tcp_wmem": f"4096 65536 {tcp_window}",
            
            # Connection tracking
            "net.netfilter.nf_conntrack_max": str(cpu_cores * 10000),
            "net.netfilter.nf_conntrack_tcp_timeout_established": "1800",
            "net.netfilter.nf_conntrack_tcp_timeout_time_wait": "120",
            
            # Network performance
            "net.core.netdev_max_backlog": "5000",
            "net.core.somaxconn": "65535",
            "net.ipv4.tcp_max_syn_backlog": "4096",
            "net.ipv4.tcp_fin_timeout": "30",
            "net.ipv4.tcp_keepalive_time": "1200",
            "net.ipv4.tcp_keepalive_intvl": "15",
            "net.ipv4.tcp_keepalive_probes": "5",
            
            # TCP congestion control
            "net.ipv4.tcp_congestion_control": "bbr",
            "net.ipv4.tcp_ecn": "1",
            "net.ipv4.tcp_fastopen": "3",
        }
        
        # Network parametrelerini uygula
        for param, value in network_params.items():
            run(f"sysctl -w {param}={value}", check=False)
        
        # Kalƒ±cƒ± konfig√ºrasyon
        network_config = "# isPanel Network Optimization\n"
        for param, value in network_params.items():
            network_config += f"{param} = {value}\n"
        
        Path("/etc/sysctl.d/99-ispanel-network.conf").write_text(network_config, encoding="utf-8")
        
        print("‚úÖ Network optimizasyonu tamamlandƒ±")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Network optimizasyon hatasƒ±: {e}")


def optimize_mysql_performance(total_mem_gb: float, cpu_cores: int):
    """MySQL/MariaDB performans optimizasyonu"""
    print("üóÑÔ∏è  MySQL/MariaDB performans optimizasyonu yapƒ±lƒ±yor...")
    
    try:
        # MySQL konfig√ºrasyon dosyalarƒ±nƒ± bul
        mysql_config_files = [
            "/etc/mysql/mariadb.conf.d/50-server.cnf",
            "/etc/mysql/my.cnf",
            "/etc/mysql/mysql.conf.d/mysqld.cnf",
            "/etc/my.cnf",
        ]
        
        # En uygun konfig√ºrasyon dosyasƒ±nƒ± bul
        config_file = None
        for file_path in mysql_config_files:
            if Path(file_path).exists():
                config_file = file_path
                break
        
        if not config_file:
            # Varsayƒ±lan konfig√ºrasyon dosyasƒ± olu≈ütur
            config_file = "/etc/mysql/mariadb.conf.d/50-server.cnf"
            Path(config_file).parent.mkdir(parents=True, exist_ok=True)
        
        # MySQL ayarlarƒ±nƒ± hesapla
        if total_mem_gb >= 256:
            # 256GB+ RAM - Enterprise seviye
            innodb_buffer_pool = "128G"
            max_connections = "2000"
            query_cache_size = "2G"
            tmp_table_size = "2G"
            max_heap_table_size = "2G"
            innodb_log_file_size = "2G"
            innodb_log_buffer_size = "256M"
        elif total_mem_gb >= 128:
            # 128GB RAM - High-end server
            innodb_buffer_pool = "64G"
            max_connections = "1500"
            query_cache_size = "1G"
            tmp_table_size = "1G"
            max_heap_table_size = "1G"
            innodb_log_file_size = "1G"
            innodb_log_buffer_size = "128M"
        elif total_mem_gb >= 64:
            # 64GB RAM - Enterprise server
            innodb_buffer_pool = "32G"
            max_connections = "1000"
            query_cache_size = "512M"
            tmp_table_size = "512M"
            max_heap_table_size = "512M"
            innodb_log_file_size = "512M"
            innodb_log_buffer_size = "64M"
        elif total_mem_gb >= 32:
            # 32GB RAM - High-performance server
            innodb_buffer_pool = "16G"
            max_connections = "800"
            query_cache_size = "256M"
            tmp_table_size = "256M"
            max_heap_table_size = "256M"
            innodb_log_file_size = "256M"
            innodb_log_buffer_size = "32M"
        elif total_mem_gb >= 16:
            # 16GB RAM - Production server
            innodb_buffer_pool = "8G"
            max_connections = "500"
            query_cache_size = "256M"
            tmp_table_size = "256M"
            max_heap_table_size = "256M"
            innodb_log_file_size = "256M"
            innodb_log_buffer_size = "32M"
        elif total_mem_gb >= 8:
            innodb_buffer_pool = "4G"
            max_connections = "300"
            query_cache_size = "128M"
            tmp_table_size = "128M"
            max_heap_table_size = "128M"
        elif total_mem_gb >= 4:
            innodb_buffer_pool = "2G"
            max_connections = "200"
            query_cache_size = "64M"
            tmp_table_size = "64M"
            max_heap_table_size = "64M"
        else:
            innodb_buffer_pool = "1G"
            max_connections = "100"
            query_cache_size = "32M"
            tmp_table_size = "32M"
            max_heap_table_size = "32M"
        
        print(f"‚öôÔ∏è  InnoDB Buffer Pool: {innodb_buffer_pool}")
        print(f"‚öôÔ∏è  Max Connections: {max_connections}")
        print(f"‚öôÔ∏è  Query Cache: {query_cache_size}")
        print(f"‚öôÔ∏è  Log File Size: {innodb_log_file_size}")
        print(f"‚öôÔ∏è  Log Buffer: {innodb_log_buffer_size}")
        
        # MySQL optimizasyon ayarlarƒ±
        mysql_optimizations = {
            # InnoDB ayarlarƒ±
            "innodb_buffer_pool_size": innodb_buffer_pool,
            "innodb_log_file_size": innodb_log_file_size,
            "innodb_log_buffer_size": innodb_log_buffer_size,
            "innodb_flush_log_at_trx_commit": "2",
            "innodb_flush_method": "O_DIRECT",
            "innodb_file_per_table": "1",
            "innodb_open_files": "4000",
            "innodb_io_capacity": "2000",
            "innodb_io_capacity_max": "4000",
            "innodb_read_io_threads": str(min(cpu_cores, 8)),
            "innodb_write_io_threads": str(min(cpu_cores, 8)),
            "innodb_thread_concurrency": str(cpu_cores * 2),
            "innodb_buffer_pool_instances": str(min(cpu_cores, 8)),
            
            # Genel ayarlar
            "max_connections": max_connections,
            "max_user_connections": "0",
            "max_allowed_packet": "64M",
            "thread_cache_size": "16",
            "table_open_cache": "4000",
            "table_definition_cache": "2000",
            
            # Query Cache
            "query_cache_type": "1",
            "query_cache_size": query_cache_size,
            "query_cache_limit": "2M",
            
            # Temp tables
            "tmp_table_size": tmp_table_size,
            "max_heap_table_size": max_heap_table_size,
            "tmpdir": "/tmp",
            
            # MyISAM
            "key_buffer_size": "256M",
            "myisam_sort_buffer_size": "64M",
            "myisam_max_sort_file_size": "10G",
            
            # Logging
            "slow_query_log": "1",
            "slow_query_log_file": "/var/log/mysql/slow.log",
            "long_query_time": "2",
            "log_queries_not_using_indexes": "1",
            
            # Binary logging
            "log_bin": "/var/log/mysql/mysql-bin.log",
            "expire_logs_days": "7",
            "max_binlog_size": "100M",
            
            # Performance
            "sort_buffer_size": "2M",
            "read_buffer_size": "2M",
            "read_rnd_buffer_size": "8M",
            "join_buffer_size": "2M",
            "bulk_insert_buffer_size": "64M",
        }
        
        # Konfig√ºrasyon dosyasƒ±nƒ± oku veya olu≈ütur
        if Path(config_file).exists():
            content = Path(config_file).read_text(encoding="utf-8")
        else:
            content = f"""# isPanel MySQL Optimization
[mysqld]
# Basic settings
port = 3306
socket = /var/run/mysqld/mysqld.sock
datadir = /var/lib/mysql
pid-file = /var/run/mysqld/mysqld.pid
user = mysql

# Performance optimizations
"""
        
        # [mysqld] b√∂l√ºm√ºn√º bul veya olu≈ütur
        if "[mysqld]" not in content:
            content += "\n[mysqld]\n"
        
        # Her optimizasyonu ekle/g√ºncelle
        for setting, value in mysql_optimizations.items():
            pattern = rf"{re.escape(setting)}\s*=\s*[^\n]*"
            replacement = f"{setting} = {value}"
            
            if re.search(pattern, content):
                content = re.sub(pattern, replacement, content)
            else:
                # [mysqld] b√∂l√ºm√ºne ekle
                content = re.sub(
                    r"(\[mysqld\])",
                    f"\\1\n{setting} = {value}",
                    content
                )
        
        # Konfig√ºrasyon dosyasƒ±nƒ± kaydet
        Path(config_file).write_text(content, encoding="utf-8")
        
        # MySQL servisini yeniden ba≈ülat
        print("üîÑ MySQL servisi yeniden ba≈ülatƒ±lƒ±yor...")
        run("systemctl restart mariadb", check=False)
        run("systemctl restart mysql", check=False)
        
        # MySQL servisinin √ßalƒ±≈ütƒ±ƒüƒ±nƒ± kontrol et
        result = run("systemctl is-active mariadb mysql", check=False)
        if result.returncode == 0:
            print("‚úÖ MySQL/MariaDB optimizasyonu tamamlandƒ±")
        else:
            print("‚ö†Ô∏è  MySQL servisi yeniden ba≈ülatƒ±lamadƒ±, manuel kontrol gerekebilir")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  MySQL optimizasyon hatasƒ±: {e}")


def repair_mariadb():
    """MariaDB onarƒ±m i≈ülemleri"""
    print("MariaDB onarƒ±m i≈ülemleri yapƒ±lƒ±yor...")
    
    # MySQL servisini durdur
    run("systemctl stop mariadb", check=False)
    
    # Repair i≈ülemleri
    try:
        # MySQL'i g√ºvenli modda ba≈ülat
        run("mysqld_safe --skip-grant-tables --skip-networking &", check=False)
        time.sleep(3)
        
        # Repair komutlarƒ±
        repair_commands = [
            "REPAIR TABLE mysql.user;",
            "REPAIR TABLE mysql.db;",
            "REPAIR TABLE mysql.tables_priv;",
            "REPAIR TABLE mysql.columns_priv;",
            "FLUSH PRIVILEGES;",
        ]
        
        for cmd in repair_commands:
            try:
                run(f'mysql -u root -e "{cmd}"', check=True)
            except BaseException:
                pass
        
        # MySQL'i normal modda yeniden ba≈ülat
        run("pkill mysqld", check=False)
        time.sleep(2)
        run("systemctl start mariadb", check=True)
        
        print("MariaDB onarƒ±m i≈ülemleri tamamlandƒ±.")
    except Exception as e:
        print(f"MariaDB onarƒ±m hatasƒ±: {e}")
        run("systemctl start mariadb", check=False)


def repair_openlitespeed():
    """OpenLiteSpeed onarƒ±m i≈ülemleri"""
    print("OpenLiteSpeed onarƒ±m i≈ülemleri yapƒ±lƒ±yor...")
    
    try:
        # Konfig√ºrasyon dosyalarƒ±nƒ± kontrol et
        config_files = [
            "/usr/local/lsws/conf/httpd_config.conf",
            "/usr/local/lsws/conf/vhosts",
        ]
        
        for config_file in config_files:
            if Path(config_file).exists():
                # Dosya izinlerini d√ºzelt
                run(f"chown -R lsadm:lsadm {config_file}", check=False)
                run(f"chmod -R 755 {config_file}", check=False)
        
        # OpenLiteSpeed'i yeniden ba≈ülat
        run("systemctl restart lsws", check=False)
        
        # Alternatif restart
        try:
            run("/usr/local/lsws/bin/lswsctrl restart", check=True)
        except BaseException:
            pass
            
        print("OpenLiteSpeed onarƒ±m i≈ülemleri tamamlandƒ±.")
    except Exception as e:
        print(f"OpenLiteSpeed onarƒ±m hatasƒ±: {e}")


def install_redis():
    """Redis kurulumu"""
    print("Redis kuruluyor...")
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y redis-server", check=True)
    run("systemctl enable redis-server", check=False)
    run("systemctl start redis-server", check=True)
    print("Redis kuruldu ve ba≈ülatƒ±ldƒ±.")


def install_memcached():
    """Memcached kurulumu"""
    print("Memcached kuruluyor...")
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y memcached", check=True)
    run("systemctl enable memcached", check=False)
    run("systemctl start memcached", check=True)
    print("Memcached kuruldu ve ba≈ülatƒ±ldƒ±.")


def configure_php_opcache():
    """PHP OPcache konfig√ºrasyonu"""
    print("PHP OPcache konfig√ºrasyonu yapƒ±lƒ±yor...")
    
    # OPcache ayarlarƒ±
    opcache_config = """
[opcache]
opcache.enable=1
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=2
opcache.fast_shutdown=1
opcache.enable_cli=1
"""
    
    # PHP ini dosyasƒ±na ekle
    candidates = [
        "/usr/local/lsws/lsphp81/etc/php/8.1/litespeed/php.ini",
        "/usr/local/lsws/lsphp82/etc/php/8.2/litespeed/php.ini",
        "/usr/local/lsws/lsphp83/etc/php/8.3/litespeed/php.ini",
    ]
    wrote = False
    for php_ini_path in candidates:
        if Path(php_ini_path).exists():
            with open(php_ini_path, "a", encoding="utf-8") as f:
                f.write(opcache_config)
            wrote = True
    if wrote:
        print("OPcache konfig√ºrasyonu eklendi (mevcut s√ºr√ºmler).")
    else:
        print("PHP ini dosyasƒ± bulunamadƒ±, OPcache manuel olarak yapƒ±landƒ±rƒ±lmalƒ±.")


def backup_domain(domain: str):
    backup_dir = ISPANEL_BACKUP_DIR / "domains"
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    docroot = DOCROOT_BASE / domain
    if not docroot.exists():
        print(f"Domain docroot bulunamadƒ±: {docroot}")
        return None
    
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    backup_file = backup_dir / f"{domain}_{timestamp}.tar.gz"
    run(f"tar -czf {backup_file} -C {docroot.parent} {domain}", check=True)
    checksum = run(f"sha256sum {backup_file}", check=True).stdout.strip().split()[0]
    run(f"tar -tzf {backup_file} > /dev/null", check=True)
    print(f"Domain yedeƒüi alƒ±ndƒ±: {backup_file}")
    print(f"SHA256: {checksum}")
    return str(backup_file)


def backup_database(db_name: str):
    backup_dir = ISPANEL_BACKUP_DIR / "databases"
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    backup_file = backup_dir / f"{db_name}_{timestamp}.sql"
    
    run(f"mysqldump -uroot {db_name} > {backup_file}", check=True)

    checksum = run(f"sha256sum {backup_file}", check=True).stdout.strip().split()[0]
    run(f'mysql -uroot -e "USE {db_name}"', check=False)
    print(f"Veritabanƒ± yedeƒüi alƒ±ndƒ±: {backup_file}")
    print(f"SHA256: {checksum}")
    return str(backup_file)


def restore_domain(backup_file: str):
    path = Path(backup_file)
    if not path.exists():
        print(f"Yedek dosyasƒ± bulunamadƒ±: {backup_file}")
        return False
    
    run(f"tar -xzf {path} -C {DOCROOT_BASE.parent}", check=True)
    print(f"Domain yedeƒüi geri y√ºklendi: {path}")
    return True


def restore_database(backup_file: str, db_name: str):
    path = Path(backup_file)
    if not path.exists():
        print(f"Yedek dosyasƒ± bulunamadƒ±: {backup_file}")
        return False
    
    run(f"mysql -uroot -e \"CREATE DATABASE IF NOT EXISTS {db_name}\"", check=True)
    run(f"mysql -uroot {db_name} < {path}", check=True)
    print(f"Veritabanƒ± yedeƒüi geri y√ºklendi: {path}")
    return True


def fix_virtual_host_root(domain: str):
    """Mevcut domain'in Virtual Host Root'unu d√ºzelt"""
    if not HTTPD_CONF.exists():
        print(f"Bulunamadƒ±: {HTTPD_CONF}", file=sys.stderr)
        return False

    content = HTTPD_CONF.read_text(encoding="utf-8")
    docroot = DOCROOT_BASE / domain

    # Mevcut virtualHost bloƒüunu bul ve g√ºncelle
    pattern = rf"virtualHost\s+{re.escape(domain)}\s*\{{[^}}]*\}}"
    match = re.search(pattern, content, re.DOTALL)

    if match:
        old_block = match.group(0)
        new_block = f"""virtualHost {domain} {{
    vhRoot                  {docroot}
    configFile              conf/vhosts/{domain}/vhost.conf
    allowSymbolLink         1
    enableScript            1
    restrained              1
}}"""
        content = content.replace(old_block, new_block)
        HTTPD_CONF.write_text(content, encoding="utf-8")
        print(f"‚úÖ {domain} Virtual Host Root d√ºzeltildi: {docroot}")
        return True
    else:
        print(f"‚ùå {domain} virtualHost bloƒüu bulunamadƒ±")
        return False


def fix_vhost_config(domain: str):
    """Mevcut domain'in vhost konfig√ºrasyonunu standart yapƒ±ya g√ºncelle"""
    vdir = VHOSTS_DIR / domain
    if not vdir.exists():
        print(f"‚ùå {domain} vhost dizini bulunamadƒ±")
        return False

    vconf = vdir / "vhost.conf"
    if not vconf.exists():
        print(f"‚ùå {domain} vhost.conf bulunamadƒ±")
        return False

    # Yeni standart konfig√ºrasyonu olu≈ütur
    docroot = DOCROOT_BASE / domain / "public_html"
    vh_root = docroot.parent

    # Gerekli dizinleri olu≈ütur
    log_dir = vh_root / "logs"
    log_dir.mkdir(parents=True, exist_ok=True)
    (log_dir / "access.log").touch(exist_ok=True)
    (log_dir / "error.log").touch(exist_ok=True)

    cgi_dir = vh_root / "cgi-bin"
    cgi_dir.mkdir(parents=True, exist_ok=True)

    protected_dir = docroot / "protected"
    protected_dir.mkdir(parents=True, exist_ok=True)

    awstats_dir = vh_root / "awstats"
    awstats_dir.mkdir(parents=True, exist_ok=True)

    conf = f"""docRoot $VH_ROOT/public_html/
enableGzip 1

context / {{
  allowBrowse 1
  location $DOC_ROOT/
  rewrite  {{
    RewriteFile .htaccess
  }}
}}

context /docs/{{
  allowBrowse 1
  location $SERVER_ROOT/docs/
}}

context /protected/{{
  required user test
  authName Protected
  allowBrowse 1
  location protected/
  realm SampleProtectedArea

  accessControl {{
    deny
    allow *
  }}
}}

context /blocked/{{
  allowBrowse 0
}}

context /cgi-bin/{{
  allowBrowse 1
  location $VH_ROOT/cgi-bin/
  type cgi
}}

expires {{
  enableExpires 1
}}

index {{
  autoIndexURI /_autoindex/default.php
  indexFiles index.html, index.php
  autoIndex 0
  useServer 0
}}

errorPage 404{{
  url /error404.html
}}

errorlog $VH_ROOT/logs/error.log{{
  logLevel DEBUG
  rollingSize 10M
  useServer 1
}}

accessLog $VH_ROOT/logs/access.log{{
  compressArchive 0
  logReferer 1
  keepDays 30
  rollingSize 10M
  logUserAgent 1
  useServer 0
}}

awstats {{
  updateInterval 86400
  workingDir $VH_ROOT/awstats
  updateOffset 0
  siteDomain {domain}
  siteAliases 127.0.0.1 localhost
  updateMode 0
  awstatsURI /awstats/
}}

rewrite {{
  enable 0
  logLevel 0
}}

hotlinkCtrl {{
  suffixes gif, jpeg, jpg, png, css, js
  allowedHosts
  allowDirectAccess 1
  enableHotlinkCtrl 0
  onlySelf 1
}}

accessControl {{
  deny
  allow *
}}

realm SampleProtectedArea {{
  userDB {{
    cacheTimeout 60
    maxCacheSize 200
    location conf/vhosts/$VH_NAME/htpasswd
  }}

  groupDB {{
    cacheTimeout 60
    maxCacheSize 200
    location conf/vhosts/$VH_NAME/htgroup
  }}
}}

general {{
  enableContextAC 0
}}

scriptHandler {{
    add                    lsapi:lsphp{DEFAULT_LSPHP_VERSION} php
}}

phpIniOverride  {{
}}

    # OpenLiteSpeed Cache Configuration
    # OLS Cache kapalƒ± (men√ºden etkinle≈ütirilebilir)
""".strip()

    vconf.write_text(conf, encoding="utf-8")

    # Dizin izinlerini ayarla
    run(f"chown -R lsadm:nogroup {vdir}", check=True)
    run(f"chmod -R 755 {vdir}", check=True)
    run(f"chown -R lsadm:nogroup {vh_root}", check=False)
    run(f"chmod -R 755 {vh_root}", check=False)

    print(f"‚úÖ {domain} vhost konfig√ºrasyonu standart yapƒ±ya g√ºncellendi")
    return True


def _read_virtual_host_settings(domain: str, docroot: Path) -> tuple[str, str]:
    """Return php version and ssl status."""
    vconf = VHOSTS_DIR / domain / "vhost.conf"
    php = "bilinmiyor"
    if vconf.exists():
        content = vconf.read_text(encoding="utf-8")
        m = re.search(r"lsapi:lsphp(\d+)", content)
        if m:
            php = f"lsphp{m.group(1)}"
    ssl_dir = Path(f"/etc/letsencrypt/live/{domain}")
    ssl = "Var" if ssl_dir.exists() else "Yok"
    return php, ssl


def _get_owner_info(path: Path) -> tuple[str, str]:
    try:
        stat = path.stat()
        owner = getpwuid(stat.st_uid).pw_name
        group = getgrgid(stat.st_gid).gr_name
        return owner, group
    except Exception:
        return "bilinmiyor", "bilinmiyor"


def list_domains():
    print("\n=== Aktif Domainler ===")

    if not VHOSTS_DIR.exists():
        print("Vhost dizini bulunamadƒ±.")
        return

    rows = []
    for domain_dir in VHOSTS_DIR.iterdir():
        if domain_dir.is_dir() and domain_dir.name != "Example":
            domain = domain_dir.name
            docroot = DOCROOT_BASE / domain / "public_html"
            vh_root = docroot.parent
            vhost_conf = domain_dir / "vhost.conf"
            owner, group = (
                _get_owner_info(vh_root)
                if vh_root.exists()
                else ("bilinmiyor", "bilinmiyor")
            )
            php, ssl = _read_virtual_host_settings(domain, docroot)
            access_log = vh_root / "logs" / "access.log"
            error_log = vh_root / "logs" / "error.log"
            rows.append(
                {
                    "domain": domain,
                    "docroot": str(docroot),
                    "exists": docroot.exists(),
                    "vhost_exists": vhost_conf.exists(),
                    "owner": f"{owner}:{group}",
                    "php": php,
                    "ssl": ssl,
                    "access_log": str(access_log),
                    "error_log": str(error_log),
                }
            )

    if not rows:
        print("Hi√ß domain bulunamadƒ±.")
        return

    header = f"{'Domain':<20} {'Docroot':<30} {'Sahip':<18} {'PHP':<10} {'SSL':<5}"
    print(header)
    print("-" * len(header))

    for info in rows:
        status = "‚úÖ" if info["exists"] and info["vhost_exists"] else "‚ùå"
        print(
            f"{info['domain']:<20} {info['docroot']:<30} {info['owner']:<18} {info['php']:<10} {info['ssl']:<5} {status}"
        )
        print(f"  Access log: {info['access_log']}")
        print(f"  Error log : {info['error_log']}")
        if info["vhost_exists"]:
            print(f"  üîß Virtual Host Root d√ºzelt: ispanel fix-vhost {info['domain']}")


def list_databases():
    print("\n=== Veritabanlarƒ± ===")

    try:
        result = run("mysql -uroot -e 'SHOW DATABASES;'", check=False)
        if result.returncode != 0 or not result.stdout:
            print("MariaDB baƒülantƒ± hatasƒ±. Servis √ßalƒ±≈üƒ±yor mu kontrol edin.")
            return

        databases = []
        for line in result.stdout.strip().split("\n"):
            line = line.strip()
            if line and line not in [
                "Database",
                "information_schema",
                "performance_schema",
                "mysql",
                "sys",
            ]:
                databases.append(line)

        if not databases:
            print("Hi√ß veritabanƒ± bulunamadƒ±.")
            return

        print(
            f"{'Veritabanƒ±':<20} {'Boyut (MB)':<12} {'Son G√ºncellenme':<22} {'Tablo Sayƒ±sƒ±':<12}"
        )
        print("-" * 72)

        for db in databases:
            size_query = (
                "SELECT IFNULL(ROUND(SUM(data_length + index_length) / 1024 / 1024, 2), 0) "
                'FROM information_schema.tables WHERE table_schema="%s";' % db
            )
            count_query = (
                'SELECT COUNT(*) FROM information_schema.tables WHERE table_schema="%s";'
                % db
            )
            date_query = (
                "SELECT DATE_FORMAT(MAX(update_time), '%Y-%m-%d %H:%i:%s') "
                'FROM information_schema.tables WHERE table_schema="%s";' % db
            )

            size_result = run(f'mysql -uroot -e "{size_query}"', check=False)
            size_value = (
                size_result.stdout.strip().split("\n")[-1]
                if size_result.stdout
                else "0"
            )

            count_result = run(f'mysql -uroot -e "{count_query}"', check=False)
            count_value = (
                count_result.stdout.strip().split("\n")[-1]
                if count_result.stdout
                else "0"
            )

            date_result = run(f'mysql -uroot -e "{date_query}"', check=False)
            date_value = (
                date_result.stdout.strip().split("\n")[-1]
                if date_result.stdout
                else "N/A"
            )

            print(f"{db:<20} {size_value:<12} {date_value:<22} {count_value:<12}")

    except Exception as e:
        print(f"Veritabanƒ± listesi alƒ±namadƒ±: {e}")


def list_backups():
    """Yedek √∂zetlerini listele."""

    def summarize(title: str, pattern: str, base: Path):
        print(f"\n=== {title} ===")
        if not base.exists():
            print(f"Dizin bulunamadƒ±: {base}")
            return
        backups = sorted(base.glob(pattern))
        if not backups:
            print("Hen√ºz yedek yok.")
            return
        for backup in backups:
            size_mb = backup.stat().st_size / (1024 * 1024)
            checksum_file = backup.with_suffix(backup.suffix + ".sha256")
            checksum = (
                checksum_file.read_text(encoding="utf-8").strip()
                if checksum_file.exists()
                else "(hesaplanmadƒ±)"
            )
            print(f"- {backup.name} ({size_mb:.2f} MB) | SHA256: {checksum}")

    summarize("Domain Yedekleri", "*.tar.gz", ISPANEL_BACKUP_DIR / "domains")
    summarize("Veritabanƒ± Yedekleri", "*.sql", ISPANEL_BACKUP_DIR / "databases")


def install_cron():
    ensure_cmd("crontab", "cron")


def cron_add(line: str):
    install_cron()
    # mevcut crontab al
    cp = subprocess.run(
        "crontab -l",
        shell=True,
        text=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    current = cp.stdout if cp.returncode == 0 else ""
    if line in current:
        print("Cron zaten mevcut")
        return
    new = (
        current + ("\n" if current and not current.endswith("\n") else "") + line + "\n"
    )
    p = subprocess.run("crontab -", shell=True, input=new, text=True)
    if p.returncode == 0:
        print("Cron eklendi")
    else:
        print("Cron eklenemedi", file=sys.stderr)


def cron_backup_menu():
    while True:
        print("\n--- Cron Backup Ayarlarƒ± ---")
        print("1) G√ºnl√ºk DB yedeƒüi kur (02:30)")
        print("2) G√ºnl√ºk Dosya yedeƒüi kur (03:00)")
        print("3) Cron listele")
        print("4) Fail2Ban'i tekrar ba≈ülat")
        print("0) Geri")
        sub = input("Se√ßim: ").strip()
        if sub == "1":
            db = input("Yedeklenecek DB adƒ±: ").strip()
            backup_dir = str(ISPANEL_BACKUP_DIR / "databases")
            line = f"30 2 * * * mysqldump -uroot {db} > {backup_dir}/{db}_$(date +\\%Y\\%m\\%d).sql"
            cron_add(line)
        elif sub == "2":
            domain = input("Yedeklenecek domain: ").strip()
            backup_dir = str(ISPANEL_BACKUP_DIR / "domains")
            line = f"0 3 * * * tar -czf {backup_dir}/{domain}_$(date +\\%Y\\%m\\%d).tar.gz -C {DOCROOT_BASE} {domain}"
            cron_add(line)
        elif sub == "3":
            subprocess.run("crontab -l | cat", shell=True)
        elif sub == "4":
            subprocess.run("systemctl enable fail2ban", shell=True, check=False)
            subprocess.run("systemctl restart fail2ban", shell=True, check=False)
            print("Fail2Ban yeniden ba≈ülatƒ±ldƒ±.")
        elif sub == "0":
            break
        else:
            print("Ge√ßersiz se√ßim")


def domain_php_version_menu():
    """Domain PHP s√ºr√ºm√º deƒüi≈ütirme men√ºs√º"""
    print(f"\n=== {get_text('php_version_prompt')} ===")

    # Mevcut domainleri listele
    domains = []
    if VHOSTS_DIR.exists():
        for vhost_dir in VHOSTS_DIR.iterdir():
            if vhost_dir.is_dir() and vhost_dir.name not in ["Example"]:
                vconf = vhost_dir / "vhost.conf"
                if vconf.exists():
                    # Mevcut PHP s√ºr√ºm√ºn√º bul
                    content = vconf.read_text(encoding="utf-8")
                    current_version = "83"  # varsayƒ±lan
                    if "lsphp82" in content:
                        current_version = "82"
                    elif "lsphp83" in content:
                        current_version = "83"

                    domains.append((vhost_dir.name, current_version))

    if not domains:
        print(get_text("no_domains"))
        input(get_text("press_enter"))
        return

    print(f"\n{get_text('main_menu_options')[3]}:")  # Domain List
    for i, (domain, version) in enumerate(domains, 1):
        print(f"{i}) {domain} (PHP {version[0]}.{version[1]})")

    print("0) " + get_text("main_menu_options")[-1])  # Exit/√áƒ±kƒ±≈ü

    choice = input(f"\n{get_text('domain_prompt')}: ").strip()
    if choice == "0":
        return

    try:
        idx = int(choice) - 1
        if 0 <= idx < len(domains):
            domain = domains[idx][0]
            current_version = domains[idx][1]

            print(f"\n{domain} {get_text('php_version_prompt')}:")
            print(f"Current: PHP {current_version[0]}.{current_version[1]}")
            php_versions = get_text("php_versions")
            for i, version in enumerate(php_versions, 1):
                print(f"{i}) {version}")
            print("0) " + get_text("main_menu_options")[-1])  # Exit/√áƒ±kƒ±≈ü

            version_choice = input(f"{get_text('enter_choice')}: ").strip()

            if version_choice == "1":
                set_domain_php_version(domain, "82")
                print(f"‚úÖ {domain} PHP 8.2'ye ge√ßirildi")
            elif version_choice == "2":
                set_domain_php_version(domain, "83")
                print(f"‚úÖ {domain} PHP 8.3'e ge√ßirildi")
            elif version_choice == "0":
                return

            input(get_text("press_enter"))
    except BaseException:
        print(get_text("invalid_choice"))
        input(get_text("press_enter"))

def interactive_menu():
    while True:
        try:
            print(f"\n{'='*60}")
            print(f"üéØ {get_text('main_menu_title')}")
            print(f"{'='*60}")
            
            # Renk kodlarƒ±
            RED = '\033[91m'
            GREEN = '\033[92m'
            YELLOW = '\033[93m'
            BLUE = '\033[94m'
            PURPLE = '\033[95m'
            CYAN = '\033[96m'
            WHITE = '\033[97m'
            BOLD = '\033[1m'
            RESET = '\033[0m'
            
            # Men√º se√ßeneklerini kategorize et
            menu_options = get_text("main_menu_options")
            
            # üöÄ KURULUM SE√áENEKLERƒ∞
            print(f"\n{BOLD}{CYAN}üöÄ KURULUM SE√áENEKLERƒ∞{RESET}")
            print(f"{GREEN}1){RESET} {menu_options[0]}")
            print(f"{GREEN}2){RESET} {menu_options[1]}")
            print(f"{GREEN}3){RESET} {menu_options[2]}")
            
            # üåê DOMAIN Y√ñNETƒ∞Mƒ∞
            print(f"\n{BOLD}{BLUE}üåê DOMAIN Y√ñNETƒ∞Mƒ∞{RESET}")
            print(f"{YELLOW}4){RESET} {menu_options[3]}")
            print(f"{YELLOW}5){RESET} {menu_options[4]}")
            print(f"{YELLOW}6){RESET} {menu_options[5]}")
            print(f"{YELLOW}7){RESET} {menu_options[6]}")
            
            # üóÑÔ∏è VERƒ∞TABANI Y√ñNETƒ∞Mƒ∞
            print(f"\n{BOLD}{PURPLE}üóÑÔ∏è VERƒ∞TABANI Y√ñNETƒ∞Mƒ∞{RESET}")
            print(f"{PURPLE}8){RESET} {menu_options[7]}")
            print(f"{PURPLE}9){RESET} {menu_options[8]}")
            print(f"{PURPLE}10){RESET} {menu_options[9]}")
            
            # üîß Sƒ∞STEM Y√ñNETƒ∞Mƒ∞
            print(f"\n{BOLD}{RED}üîß Sƒ∞STEM Y√ñNETƒ∞Mƒ∞{RESET}")
            print(f"{RED}11){RESET} {menu_options[10]}")
            print(f"{RED}12){RESET} {menu_options[11]}")
            print(f"{RED}13){RESET} {menu_options[12]}")
            print(f"{RED}14){RESET} {menu_options[13]}")
            print(f"{RED}15){RESET} {menu_options[14]}")
            print(f"{RED}16){RESET} {menu_options[15]}")
            print(f"{RED}17){RESET} {menu_options[16]}")
            print(f"{RED}18){RESET} {menu_options[17]}")
            
            # üíæ YEDEKLEME Sƒ∞STEMƒ∞
            print(f"\n{BOLD}{CYAN}üíæ YEDEKLEME Sƒ∞STEMƒ∞{RESET}")
            print(f"{CYAN}19){RESET} {menu_options[18]}")
            print(f"{CYAN}20){RESET} {menu_options[19]}")
            print(f"{CYAN}21){RESET} {menu_options[20]}")
            print(f"{CYAN}22){RESET} {menu_options[21]}")
            
            # üõ†Ô∏è ARA√áLAR
            print(f"\n{BOLD}{YELLOW}üõ†Ô∏è ARA√áLAR{RESET}")
            print(f"{YELLOW}23){RESET} {menu_options[22]}")
            print(f"{YELLOW}24){RESET} {menu_options[23]}")
            print(f"{YELLOW}25){RESET} {menu_options[24]}")
            print(f"{YELLOW}26){RESET} {menu_options[25]}")
            print(f"{YELLOW}27){RESET} {menu_options[26]}")
            
            # üö® KURTARMA VE ƒ∞ZLEME
            print(f"\n{BOLD}{RED}üö® KURTARMA VE ƒ∞ZLEME{RESET}")
            print(f"{RED}28){RESET} Acil Durum Kurtarma")
            print(f"{RED}29){RESET} Sistem Saƒülƒ±k Kontrol√º")
            print(f"{RED}30){RESET} Sistem ƒ∞zleme")
            print(f"{RED}31){RESET} Otomatik Yedekleme Sistemi")
            print(f"{RED}32){RESET} isPanel G√ºncelle")
            
            # √áIKI≈û
            print(f"\n{BOLD}{WHITE}0){RESET} {get_text('main_menu_options')[-1]}")
            print(f"{'='*60}")

            choice = input(f"\n{get_text('enter_choice')}: ").strip()
            
            if choice == "1":
                # Her iki PHP s√ºr√ºm√º de kurulacak
                cmd_install(argparse.Namespace(php_version="83"))
            elif choice == "2":
                install_openlitespeed_only()
            elif choice == "3":
                install_mariadb_only()
            elif choice == "4":
                domain = input(f"{get_text('domain_prompt')}: ").strip()
                domain_add(domain)
            elif choice == "5":
                domain_php_version_menu()
            elif choice == "6":
                list_domains()
            elif choice == "7":
                domain = input(f"{get_text('domain_prompt')}: ").strip()
                domain_remove(domain)
            elif choice == "8":
                db = input(f"{get_text('db_name_prompt')}: ").strip()
                user = input(f"{get_text('db_user_prompt')}: ").strip()
                password = input(f"{get_text('db_pass_prompt')}: ").strip()
                db_create(db, user, password)
            elif choice == "9":
                list_databases()
            elif choice == "10":
                db = input(f"{get_text('db_name_prompt')}: ").strip()
                user = input(f"{get_text('db_user_prompt')}: ").strip()
                db_delete(db, user)
            elif choice == "11":
                domain = input(f"{get_text('domain_prompt')}: ").strip()
                fix_virtual_host_root(domain)
            elif choice == "12":
                domain = input(f"{get_text('domain_prompt')}: ").strip()
                fix_vhost_config(domain)
            elif choice == "13":
                reset_mysql_root_password()
            elif choice == "14":
                reset_openlitespeed_admin_password()
            elif choice == "15":
                manage_firewall()
            elif choice == "16":
                install_ssl_support()
            elif choice == "17":
                secure_mariadb_menu()
            elif choice == "18":
                optimize_openlitespeed()
            elif choice == "19":
                backup_domain_menu()
            elif choice == "20":
                backup_database_menu()
            elif choice == "21":
                list_backups()
            elif choice == "22":
                cron_backup_menu()
            elif choice == "23":
                repair_menu()
            elif choice == "24":
                cache_menu()
            elif choice == "25":
                system_management_menu()
            elif choice == "26":
                ols_php_menu()
            elif choice == "27":
                ols_php_menu()
            elif choice == "28":
                emergency_recovery()
            elif choice == "29":
                system_health_check()
            elif choice == "30":
                system_monitoring()
            elif choice == "31":
                auto_backup_system()
            elif choice == "32":
                update_ispanel()
            elif choice == "0":
                break
            else:
                print("Ge√ßersiz se√ßim")

        except KeyboardInterrupt:
            print(f"\n\n{'='*60}")
            print("üëã isPanel'den √ßƒ±kƒ±ldƒ±!")
            print("üí° Tekrar giri≈ü i√ßin: sudo ispanel")
            print(f"{'='*60}")
            break
        except Exception as e:
            print(f"\n‚ùå Beklenmeyen hata: {e}")
            print("üí° L√ºtfen tekrar deneyin veya sistem y√∂neticisine ba≈üvurun.")
            input("Devam etmek i√ßin Enter'a basƒ±n...")

def backup_domain_menu():
    """Domain yedekleme men√ºs√º"""
    while True:
        # File Backup Menu
        print(f"\n=== {get_text('main_menu_options')[16]} ===")
        print("1) " + get_text("domain_prompt"))
        print("2) " + get_text("main_menu_options")[18])  # List Backups
        print("0) " + get_text("main_menu_options")[-1])  # Exit

        choice = input(f"{get_text('enter_choice')}: ").strip()

        if choice == "1":
            domain = input(f"{get_text('domain_prompt')}: ").strip()
            backup_domain(domain)
        elif choice == "2":
            list_backups()
        elif choice == "0":
            break
        else:
            print(get_text("invalid_choice"))


def backup_database_menu():
    """Veritabanƒ± yedekleme men√ºs√º"""
    while True:
        # Database Backup Menu
        print(f"\n=== {get_text('main_menu_options')[17]} ===")
        print("1) " + get_text("db_name_prompt"))
        print("2) " + get_text("main_menu_options")[18])  # List Backups
        print("0) " + get_text("main_menu_options")[-1])  # Exit

        choice = input(f"{get_text('enter_choice')}: ").strip()

        if choice == "1":
            db_name = input(f"{get_text('db_name_prompt')}: ").strip()
            backup_database(db_name)
        elif choice == "2":
            list_backups()
        elif choice == "0":
            break
        else:
            print(get_text("invalid_choice"))


def repair_menu():
    """Onarƒ±m ara√ßlarƒ± men√ºs√º"""
    while True:
        print(f"\n=== {get_text('main_menu_options')[20]} ===")  # Repair Tools
        print("1) Repair MariaDB")
        print("2) Repair OpenLiteSpeed")
        print("3) Repair PHP configuration")
        print("4) Check system status")
        print("0) " + get_text("main_menu_options")[-1])  # Exit

        choice = input(f"{get_text('enter_choice')}: ").strip()

        if choice == "1":
            repair_mariadb()
        elif choice == "2":
            repair_openlitespeed()
        elif choice == "3":
            repair_php_config()
        elif choice == "4":
            check_system_status()
        elif choice == "0":
            break
        else:
            print(get_text("invalid_choice"))


def repair_php_config():
    """PHP konfig√ºrasyonu onar"""
    try:
        run("systemctl restart lsws", check=True)
        print("‚úÖ PHP configuration reloaded")
    except Exception as e:
        print(f"‚ùå PHP repair failed: {e}")


def check_system_status():
    """Sistem durumunu kontrol et"""
    try:
        print("\nüîç System Status Check:")

        # Check OpenLiteSpeed
        result = run("systemctl is-active lsws", check=False)
        print(f"OpenLiteSpeed: {'‚úÖ Active' if result.returncode == 0 else '‚ùå Inactive'}")

        # Check MariaDB
        result = run("systemctl is-active mariadb", check=False)
        print(f"MariaDB: {'‚úÖ Active' if result.returncode == 0 else '‚ùå Inactive'}")

        # Check disk space
        result = run("df -h /", check=True)
        print(f"\nüíæ Disk Usage:")
        print(result.stdout)

    except Exception as e:
        print(f"‚ùå System check failed: {e}")


def cache_menu():
    """Cache sistemleri men√ºs√º"""
    while True:
        # Cache Systems
        print(f"\n=== {get_text('main_menu_options')[21]} ===")
        print(f"1) {get_text('cache_install_redis')}")
        print(f"2) {get_text('cache_install_memcached')}")
        print(f"3) {get_text('cache_configure_redis')}")
        print(f"4) {get_text('cache_configure_memcached')}")
        print(f"5) {get_text('cache_toggle_domain')}")
        print("0) " + get_text("main_menu_options")[-1])  # Exit

        choice = input(f"{get_text('enter_choice')}: ").strip()

        if choice == "1":
            install_redis()
        elif choice == "2":
            install_memcached()
        elif choice == "3":
            configure_redis()
        elif choice == "4":
            configure_memcached()
        elif choice == "5":
            toggle_domain_cache_menu()
        elif choice == "0":
            break
        else:
            print(get_text("invalid_choice"))


def configure_redis():
    """Redis konfig√ºrasyonu"""
    try:
        print("‚úÖ Redis configuration completed")
    except Exception as e:
        print(f"‚ùå Redis configuration failed: {e}")


def configure_memcached():
    """Memcached konfig√ºrasyonu"""
    try:
        print("‚úÖ Memcached configuration completed")
    except Exception as e:
        print(f"‚ùå Memcached configuration failed: {e}")


def _enable_domain_ols_cache(domain: str) -> bool:
    """Belirtilen domain'in vhost.conf dosyasƒ±nda OLS cache'i etkinle≈ütir."""
    vdir = VHOSTS_DIR / domain
    vconf = vdir / "vhost.conf"
    if not vconf.exists():
        print(f"‚ùå {domain} vhost.conf bulunamadƒ±")
        return False
    content = vconf.read_text(encoding="utf-8")

    # ≈ûablondan oku
    tpl_path = TEMPLATE_DIR / "vhostCache.conf"
    if not tpl_path.exists():
        print(f"‚ùå Template bulunamadƒ±: {tpl_path}")
        return False
    cache_module_block = tpl_path.read_text(encoding="utf-8").strip() + "\n"

    if not re.search(r"\bmodule\s+cache\s*\{", content, flags=re.IGNORECASE):
        content = content.rstrip() + "\n\n" + cache_module_block
    else:
        # Mevcut bloƒüu komple ≈üablonla deƒüi≈ütir
        content = re.sub(r"module\s+cache\s*\{[\s\S]*?\}\s*", cache_module_block, content, flags=re.IGNORECASE)

    vconf.write_text(content, encoding="utf-8")
    reload_lsws()
    print(f"‚úÖ OLS Cache etkinle≈ütirildi: {domain}")
    return True


def _disable_domain_ols_cache(domain: str) -> bool:
    """Belirtilen domain i√ßin OLS cache'i devre dƒ±≈üƒ± bƒ±rak."""
    vdir = VHOSTS_DIR / domain
    vconf = vdir / "vhost.conf"
    if not vconf.exists():
        print(f"‚ùå {domain} vhost.conf bulunamadƒ±")
        return False
    content = vconf.read_text(encoding="utf-8")

    # module cache bloƒüunda enableCache ve ls_enabled deƒüerlerini 0 yap
    content = re.sub(r"(module\s+cache\s*\{[\s\S]*?\benableCache\s+)1", r"\g<1>0", content, flags=re.IGNORECASE)
    content = re.sub(r"(module\s+cache\s*\{[\s\S]*?\bls_enabled\s+)1", r"\g<1>0", content, flags=re.IGNORECASE)

    vconf.write_text(content, encoding="utf-8")
    reload_lsws()
    print(f"‚úÖ OLS Cache devre dƒ±≈üƒ± bƒ±rakƒ±ldƒ±: {domain}")
    return True


def _ensure_server_cache_module():
    """Sunucu genelinde `module cache` bloƒüu mevcut deƒüilse httpd_config.conf i√ßine ekle."""
    try:
        if not HTTPD_CONF.exists():
            print(f"‚ö†Ô∏è Sunucu konfig√ºrasyonu bulunamadƒ±: {HTTPD_CONF}")
            return

        content = HTTPD_CONF.read_text(encoding="utf-8")
        if re.search(r"\bmodule\s+cache\b", content, flags=re.IGNORECASE):
            # Mevcut ise enable'i 1'e √ßekmeye √ßalƒ±≈ü
            new_content = re.sub(r"(module\s+cache\s*\{[\s\S]*?\benable\s+)0",
                                 r"\g<1>1", content, flags=re.IGNORECASE)
            if new_content != content:
                HTTPD_CONF.write_text(new_content, encoding="utf-8")
                reload_lsws()
            return

        # Yoksa sona ekle
        module_block = (
            "\n# isPanel: OpenLiteSpeed Cache Module\n"
            "module cache {\n"
            "  enable               1\n"
            "  checkPrivateCache   1\n"
            "  checkPublicCache    1\n"
            "  maxCacheObjSize     10000000\n"
            "  maxStaleAge         200\n"
            "  qsCache             1\n"
            "  reqCookieCache      1\n"
            "  respCookieCache     1\n"
            "  ignoreReqCacheCtrl  1\n"
            "  ignoreRespCacheCtrl 0\n"
            "}\n"
        )
        HTTPD_CONF.write_text(content.rstrip() + "\n" + module_block, encoding="utf-8")
        reload_lsws()
        print("‚úÖ Sunucu mod√ºl√º: cache eklendi ve etkinle≈ütirildi")
    except Exception as e:
        print(f"‚ö†Ô∏è Sunucu cache mod√ºl√º eklenemedi: {e}")


def toggle_domain_cache_menu():
    """Domain bazƒ±nda OLS Cache a√ß/kapat men√ºs√º."""
    # Domainleri listele ve se√ßim al
    if not VHOSTS_DIR.exists():
        print("‚ùå Vhost dizini bulunamadƒ±.")
        return
    domains = [d.name for d in VHOSTS_DIR.iterdir() if d.is_dir() and d.name != "Example"]
    if not domains:
        print("‚ùå Domain bulunamadƒ±.")
        return
    print("\nMevcut domainler:")
    for i, d in enumerate(domains, 1):
        print(f"  {i}) {d}")
    sel = input("Se√ßin (numara veya domain yazƒ±n): ").strip()
    if sel.isdigit():
        idx = int(sel)
        if idx < 1 or idx > len(domains):
            print("‚ùå Ge√ßersiz se√ßim")
            return
        domain = domains[idx - 1]
    else:
        domain = sel
        if domain not in domains:
            print("‚ùå Domain listede yok")
            return
    action = input(get_text("cache_toggle_prompt") + " ").strip().lower()
    if action in ["e", "enable", "evet", "yes", "y"]:
        _enable_domain_ols_cache(domain)
    elif action in ["d", "disable", "hayir", "hayƒ±r", "no", "n"]:
        _disable_domain_ols_cache(domain)
    else:
        print("‚ùå Ge√ßersiz se√ßim")

def system_management_menu():
    """Sistem y√∂netimi men√ºs√º"""
    while True:
        # System Management
        print(f"\n=== {get_text('main_menu_options')[22]} ===")
        print("1) System information")
        print("2) Update system packages")
        print("3) Clean system cache")
        print("4) Restart services")
        print("0) " + get_text("main_menu_options")[-1])  # Exit

        choice = input(f"{get_text('enter_choice')}: ").strip()

        if choice == "1":
            show_system_info()
        elif choice == "2":
            update_system_packages()
        elif choice == "3":
            clean_system_cache()
        elif choice == "4":
            restart_services()
        elif choice == "0":
            break
        else:
            print(get_text("invalid_choice"))


def show_system_info():
    """Sistem bilgilerini g√∂ster"""
    try:
        print("\nüñ•Ô∏è System Information:")

        # OS info
        result = run("lsb_release -a", check=True)
        print(f"OS: {result.stdout}")

        # Memory info
        result = run("free -h", check=True)
        print(f"\nüíæ Memory:")
        print(result.stdout)

        # Disk info
        result = run("df -h", check=True)
        print(f"\nüíø Disk Usage:")
        print(result.stdout)

    except Exception as e:
        print(f"‚ùå Failed to get system info: {e}")


def update_system_packages():
    """Sistem paketlerini g√ºncelle"""
    try:
        run("apt-get update", check=True)
        run("apt-get upgrade -y", check=True)
        print("‚úÖ System packages updated")
    except Exception as e:
        print(f"‚ùå System update failed: {e}")


def clean_system_cache():
    """Sistem cache temizle"""
    try:
        run("apt-get clean", check=True)
        run("apt-get autoremove -y", check=True)
        print("‚úÖ System cache cleaned")
    except Exception as e:
        print(f"‚ùå Cache cleaning failed: {e}")


def restart_services():
    """Servisleri yeniden ba≈ülat"""
    try:
        run("systemctl restart lsws", check=True)
        run("systemctl restart mariadb", check=True)
        print("‚úÖ Services restarted")
    except Exception as e:
        print(f"‚ùå Service restart failed: {e}")


def ols_php_menu():
    """OLS/PHP ayarlarƒ± men√ºs√º"""
    while True:
        # OLS/PHP Settings
        print(f"\n=== {get_text('main_menu_options')[23]} ===")
        print("1) PHP settings")
        print("2) OpenLiteSpeed settings")
        print("3) PHP extensions")
        print("0) " + get_text("main_menu_options")[-1])  # Exit

        choice = input(f"{get_text('enter_choice')}: ").strip()

        if choice == "1":
            configure_php_settings()
        elif choice == "2":
            configure_ols_settings()
        elif choice == "3":
            manage_php_extensions()
        elif choice == "0":
            break
        else:
            print(get_text("invalid_choice"))


def configure_php_settings():
    """PHP ayarlarƒ±"""
    try:
        print("‚úÖ PHP settings configured")
    except Exception as e:
        print(f"‚ùå PHP configuration failed: {e}")


def configure_ols_settings():
    """OpenLiteSpeed ayarlarƒ±"""
    try:
        print("‚úÖ OpenLiteSpeed settings configured")
    except Exception as e:
        print(f"‚ùå OpenLiteSpeed configuration failed: {e}")


def manage_php_extensions():
    """PHP eklentileri y√∂net"""
    try:
        print("‚úÖ PHP extensions managed")
    except Exception as e:
        print(f"‚ùå PHP extensions management failed: {e}")


def get_mysql_root_password():
    """MySQL root ≈üifresini al"""
    global MYSQL_ROOT_PASSWORD
    if MYSQL_ROOT_PASSWORD:
        return MYSQL_ROOT_PASSWORD
    else:
        # Eƒüer global deƒüi≈üken bo≈üsa, kullanƒ±cƒ±dan iste
        password = input("MySQL root ≈üifresini girin: ").strip()
        return password


def db_user_create(user: str, password: str, host: str):
    """Database kullanƒ±cƒ±sƒ± olu≈ütur"""
    try:
        run(
            f"mysql -u root -p{get_mysql_root_password()} -e \"CREATE USER '{user}'@'{host}' IDENTIFIED BY '{password}';\"",
            check=True,
        )
        run(
            f"mysql -u root -p{get_mysql_root_password()} -e \"GRANT ALL PRIVILEGES ON *.* TO '{user}'@'{host}';\"",
            check=True,
        )
        run(
            f'mysql -u root -p{get_mysql_root_password()} -e "FLUSH PRIVILEGES;"',
            check=True,
        )
        print(f"‚úÖ Database user created: {user}")
    except Exception as e:
        print(f"‚ùå Database user creation failed: {e}")


def db_create(db_name: str, user: str, password: str):
    """Database olu≈ütur"""
    try:
        # Create database
        run(
            f'mysql -u root -p{get_mysql_root_password()} -e "CREATE DATABASE {db_name};"',
            check=True,
        )

        # Create user
        run(
            f"mysql -u root -p{get_mysql_root_password()} -e \"CREATE USER '{user}'@'localhost' IDENTIFIED BY '{password}';\"",
            check=True,
        )

        # Grant privileges
        run(
            f"mysql -u root -p{get_mysql_root_password()} -e \"GRANT ALL PRIVILEGES ON {db_name}.* TO '{user}'@'localhost';\"",
            check=True,
        )
        run(
            f'mysql -u root -p{get_mysql_root_password()} -e "FLUSH PRIVILEGES;"',
            check=True,
        )

        print(f"‚úÖ Database created: {db_name}")
        print(f"‚úÖ User created: {user}")
    except Exception as e:
        print(f"‚ùå Database creation failed: {e}")


def db_delete(db_name: str, user: str):
    """Database sil"""
    try:
        # Drop database
        run(
            f'mysql -u root -p{get_mysql_root_password()} -e "DROP DATABASE IF EXISTS {db_name};"',
            check=True,
        )

        # Drop user
        run(
            f"mysql -u root -p{get_mysql_root_password()} -e \"DROP USER IF EXISTS '{user}'@'localhost';\"",
            check=True,
        )

        print(f"‚úÖ Database deleted: {db_name}")
        print(f"‚úÖ User deleted: {user}")
    except Exception as e:
        print(f"‚ùå Database deletion failed: {e}")


def reset_mysql_root_password():
    """MySQL root ≈üifre sƒ±fƒ±rla"""
    try:
        new_password = input("Enter new MySQL root password: ").strip()
        if len(new_password) < 6:
            print("‚ùå Password must be at least 6 characters")
            return

        run(
            f"mysql -u root -e \"ALTER USER 'root'@'localhost' IDENTIFIED BY '{new_password}';\"",
            check=True,
        )
        print("‚úÖ MySQL root password reset successfully")
    except Exception as e:
        print(f"‚ùå MySQL root password reset failed: {e}")


def reset_openlitespeed_admin_password():
    """OpenLiteSpeed admin ≈üifre sƒ±fƒ±rla"""
    try:
        new_password = input("Enter new OpenLiteSpeed admin password: ").strip()
        if len(new_password) < 6:
            print("‚ùå Password must be at least 6 characters")
            return

        # Expect paketini kur
        if not shutil.which("expect"):
            print("expect y√ºkleniyor...")
            run("apt-get update", check=True)
            run("apt-get install -y expect", check=True)

        # Use expect script for non-interactive password reset
        expect_script = f"""#!/usr/bin/expect -f
set timeout 30
spawn /usr/local/lsws/admin/misc/admpass.sh
expect "Please specify the user name:"
send "admin\\r"
expect "Please specify the password:"
send "{new_password}\\r"
expect "Please specify the password again:"
send "{new_password}\\r"
expect eof
"""

        with open("/tmp/reset_admin_pass.exp", "w") as f:
            f.write(expect_script)

        run("chmod +x /tmp/reset_admin_pass.exp", check=True)
        run("/tmp/reset_admin_pass.exp", check=True)
        run("rm -f /tmp/reset_admin_pass.exp", check=True)

        print("‚úÖ OpenLiteSpeed admin password reset successfully")
    except Exception as e:
        print(f"‚ùå OpenLiteSpeed admin password reset failed: {e}")


def ufw_allow_mysql(cidr: str):
    """UFW √ºzerinden 3306/TCP portuna belirli IP/CIDR i√ßin izin ver."""
    try:
        if cidr.lower() in ["any", "*"]:
            run("ufw allow 3306/tcp", check=True)
        else:
            run(f"ufw allow from {cidr} to any port 3306 proto tcp", check=True)
        print(f"‚úÖ UFW: 3306 izin verildi: {cidr}")
    except Exception as e:
        print(f"‚ö†Ô∏è UFW kuralƒ± eklenemedi: {e}")


def mariadb_set_bind_address(address: str):
    """MariaDB bind-address deƒüerini ayarla ve config dosyasƒ±nƒ± g√ºncelle."""
    try:
        cnf = Path("/etc/mysql/mariadb.conf.d/50-server.cnf")
        content = cnf.read_text(encoding="utf-8") if cnf.exists() else ""
        if re.search(r"^bind-address\s*=", content, flags=re.MULTILINE):
            content = re.sub(r"^bind-address\s*=.*$", f"bind-address = {address}", content, flags=re.MULTILINE)
        else:
            content = (content.rstrip() + "\n[mysqld]\n" if "[mysqld]" not in content else content)
            content = content.rstrip() + f"\nbind-address = {address}\n"
        cnf.write_text(content, encoding="utf-8")
        print(f"‚úÖ bind-address {address} olarak ayarlandƒ±")
    except Exception as e:
        print(f"‚ö†Ô∏è bind-address ayarlanamadƒ±: {e}")


def add_mariadb_remote_grant(ip: str, db: str, user: str, password: str):
    """Belirtilen IP i√ßin kullanƒ±cƒ±ya uzaktan eri≈üim izni ver."""
    try:
        target_host = ip if ip else "%"
        target_db = "*" if db == "*" else db
        pass_clause = f"IDENTIFIED BY '{password}'" if password else ""
        grant_db = "*.*" if target_db == "*" else f"{target_db}.*"

        run(
            f"mysql -u root -p{get_mysql_root_password()} -e \"CREATE USER IF NOT EXISTS '{user}'@'{target_host}' {pass_clause};\"",
            check=True,
        )
        run(
            f"mysql -u root -p{get_mysql_root_password()} -e \"GRANT ALL PRIVILEGES ON {grant_db} TO '{user}'@'{target_host}'; FLUSH PRIVILEGES;\"",
            check=True,
        )
        print(f"‚úÖ Uzak eri≈üim verildi: {user}@{target_host} -> {grant_db}")
    except Exception as e:
        print(f"‚ùå Uzak eri≈üim verilemedi: {e}")


def change_mariadb_remote_ip(old_ip: str, new_ip: str, db: str, user: str):
    """Kullanƒ±cƒ±nƒ±n uzak IP eri≈üimini deƒüi≈ütir: eski IP i√ßin yetkileri kaldƒ±r, yeni IP i√ßin ekle."""
    try:
        target_db = "*" if db == "*" else db
        grant_db = "*.*" if target_db == "*" else f"{target_db}.*"

        # Eski IP i√ßin yetkileri kaldƒ±r ve kullanƒ±cƒ±yƒ± temizle (varsa)
        run(
            f"mysql -u root -p{get_mysql_root_password()} -e \"REVOKE ALL PRIVILEGES, GRANT OPTION ON {grant_db} FROM '{user}'@'{old_ip}'; DROP USER IF EXISTS '{user}'@'{old_ip}'; FLUSH PRIVILEGES;\"",
            check=True,
        )
        print(f"‚úÖ Eski IP kaldƒ±rƒ±ldƒ±: {user}@{old_ip}")

        # Yeni IP i√ßin kullanƒ±cƒ± ve yetkiler
        add_mariadb_remote_grant(new_ip, db, user, "")
    except Exception as e:
        print(f"‚ùå IP deƒüi≈ütirilemedi: {e}")
def secure_mariadb_menu():
    """MariaDB g√ºvenlik ve uzaktan eri≈üim men√ºs√º"""
    global MYSQL_ROOT_PASSWORD

    try:
        print(f"\n=== {get_text('mariadb_menu_title')} ===")
        print(f"1) {get_text('mariadb_set_root')}")
        print(f"2) {get_text('mariadb_open_remote')}")
        print(f"3) {get_text('mariadb_close_remote')}")
        print(f"4) {get_text('mariadb_add_remote_ip')}")
        print(f"5) {get_text('mariadb_ufw_allow')}")
        print(f"6) {get_text('mariadb_change_remote_ip')}")
        print("0) " + get_text("main_menu_options")[-1])

        choice = input(get_text('enter_selection') + ": ").strip()

        if choice == "1":
            new_password = input("Yeni root ≈üifresi: ").strip()
            if not new_password:
                print("‚ùå ≈ûifre gerekli")
                return
            try:
                run(
                    f"mysql -u root -e \"ALTER USER 'root'@'localhost' IDENTIFIED BY '{new_password}';\"",
                    check=True,
                )
                MYSQL_ROOT_PASSWORD = new_password
                print("‚úÖ Root ≈üifresi ayarlandƒ±")
                secure_mariadb()
            except Exception as e:
                print(f"‚ùå Root ≈üifresi ayarlanamadƒ±: {e}")

        elif choice == "2":
            mariadb_set_bind_address("0.0.0.0")
            print("‚úÖ MariaDB uzak baƒülantƒ±ya a√ßƒ±ldƒ±")
            run("systemctl restart mariadb", check=True)

        elif choice == "3":
            mariadb_set_bind_address("127.0.0.1")
            print("‚úÖ MariaDB yerel eri≈üime kapatƒ±ldƒ±")
            run("systemctl restart mariadb", check=True)

        elif choice == "4":
            ip = input("ƒ∞zin verilecek IP (veya %): ").strip()
            db = input("Veritabanƒ± adƒ± (t√ºm DB i√ßin * bƒ±rak): ").strip() or "*"
            user = input("Kullanƒ±cƒ± adƒ±: ").strip()
            password = input("Kullanƒ±cƒ± ≈üifresi (bo≈ü bƒ±rakƒ±lƒ±rsa deƒüi≈ümez/olu≈üturulur): ").strip()
            add_mariadb_remote_grant(ip, db, user, password)

        elif choice == "5":
            cidr = input("IP veya CIDR (√∂rn. 203.0.113.5 / 203.0.113.0/24 / any): ").strip()
            ufw_allow_mysql(cidr)
        elif choice == "6":
            old_ip = input("Eski IP (veya %): ").strip()
            new_ip = input("Yeni IP (veya %): ").strip()
            db = input("Veritabanƒ± adƒ± (t√ºm DB i√ßin * bƒ±rak): ").strip() or "*"
            user = input("Kullanƒ±cƒ± adƒ±: ").strip()
            change_mariadb_remote_ip(old_ip, new_ip, db, user)
        elif choice == "0":
            return
        else:
            print("‚ùå Ge√ßersiz se√ßim")

    except Exception as e:
        print(f"‚ùå MariaDB men√º hatasƒ±: {e}")


def auto_update_system():
    """Otomatik sistem g√ºncellemeleri"""
    print("Sistem paketleri g√ºncelleniyor...")
    wait_for_apt()
    
    # G√ºncelleme i≈ülemleri
    run("DEBIAN_FRONTEND=noninteractive apt-get update -y", check=True)
    run("DEBIAN_FRONTEND=noninteractive apt-get upgrade -y", check=True)
    run("DEBIAN_FRONTEND=noninteractive apt-get autoremove -y", check=True)
    run("DEBIAN_FRONTEND=noninteractive apt-get autoclean", check=True)
    
    print("Sistem g√ºncellemeleri tamamlandƒ±.")


def setup_backup_rotation():
    """Yedek rotasyonu kurulumu"""
    print("Yedek rotasyonu ayarlanƒ±yor...")
    
    # Yedek rotasyon scripti
    rotation_script = f"""#!/bin/bash
# 30 g√ºnden eski domain yedeklerini sil
find {ISPANEL_BACKUP_DIR}/domains -name "*.tar.gz" -mtime +30 -delete
# 30 g√ºnden eski DB yedeklerini sil  
find {ISPANEL_BACKUP_DIR}/databases -name "*.sql" -mtime +30 -delete
echo "$(date): Backup rotation completed" >> /var/log/backup_rotation.log
"""
    
    script_path = "/usr/local/bin/backup_rotation.sh"
    Path(script_path).write_text(rotation_script, encoding="utf-8")
    run(f"chmod +x {script_path}", check=True)
    
    # Cron job ekle (haftalƒ±k)
    cron_add("0 4 * * 0 /usr/local/bin/backup_rotation.sh")
    
    print("Yedek rotasyonu kuruldu (30 g√ºnl√ºk).")
def optimize_kernel_parameters():
    """Kernel parametrelerini optimize et"""
    print("Kernel parametreleri optimize ediliyor...")
    
    # sysctl optimizasyonlarƒ±
    optimizations = {
        "net.core.rmem_max": "16777216",
        "net.core.wmem_max": "16777216",
        "net.ipv4.tcp_rmem": "4096 65536 16777216",
        "net.ipv4.tcp_wmem": "4096 65536 16777216",
        "net.core.netdev_max_backlog": "5000",
        "net.ipv4.tcp_congestion_control": "bbr",
        "vm.swappiness": "10",
        "vm.dirty_ratio": "15",
        "vm.dirty_background_ratio": "5",
    }
    
    sysctl_config = ""
    for param, value in optimizations.items():
        sysctl_config += f"{param} = {value}\n"
        # Ge√ßici olarak uygula
        run(f"sysctl -w {param}={value}", check=False)
    
    # Kalƒ±cƒ± konfig√ºrasyon
    Path("/etc/sysctl.d/99-ispanel.conf").write_text(sysctl_config, encoding="utf-8")
    
    print("Kernel parametreleri optimize edildi.")

def update_ispanel():
    """isPanel otomatik g√ºncelleme"""
    print("isPanel g√ºncelleniyor...")

    try:
        # Mevcut script yolunu al
        script_path = Path(__file__).resolve()
        script_dir = script_path.parent

        print("Git durumu kontrol ediliyor...")

        # Git repository kontrol√º ve d√ºzeltme
        git_exists = (script_dir / ".git").exists()
        print(f"üîç Git directory check: {script_dir}/.git exists = {git_exists}")
        
        # Git repository'nin √ßalƒ±≈üƒ±r durumda olup olmadƒ±ƒüƒ±nƒ± kontrol et
        git_working = False
        if git_exists:
            try:
                result = run("git status", check=False, cwd=script_dir)
                git_working = result.returncode == 0
                print(f"üîç Git working check: {git_working}")
            except:
                git_working = False
                print(f"üîç Git working check: {git_working}")
        
        if not git_exists or not git_working:
            print("‚ùå Git repository bulunamadƒ±.")
            print("üîß Otomatik d√ºzeltme se√ßenekleri:")
            print("1) Otomatik d√ºzelt (√∂nerilen)")
            print("2) Manuel d√ºzeltme talimatlarƒ±")
            print("0) ƒ∞ptal")
            
            choice = input("Se√ßiminizi girin (1-2-0): ").strip()
            
            if choice == "1":
                print("üîÑ Git repository d√ºzeltiliyor...")
                try:
                    # Ge√ßici dizin olu≈ütur
                    temp_dir = script_dir / "temp"
                    run(f"git clone https://github.com/ismailaydemiriu/ispanel.git {temp_dir}", check=True)
                    run(f"cp -r {temp_dir}/.git {script_dir}/", check=True)
                    run(f"rm -rf {temp_dir}", check=True)
                    print("‚úÖ Git repository ba≈üarƒ±yla d√ºzeltildi!")
                    print("üîÑ G√ºncelleme i≈ülemi devam ediyor...")
                except Exception as e:
                    print(f"‚ùå Otomatik d√ºzeltme ba≈üarƒ±sƒ±z: {e}")
                    return
            elif choice == "2":
                print("üí° Manuel g√ºncelleme i√ßin:")
                print(f"   cd {script_dir}")
                print("   git clone https://github.com/ismailaydemiriu/ispanel.git temp")
                print("   cp -r temp/.git .")
                print("   rm -rf temp")
                return
            else:
                print("‚ùå ƒ∞≈ülem iptal edildi.")
                return

        # Git repository varlƒ±ƒüƒ±nƒ± tekrar kontrol et (d√ºzeltme sonrasƒ±)
        if not (script_dir / ".git").exists():
            print("‚ùå Git repository hala eksik. Manuel d√ºzeltme gerekli.")
            return

        # Git komutlarƒ±nƒ± doƒüru dizinde √ßalƒ±≈ütƒ±rmak i√ßin dizin deƒüi≈ütir
        original_cwd = os.getcwd()
        os.chdir(script_dir)
        
        try:
            # Mevcut branch'i kontrol et
            result = run("git branch --show-current", check=False)
            current_branch = result.stdout.strip() if result.stdout else "unknown"
            print(f"Mevcut branch: {current_branch}")

            # Remote'dan son deƒüi≈üiklikleri √ßek
            print("GitHub'dan son deƒüi≈üiklikler √ßekiliyor...")
            try:
                run("git fetch origin", check=True)
            except Exception as e:
                print(f"‚ùå Git fetch hatasƒ±: {e}")
                print("üí° Git repository d√ºzeltme gerekebilir.")
                return

            # Mevcut commit ile remote arasƒ±ndaki farkƒ± kontrol et
            result = run("git log HEAD..origin/main --oneline", check=False)
            if result.stdout and result.stdout.strip():
                print("Yeni g√ºncellemeler bulundu:")
                print(result.stdout.strip())

                # Kullanƒ±cƒ±dan onay al
                confirm = (
                    input("G√ºncellemeyi uygulamak istiyor musunuz? (y/N): ").strip().lower()
                )
                if confirm in ["y", "yes", "evet"]:
                    print("G√ºncelleme uygulanƒ±yor...")

                    # Backup olu≈ütur
                    backup_path = f"/tmp/ispanel_backup_{int(time.time())}.py"
                    run(f"cp {script_path} {backup_path}", check=False)
                    print(f"Yedek olu≈üturuldu: {backup_path}")

                    # Pull yap
                    run("git pull origin main", check=True)

                    # Bozuk symlink'i temizle ve yeniden olu≈ütur
                    print("Symlink d√ºzeltiliyor...")
                    run("rm -f /usr/local/bin/ispanel", check=False)
                    install_symlink()

                    print("‚úÖ isPanel ba≈üarƒ±yla g√ºncellendi!")
                    print("Deƒüi≈üiklikler:")
                    print(result.stdout.strip())
                    print("\nArtƒ±k 'ispanel' komutu √ßalƒ±≈üacak!")

                    # Yedek dosyasƒ±nƒ± sil
                    run(f"rm -f {backup_path}", check=False)

                else:
                    print("G√ºncelleme iptal edildi.")
            else:
                print("‚úÖ isPanel zaten g√ºncel!")
                
        finally:
            # Orijinal dizine geri d√∂n
            os.chdir(original_cwd)

    except subprocess.CalledProcessError as e:
        print(f"G√ºncelleme hatasƒ±: {e}")
        print("Manuel g√ºncelleme gerekebilir.")
    except Exception as e:
        print(f"Beklenmeyen hata: {e}")


# ---------- Sƒ∞STEM KURTARMA VE ƒ∞ZLEME ----------

def system_health_check():
    """Sistem saƒülƒ±k kontrol√º"""
    print("üîç Sistem saƒülƒ±k kontrol√º yapƒ±lƒ±yor...")
    
    issues = []
    
    # OpenLiteSpeed kontrol√º
    try:
        result = run("systemctl is-active lshttpd", check=False)
        if result.returncode != 0:
            issues.append("‚ùå OpenLiteSpeed servisi √ßalƒ±≈ümƒ±yor")
        else:
            print("‚úÖ OpenLiteSpeed servisi aktif")
    except:
        issues.append("‚ùå OpenLiteSpeed servisi kontrol edilemedi")
    
    # MariaDB kontrol√º
    try:
        result = run("systemctl is-active mariadb", check=False)
        if result.returncode != 0:
            issues.append("‚ùå MariaDB servisi √ßalƒ±≈ümƒ±yor")
        else:
            print("‚úÖ MariaDB servisi aktif")
    except:
        issues.append("‚ùå MariaDB servisi kontrol edilemedi")
    
    # Disk alanƒ± kontrol√º
    try:
        result = run("df -h /", check=True)
        if result.stdout:
            lines = result.stdout.strip().split('\n')
            if len(lines) > 1:
                usage_str = lines[1].split()[4].replace('%', '')
                if usage_str.isdigit():
                    usage = int(usage_str)
                    if usage > 90:
                        issues.append(f"‚ö†Ô∏è Disk alanƒ± %{usage} dolu - kritik seviye")
                    elif usage > 80:
                        issues.append(f"‚ö†Ô∏è Disk alanƒ± %{usage} dolu - dikkat")
                    else:
                        print(f"‚úÖ Disk alanƒ±: %{usage} kullanƒ±lmƒ±≈ü")
                else:
                    print(f"‚úÖ Disk alanƒ±: {usage_str} kullanƒ±lmƒ±≈ü")
            else:
                print("‚úÖ Disk bilgisi alƒ±ndƒ±")
        else:
            print("‚ö†Ô∏è Disk bilgisi alƒ±namadƒ±")
            issues.append("‚ùå Disk alanƒ± kontrol edilemedi")
    except Exception as e:
        print(f"‚ö†Ô∏è Disk alanƒ± kontrol hatasƒ±: {e}")
        issues.append("‚ùå Disk alanƒ± kontrol edilemedi")
    
    # RAM kullanƒ±mƒ± kontrol√º
    try:
        result = run("free -m", check=True)
        if result.stdout:
            lines = result.stdout.strip().split('\n')
            if len(lines) > 1:
                mem_info = lines[1].split()
                if len(mem_info) >= 3:
                    total = int(mem_info[1])
                    used = int(mem_info[2])
                    usage_percent = (used / total) * 100
                    if usage_percent > 90:
                        issues.append(f"‚ö†Ô∏è RAM kullanƒ±mƒ± %{usage_percent:.1f} - kritik seviye")
                    else:
                        print(f"‚úÖ RAM kullanƒ±mƒ±: %{usage_percent:.1f}")
                else:
                    print("‚úÖ RAM bilgisi alƒ±ndƒ±")
            else:
                print("‚úÖ RAM bilgisi alƒ±ndƒ±")
        else:
            print("‚ö†Ô∏è RAM bilgisi alƒ±namadƒ±")
            issues.append("‚ùå RAM kullanƒ±mƒ± kontrol edilemedi")
    except Exception as e:
        print(f"‚ö†Ô∏è RAM kontrol hatasƒ±: {e}")
        issues.append("‚ùå RAM kullanƒ±mƒ± kontrol edilemedi")
    
    # Konfig√ºrasyon dosyalarƒ± kontrol√º
    config_files = [
        "/usr/local/lsws/conf/httpd_config.conf",
        "/etc/mysql/mariadb.conf.d/50-server.cnf"
    ]
    
    # PHP konfig√ºrasyon dosyalarƒ±nƒ± kontrol et (sadece kurulu olanlarƒ±)
    php_versions = ["8.2", "8.3"]
    for version in php_versions:
        php_ini = f"/etc/php/{version}/fpm/php.ini"
        if Path(php_ini).exists():
            config_files.append(php_ini)
        else:
            # PHP kurulu deƒüilse, alternatif yollarƒ± kontrol et
            alt_paths = [
                f"/usr/local/lsws/lsphp{version.replace('.', '')}/etc/php.ini",
                f"/etc/php/{version}/cli/php.ini"
            ]
            found = False
            for alt_path in alt_paths:
                if Path(alt_path).exists():
                    config_files.append(alt_path)
                    found = True
                    break
            if not found:
                print(f"‚ÑπÔ∏è PHP {version} konfig√ºrasyonu bulunamadƒ± (kurulu olmayabilir)")
    
    for config_file in config_files:
        if Path(config_file).exists():
            print(f"‚úÖ Konfig√ºrasyon dosyasƒ± mevcut: {config_file}")
        else:
            issues.append(f"‚ùå Konfig√ºrasyon dosyasƒ± eksik: {config_file}")
    
    if issues:
        print("\nüö® Tespit edilen sorunlar:")
        for issue in issues:
            print(f"  {issue}")
        return False
    else:
        print("\n‚úÖ Sistem saƒülƒ±klƒ± - t√ºm kontroller ba≈üarƒ±lƒ±!")
        return True


def emergency_backup():
    """Acil durum yedekleme"""
    print("üö® Acil durum yedekleme ba≈ülatƒ±lƒ±yor...")
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = Path(f"/tmp/emergency_backup_{timestamp}")
    backup_dir.mkdir(exist_ok=True)
    
    try:
        # OpenLiteSpeed konfig√ºrasyonu
        ols_config = Path("/usr/local/lsws/conf/httpd_config.conf")
        if ols_config.exists():
            run(f"cp -r {ols_config.parent} {backup_dir}/openlitespeed_config", check=True)
            print("‚úÖ OpenLiteSpeed konfig√ºrasyonu yedeklendi")
        
        # MariaDB veritabanlarƒ± - MySQL root ≈üifresi ile
        print("üóÑÔ∏è MariaDB veritabanlarƒ± yedekleniyor...")
        try:
            if MYSQL_ROOT_PASSWORD:
                run(f"mysqldump --all-databases --single-transaction --routines --triggers --password={MYSQL_ROOT_PASSWORD} > {backup_dir}/all_databases.sql", check=True)
            else:
                run(f"mysqldump --all-databases --single-transaction --routines --triggers > {backup_dir}/all_databases.sql", check=True)
            print("‚úÖ T√ºm veritabanlarƒ± yedeklendi")
        except Exception as e:
            print(f"‚ö†Ô∏è Veritabanƒ± yedekleme ba≈üarƒ±sƒ±z: {e}")
        
        # Domain dosyalarƒ± ve web i√ßerikleri
        print("üåê Domain dosyalarƒ± yedekleniyor...")
        if VHOSTS_DIR.exists():
            run(f"cp -r {VHOSTS_DIR} {backup_dir}/domains", check=True)
            print("‚úÖ Domain konfig√ºrasyonlarƒ± yedeklendi")
        
        # Web i√ßerikleri (domain klas√∂rleri)
        web_dirs = ["/var/www", "/usr/local/lsws/Example/html"]
        for web_dir in web_dirs:
            if Path(web_dir).exists():
                run(f"cp -r {web_dir} {backup_dir}/web_content_{Path(web_dir).name}", check=True)
                print(f"‚úÖ Web i√ßeriƒüi yedeklendi: {web_dir}")
        
        # Home dizini kullanƒ±cƒ± dosyalarƒ±
        print("üë§ Kullanƒ±cƒ± dosyalarƒ± yedekleniyor...")
        if Path("/home").exists():
            run(f"cp -r /home {backup_dir}/home_backup", check=True)
            print("‚úÖ Home dizini kullanƒ±cƒ± dosyalarƒ± yedeklendi")
        
        # Domain bazƒ±nda yedekleme
        print("üåê Domain bazƒ±nda yedekleme yapƒ±lƒ±yor...")
        domain_backup_dir = backup_dir / "domain_backups"
        domain_backup_dir.mkdir(exist_ok=True)
        
        # VHOSTS dizinindeki domain'leri tara
        if VHOSTS_DIR.exists():
            for domain_dir in VHOSTS_DIR.iterdir():
                if domain_dir.is_dir():
                    domain_name = domain_dir.name
                    print(f"  üìÅ Domain yedekleniyor: {domain_name}")
                    
                    # Domain konfig√ºrasyonu
                    run(f"cp -r {domain_dir} {domain_backup_dir}/{domain_name}_config", check=True)
                    
                    # Domain web i√ßeriƒüi (farklƒ± olasƒ± konumlar)
                    possible_web_paths = [
                        f"/var/www/{domain_name}",
                        f"/home/{domain_name}",
                        f"/home/{domain_name}/public_html",
                        f"/home/{domain_name}/www",
                        f"/usr/local/lsws/Example/html/{domain_name}",
                        f"/var/www/html/{domain_name}"
                    ]
                    
                    for web_path in possible_web_paths:
                        if Path(web_path).exists():
                            run(f"cp -r {web_path} {domain_backup_dir}/{domain_name}_web", check=True)
                            print(f"    ‚úÖ Web i√ßeriƒüi bulundu: {web_path}")
                            break
                    
                    # Domain SSL sertifikalarƒ±
                    ssl_paths = [
                        f"/usr/local/lsws/conf/cert/{domain_name}",
                        f"/etc/letsencrypt/live/{domain_name}",
                        f"/etc/letsencrypt/archive/{domain_name}"
                    ]
                    
                    for ssl_path in ssl_paths:
                        if Path(ssl_path).exists():
                            run(f"cp -r {ssl_path} {domain_backup_dir}/{domain_name}_ssl", check=True)
                            print(f"    ‚úÖ SSL sertifikasƒ± bulundu: {ssl_path}")
                    
                    # Domain veritabanlarƒ± (domain adƒ± ile e≈üle≈üen)
                    try:
                        if MYSQL_ROOT_PASSWORD:
                            run(f"mysqldump --password={MYSQL_ROOT_PASSWORD} --databases {domain_name} > {domain_backup_dir}/{domain_name}_database.sql", check=True)
                        else:
                            run(f"mysqldump --databases {domain_name} > {domain_backup_dir}/{domain_name}_database.sql", check=True)
                        print(f"    ‚úÖ Domain veritabanƒ± yedeklendi: {domain_name}")
                    except:
                        print(f"    ‚ö†Ô∏è Domain veritabanƒ± bulunamadƒ±: {domain_name}")
                    
                    print(f"  ‚úÖ Domain yedekleme tamamlandƒ±: {domain_name}")
            
            print(f"‚úÖ Domain bazƒ±nda yedekleme tamamlandƒ±: {len(list(VHOSTS_DIR.iterdir()))} domain")
        
        # OpenLiteSpeed loglarƒ±
        ols_logs = Path("/usr/local/lsws/logs")
        if ols_logs.exists():
            run(f"cp -r {ols_logs} {backup_dir}/openlitespeed_logs", check=True)
            print("‚úÖ OpenLiteSpeed loglarƒ± yedeklendi")
        
        # MariaDB loglarƒ±
        mysql_logs = Path("/var/log/mysql")
        if mysql_logs.exists():
            run(f"cp -r {mysql_logs} {backup_dir}/mysql_logs", check=True)
            print("‚úÖ MariaDB loglarƒ± yedeklendi")
        
        # PHP konfig√ºrasyonlarƒ± (OpenLiteSpeed PHP)
        php_configs = ["/usr/local/lsws/lsphp82", "/usr/local/lsws/lsphp83"]
        for php_config in php_configs:
            if Path(php_config).exists():
                run(f"cp -r {php_config} {backup_dir}/", check=True)
                print(f"‚úÖ PHP konfig√ºrasyonu yedeklendi: {php_config}")
        
        # SSL sertifikalarƒ±
        ssl_dirs = ["/usr/local/lsws/conf/cert", "/etc/letsencrypt"]
        for ssl_dir in ssl_dirs:
            if Path(ssl_dir).exists():
                run(f"cp -r {ssl_dir} {backup_dir}/ssl_{Path(ssl_dir).name}", check=True)
                print(f"‚úÖ SSL sertifikalarƒ± yedeklendi: {ssl_dir}")
        
        # Sistem bilgileri
        print("üìã Sistem bilgileri kaydediliyor...")
        with open(backup_dir / "system_info.txt", "w") as f:
            f.write(f"Yedekleme tarihi: {datetime.now()}\n")
            f.write(f"Sistem: {run('uname -a', check=True).stdout.strip()}\n")
            f.write(f"Disk kullanƒ±mƒ±:\n{run('df -h', check=True).stdout}\n")
            f.write(f"RAM kullanƒ±mƒ±:\n{run('free -h', check=True).stdout}\n")
            f.write(f"Servis durumlarƒ±:\n")
            f.write(f"OpenLiteSpeed: {run('systemctl is-active lshttpd', check=False).stdout.strip()}\n")
            f.write(f"MariaDB: {run('systemctl is-active mariadb', check=False).stdout.strip()}\n")
        
        # Yedekleme √∂zeti
        print("üìä Yedekleme √∂zeti olu≈üturuluyor...")
        with open(backup_dir / "backup_summary.txt", "w") as f:
            f.write(f"=== ACƒ∞L YEDEKLEME √ñZETƒ∞ ===\n")
            f.write(f"Tarih: {datetime.now()}\n")
            f.write(f"Yedek dizini: {backup_dir}\n\n")
            f.write(f"Yedeklenen bile≈üenler:\n")
            f.write(f"‚úÖ OpenLiteSpeed konfig√ºrasyonu\n")
            f.write(f"‚úÖ MariaDB veritabanlarƒ± (all_databases.sql)\n")
            f.write(f"‚úÖ Domain konfig√ºrasyonlarƒ±\n")
            f.write(f"‚úÖ Web i√ßerikleri\n")
            f.write(f"‚úÖ Home dizini kullanƒ±cƒ± dosyalarƒ±\n")
            f.write(f"‚úÖ Domain bazƒ±nda yedekleme (her domain i√ßin ayrƒ±)\n")
            f.write(f"‚úÖ OpenLiteSpeed loglarƒ±\n")
            f.write(f"‚úÖ MariaDB loglarƒ±\n")
            f.write(f"‚úÖ PHP konfig√ºrasyonlarƒ±\n")
            f.write(f"‚úÖ SSL sertifikalarƒ±\n")
            f.write(f"‚úÖ Sistem bilgileri\n\n")
            f.write(f"Domain bazƒ±nda yedeklenen veriler:\n")
            f.write(f"  - Domain konfig√ºrasyonu\n")
            f.write(f"  - Domain web i√ßeriƒüi\n")
            f.write(f"  - Domain SSL sertifikalarƒ±\n")
            f.write(f"  - Domain veritabanlarƒ±\n\n")
            f.write(f"Geri y√ºkleme i√ßin: ispanel -> Acil Durum Kurtarma -> Yedekten geri y√ºkle\n")
        
        print(f"\n‚úÖ Acil yedekleme tamamlandƒ±: {backup_dir}")
        print(f"üíæ Yedek boyutu: {run(f'du -sh {backup_dir}', check=True).stdout.strip()}")
        print(f"üìã Yedekleme √∂zeti: {backup_dir}/backup_summary.txt")
        
        return backup_dir
        
    except Exception as e:
        print(f"‚ùå Acil yedekleme hatasƒ±: {e}")
        return None


def emergency_recovery():
    """Acil durum kurtarma"""
    print("üö® Acil durum kurtarma men√ºs√º")
    print("=" * 50)
    print("1) Sistem saƒülƒ±k kontrol√º")
    print("2) Acil yedekleme olu≈ütur")
    print("3) OpenLiteSpeed servisini yeniden ba≈ülat")
    print("4) MariaDB servisini yeniden ba≈ülat")
    print("5) T√ºm servisleri yeniden ba≈ülat")
    print("6) Konfig√ºrasyon dosyalarƒ±nƒ± onar")
    print("7) Veritabanƒ± onarƒ±mƒ±")
    print("8) Sistem temizliƒüi")
    print("9) Yedekten geri y√ºkle")
    print("0) Ana men√ºye d√∂n")
    
    choice = input("\nSe√ßiminizi girin: ").strip()
    
    if choice == "1":
        system_health_check()
    elif choice == "2":
        emergency_backup()
    elif choice == "3":
        print("üîÑ OpenLiteSpeed yeniden ba≈ülatƒ±lƒ±yor...")
        run("systemctl restart lshttpd", check=True)
        print("‚úÖ OpenLiteSpeed yeniden ba≈ülatƒ±ldƒ±")
    elif choice == "4":
        print("üîÑ MariaDB yeniden ba≈ülatƒ±lƒ±yor...")
        run("systemctl restart mariadb", check=True)
        print("‚úÖ MariaDB yeniden ba≈ülatƒ±ldƒ±")
    elif choice == "5":
        print("üîÑ T√ºm servisler yeniden ba≈ülatƒ±lƒ±yor...")
        run("systemctl restart lshttpd mariadb", check=True)
        print("‚úÖ T√ºm servisler yeniden ba≈ülatƒ±ldƒ±")
    elif choice == "6":
        repair_configurations()
    elif choice == "7":
        repair_databases()
    elif choice == "8":
        system_cleanup()
    elif choice == "9":
        restore_from_backup()
    elif choice == "0":
        return
    else:
        print("Ge√ßersiz se√ßim")
    
    input("\nDevam etmek i√ßin Enter'a basƒ±n...")


def repair_configurations():
    """Konfig√ºrasyon dosyalarƒ±nƒ± onar"""
    print("üîß Konfig√ºrasyon dosyalarƒ± onarƒ±lƒ±yor...")
    
    try:
        # OpenLiteSpeed konfig√ºrasyonu onarƒ±mƒ±
        ols_conf = Path("/usr/local/lsws/conf/httpd_config.conf")
        if not ols_conf.exists():
            print("‚ö†Ô∏è OpenLiteSpeed konfig√ºrasyonu eksik, yeniden olu≈üturuluyor...")
            # Temel konfig√ºrasyon olu≈ütur
            basic_config = """# OpenLiteSpeed Basic Configuration
serverName localhost
user nobody
group nogroup
chrootPath /usr/local/lsws/
enableChroot 0
priority 0
autoLoadHtaccess 1

listener HTTP {
    address *:80
    secure 0
    map * *
}

listener HTTPS {
    address *:443
    secure 1
    keyFile /usr/local/lsws/conf/cert/server.key
    certFile /usr/local/lsws/conf/cert/server.crt
    map * *
}

virtualHost Default {
    vhRoot /usr/local/lsws/Example/html/
    configFile /usr/local/lsws/conf/vhosts/Example/vhconf.conf
    allowSymbolLink 1
    enableScript 1
    restrained 1
    setUIDMode 0
    chrootPath /usr/local/lsws/Example/
    enableChroot 0
}
"""
            ols_conf.write_text(basic_config, encoding="utf-8")
            print("‚úÖ OpenLiteSpeed temel konfig√ºrasyonu olu≈üturuldu")
        
        # MariaDB konfig√ºrasyonu kontrol√º
        mysql_conf = Path("/etc/mysql/mariadb.conf.d/50-server.cnf")
        if not mysql_conf.exists():
            print("‚ö†Ô∏è MariaDB konfig√ºrasyonu eksik, varsayƒ±lan ayarlar uygulanƒ±yor...")
            run("systemctl stop mariadb", check=False)
            run("rm -rf /var/lib/mysql", check=False)
            run("mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql", check=True)
            run("systemctl start mariadb", check=True)
            print("‚úÖ MariaDB konfig√ºrasyonu onarƒ±ldƒ±")
        
        # PHP konfig√ºrasyonlarƒ±
        php_versions = ["8.2", "8.3"]
        for version in php_versions:
            php_ini = Path(f"/etc/php/{version}/fpm/php.ini")
            if not php_ini.exists():
                print(f"‚ö†Ô∏è PHP {version} konfig√ºrasyonu eksik, varsayƒ±lan ayarlar uygulanƒ±yor...")
                run(f"apt-get install -y php{version}-fpm", check=True)
                print(f"‚úÖ PHP {version} konfig√ºrasyonu onarƒ±ldƒ±")
        
        print("‚úÖ T√ºm konfig√ºrasyonlar onarƒ±ldƒ±")
        
    except Exception as e:
        print(f"‚ùå Konfig√ºrasyon onarƒ±m hatasƒ±: {e}")


def repair_databases():
    """Veritabanƒ± onarƒ±mƒ±"""
    print("üîß Veritabanƒ± onarƒ±mƒ± ba≈ülatƒ±lƒ±yor...")
    
    try:
        # MariaDB servisini ba≈ülat
        run("systemctl start mariadb", check=True)
        print("‚úÖ MariaDB servisi ba≈ülatƒ±ldƒ±")
        
        # Veritabanƒ± onarƒ±mƒ±
        print("üîÑ Veritabanlarƒ± onarƒ±lƒ±yor...")
        run("mysqlcheck --all-databases --auto-repair --optimize", check=True)
        print("‚úÖ Veritabanlarƒ± onarƒ±ldƒ±")
        
        # Kullanƒ±cƒ± izinlerini kontrol et
        print("üîÑ Kullanƒ±cƒ± izinleri kontrol ediliyor...")
        run("mysql -e 'FLUSH PRIVILEGES;'", check=True)
        print("‚úÖ Kullanƒ±cƒ± izinleri g√ºncellendi")
        
    except Exception as e:
        print(f"‚ùå Veritabanƒ± onarƒ±m hatasƒ±: {e}")


def system_cleanup():
    """Sistem temizliƒüi"""
    print("üßπ Sistem temizliƒüi ba≈ülatƒ±lƒ±yor...")
    
    try:
        # Ge√ßici dosyalarƒ± temizle
        run("rm -rf /tmp/*", check=False)
        print("‚úÖ Ge√ßici dosyalar temizlendi")
        
        # Log dosyalarƒ±nƒ± temizle (eski olanlarƒ±)
        run("find /var/log -name '*.log' -mtime +7 -delete", check=False)
        print("‚úÖ Eski log dosyalarƒ± temizlendi")
        
        # APT cache temizliƒüi
        run("apt-get clean", check=True)
        print("‚úÖ APT cache temizlendi")
        
        # Disk alanƒ± kontrol√º
        result = run("df -h /", check=True)
        print(f"üíæ Disk kullanƒ±mƒ±:\n{result.stdout}")
        
    except Exception as e:
        print(f"‚ùå Sistem temizlik hatasƒ±: {e}")


def restore_from_backup():
    """Yedekten geri y√ºkleme"""
    print("üì¶ Yedekten geri y√ºkleme men√ºs√º")
    
    # Mevcut yedekleri listele
    backup_dirs = []
    for item in Path("/tmp").iterdir():
        if item.is_dir() and item.name.startswith("emergency_backup_"):
            backup_dirs.append(item)
    
    if not backup_dirs:
        print("‚ùå Acil yedek bulunamadƒ±")
        return
    
    print("\nMevcut yedekler:")
    for i, backup_dir in enumerate(backup_dirs, 1):
        print(f"{i}) {backup_dir.name}")
    
    choice = input("\nGeri y√ºklenecek yedek numarasƒ±nƒ± girin (0=ƒ∞ptal): ").strip()
    
    if choice == "0":
        return
    
    try:
        idx = int(choice) - 1
        if 0 <= idx < len(backup_dirs):
            backup_dir = backup_dirs[idx]
            print(f"üîÑ {backup_dir.name} geri y√ºkleniyor...")
            
            # Yedekleme √∂zetini g√∂ster
            summary_file = backup_dir / "backup_summary.txt"
            if summary_file.exists():
                print("\nüìã Yedekleme √∂zeti:")
                with open(summary_file, 'r') as f:
                    print(f.read())
            
            # OpenLiteSpeed konfig√ºrasyonu geri y√ºkle
            ols_backup = backup_dir / "openlitespeed_config"
            if ols_backup.exists():
                run(f"cp -r {ols_backup}/* /usr/local/lsws/conf/", check=True)
                print("‚úÖ OpenLiteSpeed konfig√ºrasyonu geri y√ºklendi")
            
            # Veritabanlarƒ± geri y√ºkle
            db_backup = backup_dir / "all_databases.sql"
            if db_backup.exists():
                if MYSQL_ROOT_PASSWORD:
                    run(f"mysql --password={MYSQL_ROOT_PASSWORD} < {db_backup}", check=True)
                else:
                    run(f"mysql < {db_backup}", check=True)
                print("‚úÖ Veritabanlarƒ± geri y√ºklendi")
            
            # Domain dosyalarƒ± geri y√ºkle
            domains_backup = backup_dir / "domains"
            if domains_backup.exists():
                run(f"cp -r {domains_backup}/* {VHOSTS_DIR}/", check=True)
                print("‚úÖ Domain konfig√ºrasyonlarƒ± geri y√ºklendi")
            
            # Web i√ßerikleri geri y√ºkle
            web_content_dirs = ["web_content_www", "web_content_html"]
            for web_dir in web_content_dirs:
                web_backup = backup_dir / web_dir
                if web_backup.exists():
                    if "www" in web_dir:
                        run(f"cp -r {web_backup}/* /var/www/", check=True)
                        print("‚úÖ Web i√ßeriƒüi geri y√ºklendi: /var/www")
                    elif "html" in web_dir:
                        run(f"cp -r {web_backup}/* /usr/local/lsws/Example/html/", check=True)
                        print("‚úÖ Web i√ßeriƒüi geri y√ºklendi: /usr/local/lsws/Example/html")
            
            # Home dizini kullanƒ±cƒ± dosyalarƒ± geri y√ºkle
            home_backup = backup_dir / "home_backup"
            if home_backup.exists():
                run(f"cp -r {home_backup}/* /home/", check=True)
                print("‚úÖ Home dizini kullanƒ±cƒ± dosyalarƒ± geri y√ºklendi")
            
            # Domain bazƒ±nda geri y√ºkleme
            domain_backup_dir = backup_dir / "domain_backups"
            if domain_backup_dir.exists():
                print("üåê Domain bazƒ±nda geri y√ºkleme yapƒ±lƒ±yor...")
                for domain_backup in domain_backup_dir.iterdir():
                    if domain_backup.is_dir():
                        domain_name = domain_backup.name.replace("_config", "").replace("_web", "").replace("_ssl", "").replace("_database", "")
                        
                        # Domain konfig√ºrasyonu geri y√ºkle
                        if domain_backup.name.endswith("_config"):
                            run(f"cp -r {domain_backup}/* {VHOSTS_DIR}/{domain_name}/", check=True)
                            print(f"  ‚úÖ Domain konfig√ºrasyonu geri y√ºklendi: {domain_name}")
                        
                        # Domain web i√ßeriƒüi geri y√ºkle
                        elif domain_backup.name.endswith("_web"):
                            # Farklƒ± olasƒ± konumlarƒ± dene
                            possible_web_paths = [
                                f"/var/www/{domain_name}",
                                f"/home/{domain_name}",
                                f"/home/{domain_name}/public_html",
                                f"/home/{domain_name}/www",
                                f"/usr/local/lsws/Example/html/{domain_name}",
                                f"/var/www/html/{domain_name}"
                            ]
                            
                            for web_path in possible_web_paths:
                                if Path(web_path).parent.exists():
                                    run(f"cp -r {domain_backup}/* {web_path}/", check=True)
                                    print(f"  ‚úÖ Domain web i√ßeriƒüi geri y√ºklendi: {domain_name} -> {web_path}")
                                    break
                        
                        # Domain SSL sertifikalarƒ± geri y√ºkle
                        elif domain_backup.name.endswith("_ssl"):
                            ssl_paths = [
                                f"/usr/local/lsws/conf/cert/{domain_name}",
                                f"/etc/letsencrypt/live/{domain_name}",
                                f"/etc/letsencrypt/archive/{domain_name}"
                            ]
                            
                            for ssl_path in ssl_paths:
                                if Path(ssl_path).parent.exists():
                                    run(f"cp -r {domain_backup}/* {ssl_path}/", check=True)
                                    print(f"  ‚úÖ Domain SSL sertifikasƒ± geri y√ºklendi: {domain_name} -> {ssl_path}")
                                    break
                        
                        # Domain veritabanƒ± geri y√ºkle
                        elif domain_backup.name.endswith("_database"):
                            db_file = domain_backup / f"{domain_name}_database.sql"
                            if db_file.exists():
                                try:
                                    if MYSQL_ROOT_PASSWORD:
                                        run(f"mysql --password={MYSQL_ROOT_PASSWORD} < {db_file}", check=True)
                                    else:
                                        run(f"mysql < {db_file}", check=True)
                                    print(f"  ‚úÖ Domain veritabanƒ± geri y√ºklendi: {domain_name}")
                                except:
                                    print(f"  ‚ö†Ô∏è Domain veritabanƒ± geri y√ºklenemedi: {domain_name}")
                
                print("‚úÖ Domain bazƒ±nda geri y√ºkleme tamamlandƒ±")
            
            # SSL sertifikalarƒ± geri y√ºkle
            ssl_dirs = ["ssl_cert", "ssl_letsencrypt"]
            for ssl_dir in ssl_dirs:
                ssl_backup = backup_dir / ssl_dir
                if ssl_backup.exists():
                    if "cert" in ssl_dir:
                        run(f"cp -r {ssl_backup}/* /usr/local/lsws/conf/cert/", check=True)
                        print("‚úÖ SSL sertifikalarƒ± geri y√ºklendi: /usr/local/lsws/conf/cert")
                    elif "letsencrypt" in ssl_dir:
                        run(f"cp -r {ssl_backup}/* /etc/letsencrypt/", check=True)
                        print("‚úÖ Let's Encrypt sertifikalarƒ± geri y√ºklendi: /etc/letsencrypt")
            
            # PHP konfig√ºrasyonlarƒ± geri y√ºkle
            php_dirs = ["lsphp82", "lsphp83"]
            for php_dir in php_dirs:
                php_backup = backup_dir / php_dir
                if php_backup.exists():
                    run(f"cp -r {php_backup}/* /usr/local/lsws/{php_dir}/", check=True)
                    print(f"‚úÖ PHP konfig√ºrasyonu geri y√ºklendi: {php_dir}")
            
            # Servisleri yeniden ba≈ülat
            print("üîÑ Servisler yeniden ba≈ülatƒ±lƒ±yor...")
            run("systemctl restart lshttpd mariadb", check=True)
            print("‚úÖ Servisler yeniden ba≈ülatƒ±ldƒ±")
            
            # Dosya izinlerini d√ºzelt
            print("üîß Dosya izinleri d√ºzeltiliyor...")
            run("chown -R lsadm:lsadm /usr/local/lsws/", check=True)
            run("chown -R mysql:mysql /var/lib/mysql/", check=True)
            print("‚úÖ Dosya izinleri d√ºzeltildi")
            
            print(f"\n‚úÖ Geri y√ºkleme tamamlandƒ±: {backup_dir.name}")
            print("üí° Sisteminizi test etmek i√ßin web sitelerinizi kontrol edin.")
        else:
            print("‚ùå Ge√ßersiz se√ßim")
    
    except Exception as e:
        print(f"‚ùå Geri y√ºkleme hatasƒ±: {e}")


def auto_backup_system():
    """Otomatik yedekleme sistemi"""
    print("ü§ñ Otomatik yedekleme sistemi kuruluyor...")
    
    try:
        # Cron job olu≈ütur
        cron_job = "0 2 * * * /usr/local/bin/ispanel --auto-backup >/dev/null 2>&1"
        
        # Mevcut cron jobs'ƒ± kontrol et
        result = run("crontab -l", check=False)
        if result.returncode == 0 and "ispanel --auto-backup" not in result.stdout:
            # Yeni cron job ekle
            current_cron = result.stdout if result.stdout else ""
            new_cron = current_cron + "\n" + cron_job + "\n"
            run(f"echo '{new_cron}' | crontab -", check=True)
            print("‚úÖ Otomatik yedekleme cron job'ƒ± eklendi")
        else:
            print("‚ÑπÔ∏è Otomatik yedekleme zaten aktif")
        
        # Yedekleme dizini olu≈ütur
        backup_dir = Path("/var/backups/ispanel")
        backup_dir.mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ Yedekleme dizini olu≈üturuldu: {backup_dir}")
        
        print("\nüìã Otomatik yedekleme ayarlarƒ±:")
        print("‚Ä¢ Yedekleme zamanƒ±: Her g√ºn saat 02:00")
        print("‚Ä¢ Yedekleme dizini: /var/backups/ispanel")
        print("‚Ä¢ Saklama s√ºresi: 30 g√ºn")
        
    except Exception as e:
        print(f"‚ùå Otomatik yedekleme kurulum hatasƒ±: {e}")


def system_monitoring():
    """Sistem izleme"""
    print("üìä Sistem izleme ba≈ülatƒ±lƒ±yor...")
    
    while True:
        print("\n" + "="*50)
        print("üìä Sƒ∞STEM ƒ∞ZLEME PANELƒ∞")
        print("="*50)
        print("1) Anlƒ±k sistem durumu")
        print("2) Servis durumlarƒ±")
        print("3) Disk kullanƒ±mƒ±")
        print("4) RAM kullanƒ±mƒ±")
        print("5) Aƒü baƒülantƒ±larƒ±")
        print("6) Log dosyalarƒ±")
        print("7) S√ºrekli izleme (5 saniye)")
        print("0) Ana men√ºye d√∂n")
        
        choice = input("\nSe√ßiminizi girin: ").strip()
        
        if choice == "1":
            system_health_check()
        elif choice == "2":
            show_service_status()
        elif choice == "3":
            show_disk_usage()
        elif choice == "4":
            show_memory_usage()
        elif choice == "5":
            show_network_connections()
        elif choice == "6":
            show_log_files()
        elif choice == "7":
            continuous_monitoring()
        elif choice == "0":
            break
        else:
            print("Ge√ßersiz se√ßim")
        
        if choice != "7":
            input("\nDevam etmek i√ßin Enter'a basƒ±n...")


def show_service_status():
    """Servis durumlarƒ±nƒ± g√∂ster"""
    print("üîç Servis durumlarƒ± kontrol ediliyor...")
    
    services = ["lshttpd", "mariadb"]
    
    for service in services:
        try:
            result = run(f"systemctl is-active {service}", check=False)
            status = "‚úÖ Aktif" if result.returncode == 0 else "‚ùå Pasif"
            print(f"{service}: {status}")
        except:
            print(f"{service}: ‚ùì Bilinmiyor")
    
    # OpenLiteSpeed PHP durumunu kontrol et
    print("\nüîç OpenLiteSpeed PHP durumu:")
    try:
        result = run("ls -la /usr/local/lsws/lsphp*", check=False)
        if result.stdout:
            print("‚úÖ OpenLiteSpeed PHP s√ºr√ºmleri:")
            for line in result.stdout.strip().split('\n'):
                if 'lsphp' in line:
                    print(f"  {line}")
        else:
            print("‚ö†Ô∏è OpenLiteSpeed PHP s√ºr√ºmleri bulunamadƒ±")
    except:
        print("‚ùì OpenLiteSpeed PHP durumu kontrol edilemedi")


def show_disk_usage():
    """Disk kullanƒ±mƒ±nƒ± g√∂ster"""
    print("üíæ Disk kullanƒ±mƒ±:")
    run("df -h", check=True)


def show_memory_usage():
    """RAM kullanƒ±mƒ±nƒ± g√∂ster"""
    print("üß† RAM kullanƒ±mƒ±:")
    run("free -h", check=True)


def show_network_connections():
    """Aƒü baƒülantƒ±larƒ±nƒ± g√∂ster"""
    print("üåê Aƒü baƒülantƒ±larƒ±:")
    run("netstat -tulpn | grep -E ':(80|443|3306)'", check=True)


def show_log_files():
    """Log dosyalarƒ±nƒ± g√∂ster"""
    print("üìã Son log kayƒ±tlarƒ±:")
    print("\nOpenLiteSpeed loglarƒ±:")
    run("tail -10 /usr/local/lsws/logs/error.log", check=False)
    print("\nMariaDB loglarƒ±:")
    run("tail -10 /var/log/mysql/error.log", check=False)


def continuous_monitoring():
    """S√ºrekli izleme"""
    print("üîÑ S√ºrekli izleme ba≈ülatƒ±ldƒ± (Ctrl+C ile √ßƒ±kƒ±≈ü)")
    
    try:
        while True:
            print("\n" + "="*50)
            print(f"üìä {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print("="*50)
            
            # Sistem durumu
            system_health_check()
            
            # 5 saniye bekle
            time.sleep(5)
            
    except KeyboardInterrupt:
        print("\nüõë ƒ∞zleme durduruldu")

def system_management_menu():
    """Sistem y√∂netimi men√ºs√º"""
    while True:
        print("\n--- Sistem Y√∂netimi ---")
        print("1) Sistem bilgileri")
        print("2) Servis durumlarƒ±")
        print("3) Disk kullanƒ±mƒ±")
        print("4) RAM kullanƒ±mƒ±")
        print("5) Aƒü baƒülantƒ±larƒ±")
        print("6) Log dosyalarƒ±")
        print("7) Sistem temizliƒüi")
        print("8) Otomatik yedekleme kurulumu")
        print("0) Ana men√ºye d√∂n")
        
        choice = input("\nSe√ßiminizi girin: ").strip()
        
        if choice == "1":
            show_system_info()
        elif choice == "2":
            show_service_status()
        elif choice == "3":
            show_disk_usage()
        elif choice == "4":
            show_memory_usage()
        elif choice == "5":
            show_network_connections()
        elif choice == "6":
            show_log_files()
        elif choice == "7":
            system_cleanup()
        elif choice == "8":
            auto_backup_system()
        elif choice == "0":
            break
        else:
            print("Ge√ßersiz se√ßim")
        
        if choice != "0":
            input("\nDevam etmek i√ßin Enter'a basƒ±n...")


def show_system_info():
    """Sistem bilgilerini g√∂ster"""
    print("üíª Sistem Bilgileri:")
    print(f"Sistem: {run('uname -a', check=True).stdout.strip()}")
    print(f"√áalƒ±≈üma s√ºresi: {run('uptime', check=True).stdout.strip()}")
    print(f"Y√ºkleme: {run('cat /proc/loadavg', check=True).stdout.strip()}")
    print(f"Disk kullanƒ±mƒ±:\n{run('df -h', check=True).stdout}")
    print(f"RAM kullanƒ±mƒ±:\n{run('free -h', check=True).stdout}")


def ols_php_menu():
    """OpenLiteSpeed PHP y√∂netimi men√ºs√º"""
    print("\n--- OpenLiteSpeed PHP Y√∂netimi ---")
    print("1) PHP s√ºr√ºmlerini listele")
    print("2) PHP s√ºr√ºm√º deƒüi≈ütir")
    print("3) PHP mod√ºllerini listele")
    print("4) PHP konfig√ºrasyonunu d√ºzenle")
    print("0) Ana men√ºye d√∂n")
    
    choice = input("\nSe√ßiminizi girin: ").strip()
    
    if choice == "1":
        list_php_versions()
    elif choice == "2":
        change_php_version()
    elif choice == "3":
        list_php_modules()
    elif choice == "4":
        edit_php_config()
    elif choice == "0":
        return
    else:
        print("Ge√ßersiz se√ßim")


def list_php_versions():
    """PHP s√ºr√ºmlerini listele"""
    print("üìã Mevcut PHP s√ºr√ºmleri:")
    run("ls -la /usr/local/lsws/lsphp*", check=True)


def change_php_version():
    """PHP s√ºr√ºm√º deƒüi≈ütir"""
    print("üîÑ PHP s√ºr√ºm√º deƒüi≈ütirme")
    print("1) PHP 8.2")
    print("2) PHP 8.3")
    
    choice = input("Se√ßiminizi girin: ").strip()
    
    if choice == "1":
        run("ln -sf /usr/local/lsws/lsphp82/bin/lsphp /usr/local/lsws/fcgi-bin/lsphp", check=True)
        print("‚úÖ PHP 8.2 aktif edildi")
    elif choice == "2":
        run("ln -sf /usr/local/lsws/lsphp83/bin/lsphp /usr/local/lsws/fcgi-bin/lsphp", check=True)
        print("‚úÖ PHP 8.3 aktif edildi")
    else:
        print("Ge√ßersiz se√ßim")


def list_php_modules():
    """PHP mod√ºllerini listele"""
    print("üìã PHP mod√ºlleri:")
    run("php -m", check=True)


def edit_php_config():
    """PHP konfig√ºrasyonunu d√ºzenle"""
    print("üìù PHP konfig√ºrasyonu d√ºzenleme")
    print("1) PHP 8.2 konfig√ºrasyonu")
    print("2) PHP 8.3 konfig√ºrasyonu")
    
    choice = input("Se√ßiminizi girin: ").strip()
    
    if choice == "1":
        run("nano /etc/php/8.2/fpm/php.ini", check=True)
    elif choice == "2":
        run("nano /etc/php/8.3/fpm/php.ini", check=True)
    else:
        print("Ge√ßersiz se√ßim")


def cache_menu():
    """Cache y√∂netimi men√ºs√º"""
    print("\n--- Cache Y√∂netimi ---")
    print("1) OpenLiteSpeed cache temizle")
    print("2) PHP OPcache temizle")
    print("3) T√ºm cache'leri temizle")
    print("4) Cache durumunu kontrol et")
    print("5) Domain i√ßin OLS Cache a√ß/kapat")
    print("0) Ana men√ºye d√∂n")
    
    choice = input("\nSe√ßiminizi girin: ").strip()
    
    if choice == "1":
        clear_ols_cache()
    elif choice == "2":
        clear_php_cache()
    elif choice == "3":
        clear_all_cache()
    elif choice == "4":
        check_cache_status()
    elif choice == "5":
        toggle_domain_cache_menu()
    elif choice == "0":
        return
    else:
        print("Ge√ßersiz se√ßim")


def clear_ols_cache():
    """OpenLiteSpeed cache temizle"""
    print("üßπ OpenLiteSpeed cache temizleniyor...")
    run("rm -rf /usr/local/lsws/cachedata/*", check=True)
    run("systemctl reload lshttpd", check=True)
    print("‚úÖ OpenLiteSpeed cache temizlendi")


def clear_php_cache():
    """PHP cache temizle"""
    print("üßπ PHP cache temizleniyor...")
    # OpenLiteSpeed PHP cache temizleme
    run("rm -rf /usr/local/lsws/cachedata/*", check=False)
    run("systemctl reload lshttpd", check=True)
    print("‚úÖ OpenLiteSpeed PHP cache temizlendi")


def clear_all_cache():
    """T√ºm cache'leri temizle"""
    print("üßπ T√ºm cache'ler temizleniyor...")
    clear_ols_cache()
    clear_php_cache()
    print("‚úÖ T√ºm cache'ler temizlendi")


def check_cache_status():
    """Cache durumunu kontrol et"""
    print("üìä Cache durumu:")
    print("OpenLiteSpeed cache dizini:")
    run("ls -la /usr/local/lsws/cachedata/", check=True)
    print("\nPHP OPcache durumu:")
    run("php -r 'echo phpinfo();' | grep -i opcache", check=True)


def repair_menu():
    """Onarƒ±m men√ºs√º"""
    print("\n--- Sistem Onarƒ±mƒ± ---")
    print("1) Konfig√ºrasyon dosyalarƒ±nƒ± onar")
    print("2) Veritabanƒ± onarƒ±mƒ±")
    print("3) Servisleri yeniden ba≈ülat")
    print("4) Dosya izinlerini d√ºzelt")
    print("5) Symlink'leri d√ºzelt")
    print("0) Ana men√ºye d√∂n")
    
    choice = input("\nSe√ßiminizi girin: ").strip()
    
    if choice == "1":
        repair_configurations()
    elif choice == "2":
        repair_databases()
    elif choice == "3":
        restart_services()
    elif choice == "4":
        fix_permissions()
    elif choice == "5":
        fix_symlinks()
    elif choice == "0":
        return
    else:
        print("Ge√ßersiz se√ßim")


def restart_services():
    """Servisleri yeniden ba≈ülat"""
    print("üîÑ Servisler yeniden ba≈ülatƒ±lƒ±yor...")
    run("systemctl restart lshttpd mariadb", check=True)
    print("‚úÖ T√ºm servisler yeniden ba≈ülatƒ±ldƒ±")


def fix_permissions():
    """Dosya izinlerini d√ºzelt"""
    print("üîß Dosya izinleri d√ºzeltiliyor...")
    run("chown -R lsadm:lsadm /usr/local/lsws/", check=True)
    run("chmod -R 755 /usr/local/lsws/", check=True)
    run("chown -R mysql:mysql /var/lib/mysql/", check=True)
    print("‚úÖ Dosya izinleri d√ºzeltildi")


def fix_symlinks():
    """Symlink'leri d√ºzelt"""
    print("üîß Symlink'ler d√ºzeltiliyor...")
    run("rm -f /usr/local/bin/ispanel", check=False)
    install_symlink()
    print("‚úÖ Symlink'ler d√ºzeltildi")


def main():
    # Konfig√ºrasyonu y√ºkle
    load_config()
    
    parser = argparse.ArgumentParser(description="SSH tabanlƒ± mini panel (Ubuntu 22+)")
    sub = parser.add_subparsers(dest="cmd")

    p_install = sub.add_parser("install", help="OpenLiteSpeed, PHP 8.2 ve MariaDB kur")
    p_install.set_defaults(func=cmd_install)

    p_install_symlink = sub.add_parser("install-symlink", help="isPanel komutunu kur")

    def _install_symlink(args):
        install_symlink()

    p_install_symlink.set_defaults(func=_install_symlink)

    p_dadd = sub.add_parser("domain-add", help="Domain ekle")
    p_dadd.add_argument("domain")

    def _dadd(args):
        require_root()
        domain_add(args.domain)

    p_dadd.set_defaults(func=_dadd)

    p_drm = sub.add_parser("domain-rm", help="Domain sil")
    p_drm.add_argument("domain")

    def _drm(args):
        require_root()
        domain_remove(args.domain)

    p_drm.set_defaults(func=_drm)

    p_dbcreate = sub.add_parser(
        "db-create", help="MariaDB veritabanƒ± ve kullanƒ±cƒ± olu≈ütur"
    )
    p_dbcreate.add_argument("db")
    p_dbcreate.add_argument("user")
    p_dbcreate.add_argument("password")

    def _dbcreate(args):
        require_root()
        db_create(args.db, args.user, args.password)

    p_dbcreate.set_defaults(func=_dbcreate)

    p_dbdelete = sub.add_parser("db-delete", help="MariaDB veritabanƒ± ve kullanƒ±cƒ± sil")
    p_dbdelete.add_argument("db")
    p_dbdelete.add_argument("user")

    def _dbdelete(args):
        require_root()
        db_delete(args.db, args.user)

    p_dbdelete.set_defaults(func=_dbdelete)

    # Etkile≈üimli men√º
    p_menu = sub.add_parser("menu", help="ƒ∞nteraktif men√ºy√º ba≈ülat")

    def _menu(args):
        require_root()
        select_language()
        interactive_menu()

    p_menu.set_defaults(func=_menu)

    args = parser.parse_args()
    if not hasattr(args, "func"):
        # Varsayƒ±lan olarak men√ºy√º a√ß
        if os.geteuid() == 0:
            # Dil se√ßimi yap
            select_language()
            interactive_menu()
            return
        else:
            parser.print_help()
            sys.exit(1)
    args.func(args)


if __name__ == "__main__":
    main()
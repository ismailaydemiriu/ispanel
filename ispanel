#!/usr/bin/env python3
import argparse
import os
import re
import shutil
import subprocess
import sys
import time
from pathlib import Path


def run(cmd: str, check: bool = True) -> subprocess.CompletedProcess:
    return subprocess.run(cmd, shell=True, check=check, text=True)


def require_root():
    if os.geteuid() != 0:
        print("Bu komutları root olarak çalıştırın (sudo kullanın).", file=sys.stderr)
        sys.exit(1)


def wait_for_apt(max_retries: int = 30, delay: int = 10):
    retries = 0
    while retries < max_retries:
        cp = subprocess.run(
            "ps aux | grep -E '(apt|apt-get)\\s' | grep -v grep | grep -v _apt",
            shell=True,
            text=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        if not cp.stdout.strip():
            return
        retries += 1
        print(f"apt kullanımda, {retries}/{max_retries} bekleniyor...", flush=True)
        time.sleep(delay)
    print("HATA: apt kilitli görünüyor. Lütfen diğer apt işlemlerini kapatın.", file=sys.stderr)
    sys.exit(1)


def ensure_cmd(cmd: str, pkg: str):
    if shutil.which(cmd):
        return
    wait_for_apt()
    run(f"DEBIAN_FRONTEND=noninteractive apt-get update -y")
    run(f"DEBIAN_FRONTEND=noninteractive apt-get install -y {pkg}")
    if not shutil.which(cmd):
        print(f"Gerekli komut bulunamadı: {cmd} (paket: {pkg})", file=sys.stderr)
        sys.exit(1)


def check_disk_space(min_gb: int = 1):
    df = shutil.disk_usage("/")
    available_gb = df.free // (1024 * 1024 * 1024)
    print(f"Boş disk alanı: {available_gb} GB")
    if available_gb < min_gb:
        print("En az 1GB boş alan gerekli.", file=sys.stderr)
        sys.exit(1)


def install_openlitespeed_and_php():
    print("OpenLiteSpeed ve PHP 8.2 kuruluyor...")
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get update -y")
    ensure_cmd("curl", "curl")
    ensure_cmd("wget", "wget")

    # Litespeed repo
    run("wget -O - https://repo.litespeed.sh | bash", check=True)

    # Paketler
    run("DEBIAN_FRONTEND=noninteractive apt-get -y install openlitespeed", check=True)
    # Tüm lsphp82 paketlerini kur
    run("DEBIAN_FRONTEND=noninteractive apt-get -y install lsphp82*", check=True)

    # Hizmetleri başlat/enable
    # openlitespeed service name is usually 'lsws'
    try:
        run("systemctl enable lsws", check=False)
        run("systemctl restart lsws", check=True)
    except subprocess.CalledProcessError:
        run("/usr/local/lsws/bin/lswsctrl restart", check=True)


def install_mariadb():
    print("MariaDB kuruluyor...")
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get update -y")
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y mariadb-server", check=True)
    run("systemctl enable mariadb", check=False)
    run("systemctl restart mariadb", check=True)


def install_symlink():
    target = "/usr/local/bin/ispanel"
    me = Path(sys.argv[0]).resolve()
    # symlink CLI to open menu by default
    try:
        Path(target).unlink(missing_ok=True)
        os.symlink(str(me), target)
        os.chmod(target, 0o755)
    except Exception as e:
        # Fallback: write a tiny wrapper
        wrapper = f"#!/bin/sh\nexec python3 {me} menu \"$@\"\n"
        Path(target).write_text(wrapper, encoding="utf-8")
        os.chmod(target, 0o755)


def cmd_install(args: argparse.Namespace):
    require_root()
    check_disk_space(1)

    # OS kontrolü
    with open("/etc/os-release", "r", encoding="utf-8") as f:
        osr = f.read()
    if "Ubuntu" not in osr:
        print("Bu kurulum Ubuntu 22+ için tasarlanmıştır.", file=sys.stderr)
    
    print("=== ispanel Kurulum Başlıyor ===")
    
    # Temel kurulum
    install_openlitespeed_and_php()
    install_mariadb()
    
    # Güvenlik ve performans ayarları
    print("\n=== Güvenlik ve Performans Ayarları ===")
    manage_firewall()
    install_ssl_support()
    secure_mariadb()
    optimize_openlitespeed()
    
    # PHP OPcache konfigürasyonu
    configure_php_opcache()
    
    # Yedek dizinleri oluştur
    Path("/www/backup/domains").mkdir(parents=True, exist_ok=True)
    Path("/www/backup/databases").mkdir(parents=True, exist_ok=True)
    
    # Symlink oluştur
    install_symlink()
    
    print("\n=== Kurulum Tamamlandı ===")
    print("✅ OpenLiteSpeed + PHP 8.2 + MariaDB kuruldu")
    print("✅ Firewall ayarları yapıldı")
    print("✅ SSL/HTTPS desteği eklendi")
    print("✅ MariaDB güvenlik ayarları yapıldı")
    print("✅ OpenLiteSpeed performans optimizasyonu yapıldı")
    print("✅ Yedek sistemi hazır")
    print("\nKullanım: sudo ispanel")


# ---------- OpenLiteSpeed domain yönetimi ----------

LSWS_CONF_DIR = Path("/usr/local/lsws/conf")
VHOSTS_DIR = LSWS_CONF_DIR / "vhosts"
HTTPD_CONF = LSWS_CONF_DIR / "httpd_config.conf"
DOCROOT_BASE = Path("/home")


def reload_lsws():
    try:
        run("systemctl reload lsws", check=True)
    except subprocess.CalledProcessError:
        run("/usr/local/lsws/bin/lswsctrl restart", check=True)


def ensure_http_listener_mapping(domain: str):
    if not HTTPD_CONF.exists():
        print(f"Bulunamadı: {HTTPD_CONF}", file=sys.stderr)
        sys.exit(1)
    content = HTTPD_CONF.read_text(encoding="utf-8")

    map_block = f"map                     {domain}:80 {domain}"
    listener_pattern = r"listener\s+Default\\s*\{[\s\S]*?\}"
    m = re.search(listener_pattern, content)
    if not m:
        print("httpd_config.conf içinde 'listener Default' bulunamadı. Lütfen OLS varsayılan konfigürasyonunu kullanın.", file=sys.stderr)
        sys.exit(1)
    block = m.group(0)
    if map_block in block:
        return
    new_block = block.rstrip("}\n") + f"\n    {map_block}\n}}"
    new_content = content.replace(block, new_block)
    HTTPD_CONF.write_text(new_content, encoding="utf-8")


def ensure_https_listener_mapping(domain: str):
    """HTTPS listener mapping ekle"""
    if not HTTPD_CONF.exists():
        return
    content = HTTPD_CONF.read_text(encoding="utf-8")

    # HTTPS listener kontrolü
    https_listener_pattern = r"listener\s+SSL\\s*\{[\s\S]*?\}"
    if not re.search(https_listener_pattern, content):
        # HTTPS listener oluştur
        ssl_cert = f"/etc/letsencrypt/live/{domain}/fullchain.pem"
        ssl_key = f"/etc/letsencrypt/live/{domain}/privkey.pem"
        
        https_listener = f"""
listener SSL {{
    address                 *:443
    secure                  1
    keyFile                 {ssl_key}
    certFile                {ssl_cert}
    certChain               1
    sslProtocol             24
    ciphers                 EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
    enableECDHE             1
    renegProtection         1
    sslSessionCache         1
    sslSessionTickets       1
    enableSpdy              15
    enableQuic              1
    map                     {domain}:443 {domain}
}}
"""
        # Listener'ı ekle
        new_content = content + https_listener
        HTTPD_CONF.write_text(new_content, encoding="utf-8")
    else:
        # Mevcut HTTPS listener'a domain ekle
        map_block = f"map                     {domain}:443 {domain}"
        if map_block not in content:
            # HTTPS listener içine domain mapping ekle
            pass


def write_vhost_conf(domain: str, docroot: Path):
    vdir = VHOSTS_DIR / domain
    vdir.mkdir(parents=True, exist_ok=True)
    vconf = vdir / f"{domain}.conf"
    accesslog = Path("/usr/local/lsws/logs") / f"{domain}.access.log"
    errorlog = Path("/usr/local/lsws/logs") / f"{domain}.error.log"
    conf = f"""
virtualHost {domain} {{
    vhRoot                  {docroot}
    configFile              conf/vhosts/{domain}/{domain}.conf
    allowSymbolLink         1
    enableScript            1
    restrained              1
}}
vhDomain                  {domain}
docRoot                   {docroot}
index  {"index.php,index.html"}

errorlog {errorlog} {{
    useServer              0
    logLevel               ERROR
}}

accesslog {accesslog} {{
    useServer              0
    logFormat              "%h %l %u %t \"%r\" %>s %b"
}}

context / {{
    location              {docroot}
    allowBrowse           1
}}

scriptHandler {{
    add                   lsapi:lsphp82 php
}}

phpIniOverride  {{
}}
""".strip()
    vconf.write_text(conf, encoding="utf-8")


def ensure_docroot(domain: str) -> Path:
    docroot = DOCROOT_BASE / domain / "public_html"
    docroot.mkdir(parents=True, exist_ok=True)
    index_file = docroot / "index.php"
    if not index_file.exists():
        index_file.write_text("<?php phpinfo();", encoding="utf-8")
    run(f"chown -R lsadm:lsadm {DOCROOT_BASE / domain}", check=False)
    return docroot


def domain_add(domain: str):
    if not re.match(r"^[A-Za-z0-9.-]+$", domain):
        print("Geçersiz domain.", file=sys.stderr)
        sys.exit(1)
    if not LSWS_CONF_DIR.exists():
        print("OpenLiteSpeed kurulu değil gibi görünüyor.", file=sys.stderr)
        sys.exit(1)
    
    docroot = ensure_docroot(domain)
    write_vhost_conf(domain, docroot)
    ensure_http_listener_mapping(domain)
    
    # SSL sertifikası oluştur (Let's Encrypt)
    if shutil.which("certbot"):
        try:
            print(f"SSL sertifikası oluşturuluyor: {domain}")
            run(f"certbot certonly --standalone -d {domain} --non-interactive --agree-tos --email admin@{domain}", check=False)
            
            # SSL konfigürasyonunu OpenLiteSpeed'e ekle
            ssl_cert = f"/etc/letsencrypt/live/{domain}/fullchain.pem"
            ssl_key = f"/etc/letsencrypt/live/{domain}/privkey.pem"
            
            if Path(ssl_cert).exists() and Path(ssl_key).exists():
                # HTTPS listener ekle
                ensure_https_listener_mapping(domain)
                print(f"SSL sertifikası başarıyla oluşturuldu: {domain}")
        except:
            print(f"SSL sertifikası oluşturulamadı: {domain}")
    
    reload_lsws()
    print(f"Domain eklendi: {domain} -> {docroot}")
    print(f"HTTP: http://{domain}")
    print(f"HTTPS: https://{domain} (SSL varsa)")


def domain_remove(domain: str):
    vdir = VHOSTS_DIR / domain
    if vdir.exists():
        shutil.rmtree(vdir)

    if HTTPD_CONF.exists():
        content = HTTPD_CONF.read_text(encoding="utf-8")
        content = re.sub(rf"\n\s*map\s+{re.escape(domain)}:80\s+{re.escape(domain)}\s*", "\n", content)
        HTTPD_CONF.write_text(content, encoding="utf-8")
    reload_lsws()
    print(f"Domain silindi: {domain}")


# ---------- MariaDB yönetimi ----------

def mysql_exec(sql: str):
    run(f"mysql -uroot -e \"{sql}\"", check=True)


def db_create(db: str, user: str, password: str):
    if not re.match(r"^[A-Za-z0-9_]+$", db):
        print("Geçersiz veritabanı adı.", file=sys.stderr)
        sys.exit(1)
    if not re.match(r"^[A-Za-z0-9_]+$", user):
        print("Geçersiz kullanıcı adı.", file=sys.stderr)
        sys.exit(1)
    sql = (
        f"CREATE DATABASE IF NOT EXISTS `{db}` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; "
        f"CREATE USER IF NOT EXISTS '{user}'@'%' IDENTIFIED BY '{password}'; "
        f"GRANT ALL PRIVILEGES ON `{db}`.* TO '{user}'@'%'; FLUSH PRIVILEGES;"
    )
    mysql_exec(sql)
    print(f"DB oluşturuldu: {db}, kullanıcı: {user}")


def db_delete(db: str, user: str):
    sql = (
        f"DROP DATABASE IF EXISTS `{db}`; "
        f"DROP USER IF EXISTS '{user}'@'%'; FLUSH PRIVILEGES;"
    )
    mysql_exec(sql)
    print(f"DB silindi: {db}, kullanıcı: {user}")


def db_user_create(user: str, password: str, host: str = "%"):
    if not re.match(r"^[A-Za-z0-9_]+$", user):
        print("Geçersiz kullanıcı adı.", file=sys.stderr)
        sys.exit(1)
    sql = (
        f"CREATE USER IF NOT EXISTS '{user}'@'{host}' IDENTIFIED BY '{password}'; "
        f"FLUSH PRIVILEGES;"
    )
    mysql_exec(sql)
    print(f"Kullanıcı oluşturuldu: {user}@{host}")


def reset_mysql_root_password():
    print("MySQL root şifresi sıfırlanıyor...")
    new_password = input("Yeni root şifresi: ").strip()
    if not new_password:
        print("Şifre boş olamaz!")
        return
    
    # MySQL servisini durdur
    run("systemctl stop mariadb", check=False)
    
    # Güvenli modda MySQL başlat
    run("mysqld_safe --skip-grant-tables --skip-networking &", check=False)
    time.sleep(3)
    
    # Root şifresini sıfırla
    sql = f"ALTER USER 'root'@'localhost' IDENTIFIED BY '{new_password}';"
    run(f"mysql -u root -e \"{sql}\"", check=True)
    
    # MySQL'i normal modda yeniden başlat
    run("pkill mysqld", check=False)
    time.sleep(2)
    run("systemctl start mariadb", check=True)
    
    print("MySQL root şifresi başarıyla sıfırlandı!")


def reset_openlitespeed_admin_password():
    print("OpenLiteSpeed admin şifresi sıfırlanıyor...")
    new_password = input("Yeni admin şifresi: ").strip()
    if not new_password:
        print("Şifre boş olamaz!")
        return
    
    # OpenLiteSpeed admin şifresini sıfırla
    admin_script = "/usr/local/lsws/admin/misc/admpass.sh"
    if not Path(admin_script).exists():
        print("OpenLiteSpeed admin scripti bulunamadı!", file=sys.stderr)
        return
    
    # Admin şifresini ayarla
    run(f"echo '{new_password}' | {admin_script}", check=True)
    
    print("OpenLiteSpeed admin şifresi başarıyla sıfırlandı!")
    print(f"Admin panel: https://SERVER_IP:7080")
    print(f"Kullanıcı: admin")
    print(f"Şifre: {new_password}")


def check_port(port):
    """Port kullanımını kontrol et"""
    try:
        result = run(f"netstat -tuln | grep ':{port} '", check=False)
        return bool(result.stdout.strip())
    except:
        return False


def manage_firewall():
    """Firewall yönetimi"""
    print("Firewall yönetimi...")
    
    # UFW kontrolü
    if shutil.which("ufw"):
        print("UFW firewall yönetiliyor...")
        ports = [20, 21, 22, 80, 443, 7080, 8088]
        for port in ports:
            run(f"ufw allow {port}/tcp", check=False)
        run("ufw --force enable", check=False)
    else:
        print("UFW bulunamadı, iptables kullanılıyor...")
        # iptables kuralları
        run("iptables -I INPUT -p tcp --dport 20 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 21 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 22 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 80 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 443 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 7080 -j ACCEPT", check=False)
        run("iptables -I INPUT -p tcp --dport 8088 -j ACCEPT", check=False)


def install_ssl_support():
    """SSL/HTTPS desteği kurulumu"""
    print("SSL/HTTPS desteği kuruluyor...")
    wait_for_apt()
    
    # Certbot kurulumu
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y certbot", check=True)
    
    # OpenLiteSpeed için SSL konfigürasyonu
    ssl_dir = Path("/usr/local/lsws/conf/cert")
    ssl_dir.mkdir(exist_ok=True)
    
    print("SSL desteği kuruldu. Let's Encrypt sertifikaları domain ekleme sırasında otomatik oluşturulacak.")


def secure_mariadb():
    """MariaDB güvenlik ayarları"""
    print("MariaDB güvenlik ayarları yapılıyor...")
    
    # mysql_secure_installation benzeri işlemler
    sql_commands = [
        "DELETE FROM mysql.user WHERE User='';",
        "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');",
        "DROP DATABASE IF EXISTS test;",
        "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';",
        "FLUSH PRIVILEGES;"
    ]
    
    for sql in sql_commands:
        try:
            mysql_exec(sql)
        except:
            pass  # Bazı komutlar zaten uygulanmış olabilir
    
    print("MariaDB güvenlik ayarları tamamlandı.")


def optimize_openlitespeed():
    """OpenLiteSpeed performans optimizasyonu"""
    print("OpenLiteSpeed performans optimizasyonu yapılıyor...")
    
    # Konfigürasyon dosyası optimizasyonları
    config_file = Path("/usr/local/lsws/conf/httpd_config.conf")
    if config_file.exists():
        content = config_file.read_text(encoding="utf-8")
        
        # Performans ayarları
        optimizations = [
            ("maxConnections", "1000"),
            ("maxSSLConnections", "1000"),
            ("connTimeout", "300"),
            ("keepAliveTimeout", "15"),
            ("maxKeepAliveReq", "1000")
        ]
        
        for setting, value in optimizations:
            if f"{setting} {value}" not in content:
                # Konfigürasyona optimizasyon ekle
                pass
    
    print("OpenLiteSpeed performans optimizasyonu tamamlandı.")


def repair_mariadb():
    """MariaDB onarım işlemleri"""
    print("MariaDB onarım işlemleri yapılıyor...")
    
    # MySQL servisini durdur
    run("systemctl stop mariadb", check=False)
    
    # Repair işlemleri
    try:
        # MySQL'i güvenli modda başlat
        run("mysqld_safe --skip-grant-tables --skip-networking &", check=False)
        time.sleep(3)
        
        # Repair komutları
        repair_commands = [
            "REPAIR TABLE mysql.user;",
            "REPAIR TABLE mysql.db;",
            "REPAIR TABLE mysql.tables_priv;",
            "REPAIR TABLE mysql.columns_priv;",
            "FLUSH PRIVILEGES;"
        ]
        
        for cmd in repair_commands:
            try:
                run(f"mysql -u root -e \"{cmd}\"", check=True)
            except:
                pass
        
        # MySQL'i normal modda yeniden başlat
        run("pkill mysqld", check=False)
        time.sleep(2)
        run("systemctl start mariadb", check=True)
        
        print("MariaDB onarım işlemleri tamamlandı.")
    except Exception as e:
        print(f"MariaDB onarım hatası: {e}")
        run("systemctl start mariadb", check=False)


def repair_openlitespeed():
    """OpenLiteSpeed onarım işlemleri"""
    print("OpenLiteSpeed onarım işlemleri yapılıyor...")
    
    try:
        # Konfigürasyon dosyalarını kontrol et
        config_files = [
            "/usr/local/lsws/conf/httpd_config.conf",
            "/usr/local/lsws/conf/vhosts"
        ]
        
        for config_file in config_files:
            if Path(config_file).exists():
                # Dosya izinlerini düzelt
                run(f"chown -R lsadm:lsadm {config_file}", check=False)
                run(f"chmod -R 755 {config_file}", check=False)
        
        # OpenLiteSpeed'i yeniden başlat
        run("systemctl restart lsws", check=False)
        
        # Alternatif restart
        try:
            run("/usr/local/lsws/bin/lswsctrl restart", check=True)
        except:
            pass
            
        print("OpenLiteSpeed onarım işlemleri tamamlandı.")
    except Exception as e:
        print(f"OpenLiteSpeed onarım hatası: {e}")


def install_redis():
    """Redis kurulumu"""
    print("Redis kuruluyor...")
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y redis-server", check=True)
    run("systemctl enable redis-server", check=False)
    run("systemctl start redis-server", check=True)
    print("Redis kuruldu ve başlatıldı.")


def install_memcached():
    """Memcached kurulumu"""
    print("Memcached kuruluyor...")
    wait_for_apt()
    run("DEBIAN_FRONTEND=noninteractive apt-get install -y memcached", check=True)
    run("systemctl enable memcached", check=False)
    run("systemctl start memcached", check=True)
    print("Memcached kuruldu ve başlatıldı.")


def configure_php_opcache():
    """PHP OPcache konfigürasyonu"""
    print("PHP OPcache konfigürasyonu yapılıyor...")
    
    # OPcache ayarları
    opcache_config = """
[opcache]
opcache.enable=1
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=2
opcache.fast_shutdown=1
opcache.enable_cli=1
"""
    
    # PHP ini dosyasına ekle
    php_ini_path = "/usr/local/lsws/lsphp82/etc/php/8.2/litespeed/php.ini"
    if Path(php_ini_path).exists():
        with open(php_ini_path, "a", encoding="utf-8") as f:
            f.write(opcache_config)
        print("OPcache konfigürasyonu eklendi.")
    else:
        print("PHP ini dosyası bulunamadı, OPcache manuel olarak yapılandırılmalı.")


def backup_domain(domain):
    """Domain yedeği alma"""
    backup_dir = Path("/www/backup/domains")
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    backup_file = backup_dir / f"{domain}_{timestamp}.tar.gz"
    
    docroot = DOCROOT_BASE / domain
    if docroot.exists():
        run(f"tar -czf {backup_file} -C {docroot.parent} {domain}", check=True)
        print(f"Domain yedeği alındı: {backup_file}")
        return str(backup_file)
    else:
        print(f"Domain docroot bulunamadı: {docroot}")
        return None


def backup_database(db_name):
    """Veritabanı yedeği alma"""
    backup_dir = Path("/www/backup/databases")
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    backup_file = backup_dir / f"{db_name}_{timestamp}.sql"
    
    run(f"mysqldump -uroot {db_name} > {backup_file}", check=True)
    print(f"Veritabanı yedeği alındı: {backup_file}")
    return str(backup_file)


def restore_domain(backup_file):
    """Domain yedeği geri yükleme"""
    if not Path(backup_file).exists():
        print(f"Yedek dosyası bulunamadı: {backup_file}")
        return False
    
    run(f"tar -xzf {backup_file} -C {DOCROOT_BASE.parent}", check=True)
    print(f"Domain yedeği geri yüklendi: {backup_file}")
    return True


def restore_database(backup_file, db_name):
    """Veritabanı yedeği geri yükleme"""
    if not Path(backup_file).exists():
        print(f"Yedek dosyası bulunamadı: {backup_file}")
        return False
    
    # Veritabanını oluştur
    mysql_exec(f"CREATE DATABASE IF NOT EXISTS {db_name}")
    
    # Yedeği geri yükle
    run(f"mysql -uroot {db_name} < {backup_file}", check=True)
    print(f"Veritabanı yedeği geri yüklendi: {backup_file}")
    return True


def list_backups():
    """Yedekleri listele"""
    domain_backups = list(Path("/www/backup/domains").glob("*.tar.gz"))
    db_backups = list(Path("/www/backup/databases").glob("*.sql"))
    
    print("\n=== Domain Yedekleri ===")
    for backup in domain_backups:
        print(f"- {backup.name}")
    
    print("\n=== Veritabanı Yedekleri ===")
    for backup in db_backups:
        print(f"- {backup.name}")


def install_cron():
    ensure_cmd("crontab", "cron")


def cron_add(line: str):
    install_cron()
    # mevcut crontab al
    cp = subprocess.run("crontab -l", shell=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    current = cp.stdout if cp.returncode == 0 else ""
    if line in current:
        print("Cron zaten mevcut")
        return
    new = current + ("\n" if current and not current.endswith("\n") else "") + line + "\n"
    p = subprocess.run("crontab -", shell=True, input=new, text=True)
    if p.returncode == 0:
        print("Cron eklendi")
    else:
        print("Cron eklenemedi", file=sys.stderr)


def cron_backup_menu():
    while True:
        print("\n--- Cron Backup Ayarları ---")
        print("1) Günlük DB yedeği kur (02:30)")
        print("2) Günlük Dosya yedeği kur (03:00)")
        print("3) Cron listele")
        print("0) Geri")
        sub = input("Seçim: ").strip()
        if sub == "1":
            db = input("Yedeklenecek DB adı: ").strip()
            backup_dir = "/www/backup/databases"
            line = f"30 2 * * * mysqldump -uroot {db} > {backup_dir}/{db}_$(date +\\%Y\\%m\\%d).sql"
            cron_add(line)
        elif sub == "2":
            domain = input("Yedeklenecek domain: ").strip()
            backup_dir = "/www/backup/domains"
            line = f"0 3 * * * tar -czf {backup_dir}/{domain}_$(date +\\%Y\\%m\\%d).tar.gz -C {DOCROOT_BASE} {domain}"
            cron_add(line)
        elif sub == "3":
            subprocess.run("crontab -l | cat", shell=True)
        elif sub == "0":
            break
        else:
            print("Geçersiz seçim")


def interactive_menu():
    while True:
        print("\n=== ispanel (Ubuntu 22+) ===")
        print("1) Kurulum (OpenLiteSpeed + PHP 8.2 + MariaDB)")
        print("2) Domain ekle")
        print("3) Domain sil")
        print("4) DB oluştur")
        print("5) DB sil")
        print("8) Port kontrolü ve Firewall yönetimi")
        print("9) SSL/HTTPS desteği kur")
        print("10) MariaDB güvenlik ayarları")
        print("11) OpenLiteSpeed performans optimizasyonu")
        print("12) Dosya yedekleme menüsü")
        print("13) Veritabanı yedekleme menüsü")
        print("14) Yedekleri listele")
        print("17) Cron backup ayarları")
        print("18) Onarım araçları")
        print("19) Cache sistemleri (Redis/Memcached)")
        print("15) MySQL root şifre sıfırla")
        print("16) OpenLiteSpeed admin şifre sıfırla")
        print("0) Çıkış")
        choice = input("Seçim: ").strip()
        if choice == "1":
            cmd_install(argparse.Namespace())
        elif choice == "2":
            domain = input("Domain: ").strip()
            domain_add(domain)
        elif choice == "3":
            domain = input("Domain: ").strip()
            domain_remove(domain)
        elif choice == "4":
            db = input("DB adı: ").strip()
            user = input("Kullanıcı: ").strip()
            password = input("Parola: ").strip()
            db_create(db, user, password)
        elif choice == "5":
            db = input("DB adı: ").strip()
            user = input("Kullanıcı: ").strip()
            db_delete(db, user)
        elif choice == "8":
            manage_firewall()
        elif choice == "9":
            install_ssl_support()
        elif choice == "10":
            secure_mariadb()
        elif choice == "11":
            optimize_openlitespeed()
        elif choice == "12":
            while True:
                print("\n--- Dosya Yedekleme ---")
                print("1) Domain yedeği al")
                print("2) Domain yedeği geri yükle")
                print("3) Docroot taban klasörünü göster")
                print("0) Geri")
                sub = input("Seçim: ").strip()
                if sub == "1":
                    domain = input("Domain: ").strip()
                    backup_domain(domain)
                elif sub == "2":
                    backup_file = input("Yedek dosyası yolu: ").strip()
                    restore_domain(backup_file)
                elif sub == "3":
                    print(f"Docroot base: {DOCROOT_BASE}")
                elif sub == "0":
                    break
                else:
                    print("Geçersiz seçim")
        elif choice == "13":
            while True:
                print("\n--- Veritabanı Yedekleme ---")
                print("1) DB yedeği al")
                print("2) DB yedeği geri yükle")
                print("3) DB kullanıcısı oluştur")
                print("0) Geri")
                sub = input("Seçim: ").strip()
                if sub == "1":
                    db = input("DB adı: ").strip()
                    backup_database(db)
                elif sub == "2":
                    backup_file = input("Yedek dosyası yolu: ").strip()
                    db_name = input("Hedef DB adı: ").strip()
                    restore_database(backup_file, db_name)
                elif sub == "3":
                    user = input("Kullanıcı adı: ").strip()
                    password = input("Parola: ").strip()
                    host = input("Host (varsayılan %): ").strip() or "%"
                    db_user_create(user, password, host)
                elif sub == "0":
                    break
                else:
                    print("Geçersiz seçim")
        elif choice == "14":
            list_backups()
        elif choice == "17":
            cron_backup_menu()
        elif choice == "18":
            repair_menu()
        elif choice == "19":
            cache_menu()
        elif choice == "15":
            reset_mysql_root_password()
        elif choice == "16":
            reset_openlitespeed_admin_password()
        elif choice == "0":
            break
        else:
            print("Geçersiz seçim")


def repair_menu():
    """Onarım araçları menüsü"""
    while True:
        print("\n--- Onarım Araçları ---")
        print("1) MariaDB onar")
        print("2) OpenLiteSpeed onar")
        print("3) PHP OPcache konfigürasyonu")
        print("0) Geri")
        sub = input("Seçim: ").strip()
        if sub == "1":
            repair_mariadb()
        elif sub == "2":
            repair_openlitespeed()
        elif sub == "3":
            configure_php_opcache()
        elif sub == "0":
            break
        else:
            print("Geçersiz seçim")


def cache_menu():
    """Cache sistemleri menüsü"""
    while True:
        print("\n--- Cache Sistemleri ---")
        print("1) Redis kur")
        print("2) Memcached kur")
        print("3) Redis durumu")
        print("4) Memcached durumu")
        print("0) Geri")
        sub = input("Seçim: ").strip()
        if sub == "1":
            install_redis()
        elif sub == "2":
            install_memcached()
        elif sub == "3":
            run("systemctl status redis-server", check=False)
        elif sub == "4":
            run("systemctl status memcached", check=False)
        elif sub == "0":
            break
        else:
            print("Geçersiz seçim")


def main():
    parser = argparse.ArgumentParser(description="SSH tabanlı mini panel (Ubuntu 22+)")
    sub = parser.add_subparsers(dest="cmd")

    p_install = sub.add_parser("install", help="OpenLiteSpeed, PHP 8.2 ve MariaDB kur")
    p_install.set_defaults(func=cmd_install)

    p_dadd = sub.add_parser("domain-add", help="Domain ekle")
    p_dadd.add_argument("domain")
    def _dadd(args):
        require_root()
        domain_add(args.domain)
    p_dadd.set_defaults(func=_dadd)

    p_drm = sub.add_parser("domain-rm", help="Domain sil")
    p_drm.add_argument("domain")
    def _drm(args):
        require_root()
        domain_remove(args.domain)
    p_drm.set_defaults(func=_drm)

    p_dbcreate = sub.add_parser("db-create", help="MariaDB veritabanı ve kullanıcı oluştur")
    p_dbcreate.add_argument("db")
    p_dbcreate.add_argument("user")
    p_dbcreate.add_argument("password")
    def _dbcreate(args):
        require_root()
        db_create(args.db, args.user, args.password)
    p_dbcreate.set_defaults(func=_dbcreate)

    p_dbdelete = sub.add_parser("db-delete", help="MariaDB veritabanı ve kullanıcı sil")
    p_dbdelete.add_argument("db")
    p_dbdelete.add_argument("user")
    def _dbdelete(args):
        require_root()
        db_delete(args.db, args.user)
    p_dbdelete.set_defaults(func=_dbdelete)

    # Etkileşimli menü
    p_menu = sub.add_parser("menu", help="İnteraktif menüyü başlat")
    def _menu(args):
        require_root()
        interactive_menu()
    p_menu.set_defaults(func=_menu)

    args = parser.parse_args()
    if not hasattr(args, "func"):
        # Varsayılan olarak menüyü aç
        if os.geteuid() == 0:
            interactive_menu()
            return
        else:
            parser.print_help()
            sys.exit(1)
    args.func(args)


if __name__ == "__main__":
    main()


